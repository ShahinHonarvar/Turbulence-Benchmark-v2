{
  "parameter(s)": [
    96
  ],
  "test_matrix_of_one_integer": [
    "passed",
    "",
    0.00017
  ],
  "test_horizontal_matrix": [
    "failed",
    "assert 0 == 193",
    0.00031
  ],
  "test_matrix_of_having_96_integers": [
    "failed",
    "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[ 38,  80],\\n        [-15,  93],\\n        [ 34, -68],\\n        [-53, -94],\\n        [-40,  27],\\n        [ 95, -39],\\n        [ 12, -74],\\n        [ 33, -46],\\n        [ 94, -31],\\n        [ 55, -30],\\n        [-15, -61],\\n        [ 63, -28],\\n        [-87, -72],\\n        [-34, -65],\\n        [  7,  -4],\\n        [-38,  24],\\n        [  1, -39],\\n        [ 28,  15],\\n        [-53,  68],\\n        [-15,  94],\\n        [  4, -55],\\n        [ 46, -90],\\n        [ -2,  50],\\n        [ 46,  15],\\n        [-31,  21],\\n        [ 14,   2],\\n        [-81, -17],\\n        [-85,  19],\\n        [-72,  62],\\n        [ 68,   1],\\n        [  7,  18],\\n        [-24, -37],\\n        [ 34, -66],\\n        [ -2,  18],\\n        [-23,  70],\\n        [-49,  34],\\n        [ 18,  63],\\n        [ 12, -60],\\n        [ 42,  34],\\n        [-85,  93],\\n        [ 60,  29],\\n        [-54,  61],\\n        [  9,  55],\\n        [-67,  26],\\n        [-23, -92],\\n        [-53, -73],\\n        [-36, -99],\\n        [  4, -32]]))",
    0.00069
  ],
  "test_vertical_matrix": [
    "failed",
    "assert 0 == 193",
    0.00789
  ]
}