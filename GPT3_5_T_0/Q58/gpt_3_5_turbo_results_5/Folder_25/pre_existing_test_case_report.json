{
  "parameter(s)": [
    66
  ],
  "test_matrix_of_having_66_integers": [
    "failed",
    "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[ -80,  -35],\\n        [ -63,   67],\\n        [ -28,  -62],\\n        [ -88,   74],\\n        [  97,  -66],\\n        [ -59,   44],\\n        [  39,  -37],\\n        [  59,  -52],\\n        [  35,  -97],\\n        [ -81,   17],\\n        [  46,    1],\\n        [ -97,  -50],\\n        [ -34,   -5],\\n        [  71,   63],\\n        [  27,   28],\\n        [  94,  -92],\\n        [ -55,   36],\\n        [ -64,   86],\\n        [  44,   84],\\n        [ -88,  -40],\\n        [  52,  -11],\\n        [  64,  -98],\\n        [  -1,  -84],\\n        [  51,  100],\\n        [   8,   33],\\n        [  80,  -18],\\n        [  28,   94],\\n        [  76,   67],\\n        [-100,    9],\\n        [  59,  -73],\\n        [   6,    6],\\n        [ -64,   -7],\\n        [  65,   86]]))",
    0.00079
  ],
  "test_horizontal_matrix": [
    "failed",
    "assert 0 == 133",
    0.00046
  ],
  "test_matrix_of_one_integer": [
    "failed",
    "assert not 1\n +  where 1 = submatrix_with_n_numbers(matrix([[66]]))",
    0.00033
  ]
}