{
  "parameter(s)": [
    159
  ],
  "test_matrix_of_one_integer": [
    "passed",
    "",
    0.00018
  ],
  "test_horizontal_matrix": [
    "failed",
    "assert 0 == 319",
    0.00052
  ],
  "test_matrix_of_having_159_integers": [
    "failed",
    "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[  82,  -55,   13,   46,  -61,  -47,  -51,  -26,   28,   39,\\n          -75,  -24,   83,  -59,   17,   46,  -76,   54,  -15,  -22,\\n           74,   26,  -97,   15,  -78,  -46,   95,   11,  -69,  -46,\\n          -51,   50,  -42,   75,  -50,   94,  -72,  -35,   31,   10,\\n           36,   62,   21,  -87,   -1,   -5,    9,   69,    0,  -63,\\n           67,   -3,   38,  -24,  -41,   28,   65,   32,   46,   72,\\n            5,  -29,   92,  -62,  -90,   10,  -92,   66,   42,  -31,\\n          -19,   11,  -54,   -6,   81,   41,  -33,   82,  -54,  -14,\\n           70,  -56,  -30,  -32,   51,  -46,   -5,  -77,   -3,  -31,\\n           43,  -31,   52,   38,   90,   33,   61,  -54,   66,  -97,\\n           38,   97,   52,   81,  -76,  -25,   27,  -29,   -1,  -86,\\n          -61,  -70,   67,   18,   90,   91,  -10,   -1,   19,   73,\\n            7,    9,   -6,   28,   68,   29,   39,  -30,  -97,  -18,\\n           67,  -45,  -20,   83, -100,   -5,  -87,   30,  -38,   79,\\n          -13,   61,  -42,   80,   63,   81,  -70,  -72,   -8,    0,\\n           71,   31,   96,   30,  -77,  -99,  -18,   48,  -67]]))",
    0.00091
  ],
  "test_vertical_matrix": [
    "failed",
    "assert 0 == 319",
    0.00788
  ]
}