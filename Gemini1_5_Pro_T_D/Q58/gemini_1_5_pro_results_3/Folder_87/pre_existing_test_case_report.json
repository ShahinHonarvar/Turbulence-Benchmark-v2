{
  "parameter(s)": [
    96
  ],
  "test_matrix_of_one_integer": [
    "passed",
    "",
    0.00022
  ],
  "test_horizontal_matrix": [
    "failed",
    "assert 0 == 193",
    0.00045
  ],
  "test_matrix_of_having_96_integers": [
    "failed",
    "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[ 15, -50],\\n        [ 87, -34],\\n        [ 50, -94],\\n        [-43,  21],\\n        [ 54, -96],\\n        [ 65, -64],\\n        [ 22,   6],\\n        [-60, -44],\\n        [ 80,  87],\\n        [-74, -62],\\n        [-55,  70],\\n        [-63,  -2],\\n        [ 45, -27],\\n        [-33, -40],\\n        [ 12,  -5],\\n        [ 51,   7],\\n        [ 58, -28],\\n        [-32,  63],\\n        [-20,  49],\\n        [ 45, -18],\\n        [ 13,  22],\\n        [-59, -42],\\n        [ -9, -19],\\n        [-37, -66],\\n        [ 21, -76],\\n        [ 15, -90],\\n        [ -9,   5],\\n        [  7, -77],\\n        [-25,  10],\\n        [ 31,  23],\\n        [-13, -53],\\n        [ 73, -94],\\n        [ 23, -21],\\n        [-31, -33],\\n        [-57, -98],\\n        [ 10,  60],\\n        [ 21,  44],\\n        [-91, -16],\\n        [ 67,  81],\\n        [-11,   3],\\n        [ 80,  48],\\n        [ 53,  -5],\\n        [-29,  70],\\n        [-93,  -2],\\n        [-91,  87],\\n        [-98,   0],\\n        [-86, -88],\\n        [-35, -35]]))",
    0.00092
  ],
  "test_vertical_matrix": [
    "failed",
    "assert 0 == 193",
    0.00103
  ]
}