{
  "parameter(s)": [
    159
  ],
  "test_matrix_of_one_integer": [
    "passed",
    "",
    0.00018
  ],
  "test_horizontal_matrix": [
    "failed",
    "assert 0 == 319",
    0.00041
  ],
  "test_matrix_of_having_159_integers": [
    "failed",
    "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[   9,  -98,   -3,   23,   22,   77,  -27,  -16,   39,  -23,\\n           15,   31,   71,  -15,  -94,  -41,  -38,  -94,   80,   98,\\n           78,    1,  -40,  -13,   16,   -1,  -47,  -21,   73,   79,\\n          -81,   62,   33,   54,   88,   26,   61,  -44,  -19,   10,\\n           94,   39,  -56,   -3,   31,  -65,   92,  -30,  -45,   53,\\n          -30,   -5,   28,   19,  -39,   42,   52,   42,  -10,  -99,\\n           90,  -85,  -58,   93,   13,    0,  -47,  -78,  -76,  -39,\\n          -41,   47,  -50,   20,  -11,   45,   -9,   93,   76,   69,\\n          -33,   55,  -58,   83,  -38,   70,   50,   -9,   56,  -12,\\n           43,    3,   74,    2,  -53,  -25,   14,    4,  -17,   84,\\n            3,  -69,   19,  -53,  -11,    2,    5,  -42,  -13,  -37,\\n           81,  -75,  -52,   -4,   16,   30,  -49,  -49,   89,  -15,\\n           60,   90,  -57,  -10, -100,  -94,  -21,   80,  -48,  -86,\\n          -71,   88,  -15,   29,   93,  -35,  -16,   -9,  -29,   90,\\n          -77,   33,   79,   16,  -97,  -87,   26,   65,   57,   80,\\n           46,  -58,  -74,   -1,   34,   18,  -13,  -85,  -78]]))",
    0.00082
  ],
  "test_vertical_matrix": [
    "failed",
    "assert 0 == 319",
    0.00562
  ]
}