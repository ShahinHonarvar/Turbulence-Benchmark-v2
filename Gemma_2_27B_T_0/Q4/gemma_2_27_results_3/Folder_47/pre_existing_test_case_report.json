{
  "parameter(s)": [
    64,
    80
  ],
  "test_zero_range": [
    "passed",
    "",
    9e-05
  ],
  "test_range_size": [
    "passed",
    "",
    6e-05
  ],
  "test_range_sum": [
    "passed",
    "",
    6e-05
  ],
  "test_large_range": [
    "failed",
    "assert [65, 66, 67, 68, 69, 70, ...] == [66, 67, 68, 69, 70, 71, ...]\n  At index 0 diff: 65 != 66\n  Left contains one more item: 80\n  Full diff:\n  - [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80]\n  + [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80]\n  ?  ++++",
    0.00073
  ],
  "test_even_range": [
    "failed",
    "assert [130, 132, 13...138, 140, ...] == [132, 134, 13...140, 142, ...]\n  At index 0 diff: 130 != 132\n  Left contains one more item: 160\n  Full diff:\n  - [132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160]\n  + [130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160]\n  ?  +++++",
    0.00081
  ],
  "test_ones_range_sum": [
    "failed",
    "assert 16 == ((80 - 64) - 1)\n +  where 16 = sum([1, 1, 1, 1, 1, 1, ...])\n +    where [1, 1, 1, 1, 1, 1, ...] = all_pos_ints_exclusive([1, 1, 1, 1, 1, 1, ...])",
    0.00017
  ]
}