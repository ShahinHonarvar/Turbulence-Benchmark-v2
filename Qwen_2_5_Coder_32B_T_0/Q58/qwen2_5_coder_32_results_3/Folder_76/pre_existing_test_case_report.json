{
  "parameter(s)": [
    159
  ],
  "test_matrix_of_one_integer": [
    "passed",
    "",
    0.00013
  ],
  "test_vertical_matrix": [
    "passed",
    "",
    0.0022
  ],
  "test_matrix_of_having_159_integers": [
    "failed",
    "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[  64,   64,  -32,   77,   51,   88,  -14,   16,   -8,  -65,\\n           96,   13,  -82,  -19,   54,   30,  -86,    9,  -10,   42,\\n           30,  -61,   37,   61,  -48,  -39,  -43,    3,   69,   69,\\n           99, -100,  100,    6,  -64,  -73,  -66,  -42,   62,  -32,\\n          -75,    2,  -73,    5,  -77,  -82,   19,  -40,   70,  -49,\\n            4,  -69,   90,  -78,  -13,  -93,   53,   10,  -44,   14,\\n          -27,   35,   17,   64,  -97,  -69,  -32,   33,   54,  -57,\\n           98,  -97,  -30,   90,   42,  -33,   -6,  -60,   -8,   57,\\n           71,  -73,   75,  100,   11,   71,   87,   -9,  -58,  -87,\\n           93,   -5,   15,   86,  -53,  -20,   31,   15,  -95,   -9,\\n          -91,  -51,  -81,   90,  -77,    9,  -23,   45,  -31,  -14,\\n          -82,   86,   56,    9,  -49,   30,  -81,   -2,  -82,  100,\\n          -95,   23,  -20,  -32,   88,    6,   29,   79,  -61,   35,\\n           65,   63,  -32,   87,  -65,   36,   98,   70,  -60,   83,\\n           60,   46,   61,    3,  -34,  -55,   36,   29,   90,   50,\\n          -92,   43,  -10,   -7,  -45,   66,   -6,  -54,   -6]]))",
    0.00307
  ],
  "test_horizontal_matrix": [
    "failed",
    "assert 0 == 319",
    0.02147
  ]
}