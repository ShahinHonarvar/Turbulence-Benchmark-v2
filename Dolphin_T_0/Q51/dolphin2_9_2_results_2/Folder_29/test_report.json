{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests51_29_2.py::test_list_of_many_strings_with_different_lengths", "location": ["tests51_29_2.py", 26, "test_list_of_many_strings_with_different_lengths"], "keywords": {"test_list_of_many_strings_with_different_lengths": 1, "tests51_29_2.py": 1, "Folder_29": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001417489256709814, "start": 1731079053.2412467, "stop": 1731079053.2413895, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "59ccd97eaf144540947ecc649f9ed3e7", "node": "<WorkerController gw2>"}
{"nodeid": "tests51_29_2.py::test_list_of_two_strings_of_same_lengths", "location": ["tests51_29_2.py", 16, "test_list_of_two_strings_of_same_lengths"], "keywords": {"test_list_of_two_strings_of_same_lengths": 1, "tests51_29_2.py": 1, "Folder_29": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001712261000648141, "start": 1731079053.2413695, "stop": 1731079053.2415416, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "59ccd97eaf144540947ecc649f9ed3e7", "node": "<WorkerController gw1>"}
{"nodeid": "tests51_29_2.py::test_list_of_strings_of_length_two", "location": ["tests51_29_2.py", 6, "test_list_of_strings_of_length_two"], "keywords": {"test_list_of_strings_of_length_two": 1, "tests51_29_2.py": 1, "Folder_29": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00020965002477169037, "start": 1731079053.2414768, "stop": 1731079053.2416873, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "59ccd97eaf144540947ecc649f9ed3e7", "node": "<WorkerController gw0>"}
{"nodeid": "tests51_29_2.py::test_list_of_strings_of_length_two", "location": ["tests51_29_2.py", 6, "test_list_of_strings_of_length_two"], "keywords": {"test_list_of_strings_of_length_two": 1, "tests51_29_2.py": 1, "Folder_29": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.00016599299851804972, "start": 1731079053.2420177, "stop": 1731079053.2421844, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "59ccd97eaf144540947ecc649f9ed3e7", "node": "<WorkerController gw0>"}
{"nodeid": "tests51_29_2.py::test_list_of_strings_of_length_two", "location": ["tests51_29_2.py", 6, "test_list_of_strings_of_length_two"], "keywords": {"test_list_of_strings_of_length_two": 1, "tests51_29_2.py": 1, "Folder_29": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0001303709577769041, "start": 1731079053.242585, "stop": 1731079053.2427158, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "59ccd97eaf144540947ecc649f9ed3e7", "node": "<WorkerController gw0>"}
{"nodeid": "tests51_29_2.py::test_list_of_two_strings_of_different_lengths", "location": ["tests51_29_2.py", 11, "test_list_of_two_strings_of_different_lengths"], "keywords": {"test_list_of_two_strings_of_different_lengths": 1, "tests51_29_2.py": 1, "Folder_29": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00014113204088062048, "start": 1731079053.2437212, "stop": 1731079053.243863, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "59ccd97eaf144540947ecc649f9ed3e7", "node": "<WorkerController gw0>"}
{"nodeid": "tests51_29_2.py::test_list_of_many_strings_with_different_lengths", "location": ["tests51_29_2.py", 26, "test_list_of_many_strings_with_different_lengths"], "keywords": {"test_list_of_many_strings_with_different_lengths": 1, "tests51_29_2.py": 1, "Folder_29": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/collections/__init__.py", "lineno": 699, "message": "TypeError: 'int' object is not iterable"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_many_strings_with_different_lengths():", "        l = ['a' * i for i in range(3, 101)]", ">       assert if_contains_anagrams(l)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q51/dolphin2_9_2_results_2/Folder_29/tests51_29_2.py", "lineno": 29, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    anagrams[sorted_word].update(lst.count(word))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q51/dolphin2_9_2_results_2/Folder_29/generated_answer.py", "lineno": 10, "message": "in if_contains_anagrams"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def update(self, iterable=None, /, **kwds):", "        '''Like dict.update() but add counts instead of replacing them.", "    ", "        Source can be an iterable, a dictionary, or another Counter instance.", "    ", "        >>> c = Counter('which')", "        >>> c.update('witch')           # add elements from another iterable", "        >>> d = Counter('watch')", "        >>> c.update(d)                 # add elements from another counter", "        >>> c['h']                      # four 'h' in which, witch, and watch", "        4", "    ", "        '''", "        # The regular dict.update() operation makes no sense here because the", "        # replace behavior results in some of the original untouched counts", "        # being mixed-in with all of the other counts for a mismash that", "        # doesn't have a straight-forward interpretation in most counting", "        # contexts.  Instead, we implement straight-addition.  Both the inputs", "        # and outputs are allowed to contain zero and negative counts.", "    ", "        if iterable is not None:", "            if isinstance(iterable, _collections_abc.Mapping):", "                if self:", "                    self_get = self.get", "                    for elem, count in iterable.items():", "                        self[elem] = count + self_get(elem, 0)", "                else:", "                    # fast path when counter is empty", "                    super().update(iterable)", "            else:", ">               _count_elements(self, iterable)", "E               TypeError: 'int' object is not iterable"], "reprfuncargs": {"args": [["self", "Counter()"], ["iterable", "1"], ["kwds", "{}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/collections/__init__.py", "lineno": 699, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_many_strings_with_different_lengths():", "        l = ['a' * i for i in range(3, 101)]", ">       assert if_contains_anagrams(l)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q51/dolphin2_9_2_results_2/Folder_29/tests51_29_2.py", "lineno": 29, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    anagrams[sorted_word].update(lst.count(word))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q51/dolphin2_9_2_results_2/Folder_29/generated_answer.py", "lineno": 10, "message": "in if_contains_anagrams"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def update(self, iterable=None, /, **kwds):", "        '''Like dict.update() but add counts instead of replacing them.", "    ", "        Source can be an iterable, a dictionary, or another Counter instance.", "    ", "        >>> c = Counter('which')", "        >>> c.update('witch')           # add elements from another iterable", "        >>> d = Counter('watch')", "        >>> c.update(d)                 # add elements from another counter", "        >>> c['h']                      # four 'h' in which, witch, and watch", "        4", "    ", "        '''", "        # The regular dict.update() operation makes no sense here because the", "        # replace behavior results in some of the original untouched counts", "        # being mixed-in with all of the other counts for a mismash that", "        # doesn't have a straight-forward interpretation in most counting", "        # contexts.  Instead, we implement straight-addition.  Both the inputs", "        # and outputs are allowed to contain zero and negative counts.", "    ", "        if iterable is not None:", "            if isinstance(iterable, _collections_abc.Mapping):", "                if self:", "                    self_get = self.get", "                    for elem, count in iterable.items():", "                        self[elem] = count + self_get(elem, 0)", "                else:", "                    # fast path when counter is empty", "                    super().update(iterable)", "            else:", ">               _count_elements(self, iterable)", "E               TypeError: 'int' object is not iterable"], "reprfuncargs": {"args": [["self", "Counter()"], ["iterable", "1"], ["kwds", "{}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/collections/__init__.py", "lineno": 699, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/collections/__init__.py", "lineno": 699, "message": "TypeError: 'int' object is not iterable"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00020524999126791954, "start": 1731079053.2416327, "stop": 1731079053.2418387, "extras": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "59ccd97eaf144540947ecc649f9ed3e7", "node": "<WorkerController gw2>"}
{"nodeid": "tests51_29_2.py::test_list_of_many_strings_with_different_lengths", "location": ["tests51_29_2.py", 26, "test_list_of_many_strings_with_different_lengths"], "keywords": {"test_list_of_many_strings_with_different_lengths": 1, "tests51_29_2.py": 1, "Folder_29": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00011578097473829985, "start": 1731079053.2607782, "stop": 1731079053.260898, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "59ccd97eaf144540947ecc649f9ed3e7", "node": "<WorkerController gw2>"}
{"nodeid": "tests51_29_2.py::test_list_of_two_strings_of_same_lengths", "location": ["tests51_29_2.py", 16, "test_list_of_two_strings_of_same_lengths"], "keywords": {"test_list_of_two_strings_of_same_lengths": 1, "tests51_29_2.py": 1, "Folder_29": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/collections/__init__.py", "lineno": 699, "message": "TypeError: 'int' object is not iterable"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_two_strings_of_same_lengths():", "        l = ['aaaa', 'aaaa']", ">       assert if_contains_anagrams(l)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q51/dolphin2_9_2_results_2/Folder_29/tests51_29_2.py", "lineno": 19, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    anagrams[sorted_word].update(lst.count(word))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q51/dolphin2_9_2_results_2/Folder_29/generated_answer.py", "lineno": 10, "message": "in if_contains_anagrams"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def update(self, iterable=None, /, **kwds):", "        '''Like dict.update() but add counts instead of replacing them.", "    ", "        Source can be an iterable, a dictionary, or another Counter instance.", "    ", "        >>> c = Counter('which')", "        >>> c.update('witch')           # add elements from another iterable", "        >>> d = Counter('watch')", "        >>> c.update(d)                 # add elements from another counter", "        >>> c['h']                      # four 'h' in which, witch, and watch", "        4", "    ", "        '''", "        # The regular dict.update() operation makes no sense here because the", "        # replace behavior results in some of the original untouched counts", "        # being mixed-in with all of the other counts for a mismash that", "        # doesn't have a straight-forward interpretation in most counting", "        # contexts.  Instead, we implement straight-addition.  Both the inputs", "        # and outputs are allowed to contain zero and negative counts.", "    ", "        if iterable is not None:", "            if isinstance(iterable, _collections_abc.Mapping):", "                if self:", "                    self_get = self.get", "                    for elem, count in iterable.items():", "                        self[elem] = count + self_get(elem, 0)", "                else:", "                    # fast path when counter is empty", "                    super().update(iterable)", "            else:", ">               _count_elements(self, iterable)", "E               TypeError: 'int' object is not iterable"], "reprfuncargs": {"args": [["self", "Counter()"], ["iterable", "2"], ["kwds", "{}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/collections/__init__.py", "lineno": 699, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_two_strings_of_same_lengths():", "        l = ['aaaa', 'aaaa']", ">       assert if_contains_anagrams(l)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q51/dolphin2_9_2_results_2/Folder_29/tests51_29_2.py", "lineno": 19, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    anagrams[sorted_word].update(lst.count(word))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q51/dolphin2_9_2_results_2/Folder_29/generated_answer.py", "lineno": 10, "message": "in if_contains_anagrams"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def update(self, iterable=None, /, **kwds):", "        '''Like dict.update() but add counts instead of replacing them.", "    ", "        Source can be an iterable, a dictionary, or another Counter instance.", "    ", "        >>> c = Counter('which')", "        >>> c.update('witch')           # add elements from another iterable", "        >>> d = Counter('watch')", "        >>> c.update(d)                 # add elements from another counter", "        >>> c['h']                      # four 'h' in which, witch, and watch", "        4", "    ", "        '''", "        # The regular dict.update() operation makes no sense here because the", "        # replace behavior results in some of the original untouched counts", "        # being mixed-in with all of the other counts for a mismash that", "        # doesn't have a straight-forward interpretation in most counting", "        # contexts.  Instead, we implement straight-addition.  Both the inputs", "        # and outputs are allowed to contain zero and negative counts.", "    ", "        if iterable is not None:", "            if isinstance(iterable, _collections_abc.Mapping):", "                if self:", "                    self_get = self.get", "                    for elem, count in iterable.items():", "                        self[elem] = count + self_get(elem, 0)", "                else:", "                    # fast path when counter is empty", "                    super().update(iterable)", "            else:", ">               _count_elements(self, iterable)", "E               TypeError: 'int' object is not iterable"], "reprfuncargs": {"args": [["self", "Counter()"], ["iterable", "2"], ["kwds", "{}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/collections/__init__.py", "lineno": 699, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/collections/__init__.py", "lineno": 699, "message": "TypeError: 'int' object is not iterable"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00030557194259017706, "start": 1731079053.2418501, "stop": 1731079053.2421567, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "59ccd97eaf144540947ecc649f9ed3e7", "node": "<WorkerController gw1>"}
{"nodeid": "tests51_29_2.py::test_list_of_two_strings_of_same_lengths", "location": ["tests51_29_2.py", 16, "test_list_of_two_strings_of_same_lengths"], "keywords": {"test_list_of_two_strings_of_same_lengths": 1, "tests51_29_2.py": 1, "Folder_29": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0001820720499381423, "start": 1731079053.2625172, "stop": 1731079053.2626998, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "59ccd97eaf144540947ecc649f9ed3e7", "node": "<WorkerController gw1>"}
{"nodeid": "tests51_29_2.py::test_list_of_two_strings_of_different_lengths", "location": ["tests51_29_2.py", 11, "test_list_of_two_strings_of_different_lengths"], "keywords": {"test_list_of_two_strings_of_different_lengths": 1, "tests51_29_2.py": 1, "Folder_29": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/collections/__init__.py", "lineno": 699, "message": "TypeError: 'int' object is not iterable"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_two_strings_of_different_lengths():", "        l = ['aaa', 'aaaa']", ">       assert if_contains_anagrams(l)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q51/dolphin2_9_2_results_2/Folder_29/tests51_29_2.py", "lineno": 14, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    anagrams[sorted_word].update(lst.count(word))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q51/dolphin2_9_2_results_2/Folder_29/generated_answer.py", "lineno": 10, "message": "in if_contains_anagrams"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def update(self, iterable=None, /, **kwds):", "        '''Like dict.update() but add counts instead of replacing them.", "    ", "        Source can be an iterable, a dictionary, or another Counter instance.", "    ", "        >>> c = Counter('which')", "        >>> c.update('witch')           # add elements from another iterable", "        >>> d = Counter('watch')", "        >>> c.update(d)                 # add elements from another counter", "        >>> c['h']                      # four 'h' in which, witch, and watch", "        4", "    ", "        '''", "        # The regular dict.update() operation makes no sense here because the", "        # replace behavior results in some of the original untouched counts", "        # being mixed-in with all of the other counts for a mismash that", "        # doesn't have a straight-forward interpretation in most counting", "        # contexts.  Instead, we implement straight-addition.  Both the inputs", "        # and outputs are allowed to contain zero and negative counts.", "    ", "        if iterable is not None:", "            if isinstance(iterable, _collections_abc.Mapping):", "                if self:", "                    self_get = self.get", "                    for elem, count in iterable.items():", "                        self[elem] = count + self_get(elem, 0)", "                else:", "                    # fast path when counter is empty", "                    super().update(iterable)", "            else:", ">               _count_elements(self, iterable)", "E               TypeError: 'int' object is not iterable"], "reprfuncargs": {"args": [["self", "Counter()"], ["iterable", "1"], ["kwds", "{}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/collections/__init__.py", "lineno": 699, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_two_strings_of_different_lengths():", "        l = ['aaa', 'aaaa']", ">       assert if_contains_anagrams(l)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q51/dolphin2_9_2_results_2/Folder_29/tests51_29_2.py", "lineno": 14, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    anagrams[sorted_word].update(lst.count(word))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q51/dolphin2_9_2_results_2/Folder_29/generated_answer.py", "lineno": 10, "message": "in if_contains_anagrams"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def update(self, iterable=None, /, **kwds):", "        '''Like dict.update() but add counts instead of replacing them.", "    ", "        Source can be an iterable, a dictionary, or another Counter instance.", "    ", "        >>> c = Counter('which')", "        >>> c.update('witch')           # add elements from another iterable", "        >>> d = Counter('watch')", "        >>> c.update(d)                 # add elements from another counter", "        >>> c['h']                      # four 'h' in which, witch, and watch", "        4", "    ", "        '''", "        # The regular dict.update() operation makes no sense here because the", "        # replace behavior results in some of the original untouched counts", "        # being mixed-in with all of the other counts for a mismash that", "        # doesn't have a straight-forward interpretation in most counting", "        # contexts.  Instead, we implement straight-addition.  Both the inputs", "        # and outputs are allowed to contain zero and negative counts.", "    ", "        if iterable is not None:", "            if isinstance(iterable, _collections_abc.Mapping):", "                if self:", "                    self_get = self.get", "                    for elem, count in iterable.items():", "                        self[elem] = count + self_get(elem, 0)", "                else:", "                    # fast path when counter is empty", "                    super().update(iterable)", "            else:", ">               _count_elements(self, iterable)", "E               TypeError: 'int' object is not iterable"], "reprfuncargs": {"args": [["self", "Counter()"], ["iterable", "1"], ["kwds", "{}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/collections/__init__.py", "lineno": 699, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/collections/__init__.py", "lineno": 699, "message": "TypeError: 'int' object is not iterable"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00021228601690381765, "start": 1731079053.2439969, "stop": 1731079053.24421, "extras": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "59ccd97eaf144540947ecc649f9ed3e7", "node": "<WorkerController gw0>"}
{"nodeid": "tests51_29_2.py::test_list_of_two_strings_of_different_lengths", "location": ["tests51_29_2.py", 11, "test_list_of_two_strings_of_different_lengths"], "keywords": {"test_list_of_two_strings_of_different_lengths": 1, "tests51_29_2.py": 1, "Folder_29": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00010262196883559227, "start": 1731079053.2682464, "stop": 1731079053.2683494, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "59ccd97eaf144540947ecc649f9ed3e7", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
