{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1277, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1277, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1277, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1277, "_consider_importhook"]}
{"pytest_version": "8.3.3", "$report_type": "SessionStart"}
{"nodeid": "tests52_16_2.py::test_string_of_many_chars", "location": ["tests52_16_2.py", 6, "test_string_of_many_chars"], "keywords": {"test_string_of_many_chars": 1, "tests52_16_2.py": 1, "Folder_16": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 8.380599683732726e-05, "start": 1738560961.2294497, "stop": 1738560961.229534, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "c3e2c83942a747a6b5c184a13f80b44d", "node": "<WorkerController gw0>"}
{"nodeid": "tests52_16_2.py::test_string_of_many_chars", "location": ["tests52_16_2.py", 6, "test_string_of_many_chars"], "keywords": {"test_string_of_many_chars": 1, "tests52_16_2.py": 1, "Folder_16": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 8.386900299228728e-05, "start": 1738560961.229652, "stop": 1738560961.229736, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "c3e2c83942a747a6b5c184a13f80b44d", "node": "<WorkerController gw0>"}
{"nodeid": "tests52_16_2.py::test_string_of_many_chars", "location": ["tests52_16_2.py", 6, "test_string_of_many_chars"], "keywords": {"test_string_of_many_chars": 1, "tests52_16_2.py": 1, "Folder_16": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 5.700000110664405e-05, "start": 1738560961.2299514, "stop": 1738560961.2300088, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "c3e2c83942a747a6b5c184a13f80b44d", "node": "<WorkerController gw0>"}
{"nodeid": "tests52_16_2.py::test_string_of_spaces", "location": ["tests52_16_2.py", 11, "test_string_of_spaces"], "keywords": {"test_string_of_spaces": 1, "tests52_16_2.py": 1, "Folder_16": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 5.574999886448495e-05, "start": 1738560961.230294, "stop": 1738560961.23035, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "c3e2c83942a747a6b5c184a13f80b44d", "node": "<WorkerController gw0>"}
{"nodeid": "tests52_16_2.py::test_string_of_spaces", "location": ["tests52_16_2.py", 11, "test_string_of_spaces"], "keywords": {"test_string_of_spaces": 1, "tests52_16_2.py": 1, "Folder_16": 1, "": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Dolphin_T_0/Q52/dolphin2_9_2_results_2/Folder_16/tests52_16_2.py", "lineno": 14, "message": "AssertionError: assert not {'                                                                                                                                                                                                                                                               ', '                                                                                                                                                                                                                                                                ', '                                                                                                                                                                                                                                                                 ', '                                                                                                                                                                                                                                                                  ', '                                                                                                                                                                                                                                                                   ', '                                                                                                                                                                                                                                                                    ', ...}\n +  where {} = palindrome_of_length_n}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces():", "        s = ' ' * (255 * 2)", ">       assert not palindrome_of_length_n(s)", "E       AssertionError: assert not {}", "E        +  where {'                                                                                                                                                                                                                                                               ', '                                                                                                                                                                                                                                                                ', '                                                                                                                                                                                                                                                                 ', '                                                                                                                                                                                                                                                                  ', '                                                                                                                                                                                                                                                                   ', '                                                                                                                                                                                                                                                                    ', ...} = palindrome_of_length_nreprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q52/dolphin2_9_2_results_2/Folder_16/tests52_16_2.py", "lineno": 14, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces():", "        s = ' ' * (255 * 2)", ">       assert not palindrome_of_length_n(s)", "E       AssertionError: assert not {}", "E        +  where {} = palindrome_of_length_nreprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q52/dolphin2_9_2_results_2/Folder_16/tests52_16_2.py", "lineno": 14, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Dolphin_T_0/Q52/dolphin2_9_2_results_2/Folder_16/tests52_16_2.py", "lineno": 14, "message": "AssertionError: assert not {}\n +  where {} = palindrome_of_length_n}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.010494661000848282, "start": 1738560961.2304132, "stop": 1738560961.2409089, "extras": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "c3e2c83942a747a6b5c184a13f80b44d", "node": "<WorkerController gw0>"}
{"nodeid": "tests52_16_2.py::test_string_of_spaces", "location": ["tests52_16_2.py", 11, "test_string_of_spaces"], "keywords": {"test_string_of_spaces": 1, "tests52_16_2.py": 1, "Folder_16": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.000106616997072706, "start": 1738560961.2493248, "stop": 1738560961.2494318, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "c3e2c83942a747a6b5c184a13f80b44d", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
