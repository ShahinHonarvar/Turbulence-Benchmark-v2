ChatCompletion(id='gen-1730613518-7RV1HQ3kbbH4XealAD0N', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content="```python\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix):\n    above = np.cumsum(matrix, axis=0)\n    left = np.cumsum(matrix.T, axis=0)\n    res = set()\n    for size in range(1, min(matrix.shape)+1):\n        for r1 in range(matrix.shape[0]-size+1):\n            for c1 in range(matrix.shape[1]-size+1):\n                r2, c2 = r1+size, c1+size\n                total = above[r2-1, c2-1] - (left[r2-1, c1-1] if c1-1>=0 else 0) - (above[r1-1, c2-1] if r1-1>=0 else 0)\n                if r1>0:\n                    total += above[r1-1, c2-1]\n                if c1>0:\n                    total += left[r2-1, c1-1]\n                if total == 99:\n                    res.add((r1, c1, r2, c2))\n    return [list(i) for i in res]\n```\nThis function works by using the numpy's cumsum function to get all the possible cumulative sums of the submatrices of the given size, then it subtracts the unnecessary parts and checks if the total is equal to the given sum, and if it is, it adds the submatrix to the result list.\n\nIt should work for any 2D numpy array and should work relatively quickly for any matrix of size up to about 1000x1000, after that it will start to get slower.", refusal='', role='assistant', function_call=None, tool_calls=None))], created=1730613518, model='cognitivecomputations/dolphin-mixtral-8x22b', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=0, prompt_tokens=0, total_tokens=0), provider='Novita')