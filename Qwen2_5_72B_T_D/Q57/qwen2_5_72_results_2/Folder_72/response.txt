ChatCompletion(id='chatcmpl-d17639af85444e21bfb2a384dd7137db', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix):\n    def find_submatrices(i, j, rows, cols, target, current_sum, current_submatrix, result):\n        if current_sum == target:\n            result.append(np.array(current_submatrix))\n            return\n        if i >= rows or j >= cols or current_sum > target:\n            return\n        \n        for di, dj in [(0, 1), (1, 0), (1, 1), (0, -1), (-1, 0), (-1, -1)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < rows and 0 <= nj < cols:\n                new_submatrix = current_submatrix + [(ni, nj)]\n                find_submatrices(ni, nj, rows, cols, target, current_sum + matrix[ni, nj], new_submatrix, result)\n    \n    rows, cols = matrix.shape\n    result = []\n    for i in range(rows):\n        for j in range(cols):\n            find_submatrices(i, j, rows, cols, 41, matrix[i, j], [(i, j)], result)\n    \n    unique_submatrices = []\n    for indices in result:\n        submatrix = matrix[np.array([x[0] for x in indices]), np.array([x[1] for x in indices])]\n        if not any(np.array_equal(submatrix, sm) for sm in unique_submatrices):\n            unique_submatrices.append(submatrix)\n    \n    return unique_submatrices\n```', refusal=None, role='assistant', function_call=None, tool_calls=None, name=None))], created=1730664346, model='Qwen/Qwen2.5-72B-Instruct', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=333, prompt_tokens=137, total_tokens=470, estimated_cost=0.00018114999999999999))