ChatCompletion(id='chatcmpl-338d119a386740cf9f9392671d73d1f6', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix):\n    def find_submatrices(i, j, rows, cols, target, current, result):\n        if i >= rows or j >= cols:\n            return\n        if target == matrix[i, j]:\n            result.append(current + [(i, j)])\n            return\n        if target < 0:\n            return\n        find_submatrices(i + 1, j, rows, cols, target - matrix[i, j], current + [(i, j)], result)\n        find_submatrices(i, j + 1, rows, cols, target - matrix[i, j], current + [(i, j)], result)\n        find_submatrices(i + 1, j, rows, cols, target, current, result)\n        find_submatrices(i, j + 1, rows, cols, target, current, result)\n\n    rows, cols = matrix.shape\n    result = []\n    for i in range(rows):\n        for j in range(cols):\n            find_submatrices(i, j, rows, cols, 616, [], result)\n    \n    submatrices = []\n    for indices in result:\n        r1, c1 = zip(*indices)\n        r1, c1 = min(r1), min(c1)\n        r2, c2 = max(indices[0][0], indices[-1][0]), max(indices[0][1], indices[-1][1])\n        submatrices.append(matrix[r1:r2+1, c1:c2+1])\n    return submatrices\n```', refusal=None, role='assistant', function_call=None, tool_calls=None, name=None))], created=1730664544, model='Qwen/Qwen2.5-72B-Instruct', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=336, prompt_tokens=138, total_tokens=474, estimated_cost=0.00018270000000000002))