ChatCompletion(id='chatcmpl-79dcddfb5deb4c81976b141515f0d79a', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='```python\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix):\n    def find_submatrices_with_sum(mat, target_sum, current_sum, row, col, submatrix, result):\n        rows, cols = mat.shape\n        if row >= rows or col >= cols:\n            return\n        current_sum += mat[row, col]\n        if current_sum == target_sum:\n            result.append(submatrix + [(row, col)])\n        if current_sum < target_sum:\n            find_submatrices_with_sum(mat, target_sum, current_sum, row + 1, col, submatrix + [(row, col)], result)\n            find_submatrices_with_sum(mat, target_sum, current_sum, row, col + 1, submatrix + [(row, col)], result)\n    \n    def extract_submatrix coordinates, matrix):\n        min_row = min(coordinates, key=lambda x: x[0])[0]\n        max_row = max(coordinates, key=lambda x: x[0])[0]\n        min_col = min(coordinates, key=lambda x: x[1])[1]\n        max_col = max(coordinates, key=lambda x: x[1])[1]\n        return matrix[min_row:max_row+1, min_col:max_col+1]\n\n    rows, cols = matrix.shape\n    result = []\n    for row in range(rows):\n        for col in range(cols):\n            find_submatrices_with_sum(matrix, 616, 0, row, col, [], result)\n    \n    submatrices = [extract_submatrix(res, matrix) for res in result]\n    return submatrices\n```', refusal=None, role='assistant', function_call=None, tool_calls=None, name=None))], created=1730665087, model='Qwen/Qwen2.5-72B-Instruct', object='chat.completion', service_tier=None, system_fingerprint=None, usage=CompletionUsage(completion_tokens=334, prompt_tokens=138, total_tokens=472, estimated_cost=0.00018189999999999998))