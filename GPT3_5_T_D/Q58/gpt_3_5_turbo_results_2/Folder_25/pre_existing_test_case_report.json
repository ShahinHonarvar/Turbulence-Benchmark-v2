{
  "parameter(s)": [
    66
  ],
  "test_matrix_of_having_66_integers": [
    "failed",
    "assert 2 == 1\n +  where 2 = submatrix_with_n_numbers(matrix([[-28,  74],\\n        [-13, -33],\\n        [-97, -18],\\n        [  8,   2],\\n        [-22,  95],\\n        [ 40,  88],\\n        [ 66, -54],\\n        [ 49,  55],\\n        [-10, -37],\\n        [ 21, -84],\\n        [ 66,  80],\\n        [-64, -14],\\n        [-37, -63],\\n        [ 43,  99],\\n        [ 82, -14],\\n        [ 54, -50],\\n        [ 11, -86],\\n        [-63, -52],\\n        [-95,  80],\\n        [ 19, -55],\\n        [ 80,  81],\\n        [-51,  85],\\n        [-55, -92],\\n        [-55,  51],\\n        [-18, -32],\\n        [ 36,  88],\\n        [-51, -84],\\n        [-20,   1],\\n        [ 45,  64],\\n        [ -6,  17],\\n        [ -5, -38],\\n        [ 96, -14],\\n        [ 79,  84]]))",
    0.00134
  ],
  "test_horizontal_matrix": [
    "failed",
    "assert 0 == 133",
    0.00052
  ],
  "test_matrix_of_one_integer": [
    "failed",
    "assert not 1\n +  where 1 = submatrix_with_n_numbers(matrix([[66]]))",
    0.0005
  ]
}