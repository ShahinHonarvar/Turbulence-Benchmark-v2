{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests57_53_3.py::test_matrix_of_several_numbers", "location": ["tests57_53_3.py", 29, "test_matrix_of_several_numbers"], "keywords": {"test_matrix_of_several_numbers": 1, "__wrapped__": 1, "tests57_53_3.py": 1, "Folder_53": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0002009579911828041, "start": 1731151560.806698, "stop": 1731151560.8068995, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "9c9a9057bcb8401db178a048c8fda96a", "node": "<WorkerController gw1>"}
{"nodeid": "tests57_53_3.py::test_matrix_of_single_number_equal_to_sum", "location": ["tests57_53_3.py", 17, "test_matrix_of_single_number_equal_to_sum"], "keywords": {"test_matrix_of_single_number_equal_to_sum": 1, "__wrapped__": 1, "tests57_53_3.py": 1, "Folder_53": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001897839829325676, "start": 1731151560.8078063, "stop": 1731151560.8079965, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "9c9a9057bcb8401db178a048c8fda96a", "node": "<WorkerController gw0>"}
{"nodeid": "tests57_53_3.py::test_matrix_of_single_number_and_zeros", "location": ["tests57_53_3.py", 51, "test_matrix_of_single_number_and_zeros"], "keywords": {"test_matrix_of_single_number_and_zeros": 1, "__wrapped__": 1, "tests57_53_3.py": 1, "Folder_53": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00014939205721020699, "start": 1731151560.8152635, "stop": 1731151560.8154132, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "9c9a9057bcb8401db178a048c8fda96a", "node": "<WorkerController gw2>"}
{"nodeid": "tests57_53_3.py::test_matrix_of_single_number_and_zeros", "location": ["tests57_53_3.py", 51, "test_matrix_of_single_number_and_zeros"], "keywords": {"test_matrix_of_single_number_and_zeros": 1, "__wrapped__": 1, "tests57_53_3.py": 1, "Folder_53": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/__init__.py", "lineno": 324, "message": "AttributeError: module 'numpy' has no attribute 'int'.\n`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. Did you mean: 'inf'?"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_single_number_and_zeros():", "        if -37 == 0:", "            element = 1", "        else:", "            element = 0", "        for i in range(1, 11):", "            mat = ''", "            for j in range(i):", "                row = (f'{element} ' * i) + ';'", "                mat += row", "            mat = mat[:-1]", "            mat = np.matrix(mat)", "            mat[0, 0] = -37", "            if -37 == 0:", "                assert len(submatrix_with_particular_sum(mat)) == 1", "            else:", ">               assert len(submatrix_with_particular_sum(mat)) == i * i"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q57/command_results_3/Folder_53/tests57_53_3.py", "lineno": 69, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.where(np.sum(matrix, axis=1) == -37, matrix, np.empty(len(matrix), dtype=np.int))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/command_results_3/Folder_53/generated_answer.py", "lineno": 4, "message": "in submatrix_with_particular_sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def __getattr__(attr):", "        # Warn for expired attributes, and return a dummy function", "        # that always raises an exception.", "        import warnings", "        import math", "        try:", "            msg = __expired_functions__[attr]", "        except KeyError:", "            pass", "        else:", "            warnings.warn(msg, DeprecationWarning, stacklevel=2)", "    ", "            def _expired(*args, **kwds):", "                raise RuntimeError(msg)", "    ", "            return _expired", "    ", "        # Emit warnings for deprecated attributes", "        try:", "            val, msg = __deprecated_attrs__[attr]", "        except KeyError:", "            pass", "        else:", "            warnings.warn(msg, DeprecationWarning, stacklevel=2)", "            return val", "    ", "        if attr in __future_scalars__:", "            # And future warnings for those that will change, but also give", "            # the AttributeError", "            warnings.warn(", "                f\"In the future `np.{attr}` will be defined as the \"", "                \"corresponding NumPy scalar.\", FutureWarning, stacklevel=2)", "    ", "        if attr in __former_attrs__:", ">           raise AttributeError(__former_attrs__[attr])", "E           AttributeError: module 'numpy' has no attribute 'int'.", "E           `np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.", "E           The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:", "E               https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. Did you mean: 'inf'?"], "reprfuncargs": {"args": [["attr", "'int'"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/__init__.py", "lineno": 324, "message": "AttributeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_single_number_and_zeros():", "        if -37 == 0:", "            element = 1", "        else:", "            element = 0", "        for i in range(1, 11):", "            mat = ''", "            for j in range(i):", "                row = (f'{element} ' * i) + ';'", "                mat += row", "            mat = mat[:-1]", "            mat = np.matrix(mat)", "            mat[0, 0] = -37", "            if -37 == 0:", "                assert len(submatrix_with_particular_sum(mat)) == 1", "            else:", ">               assert len(submatrix_with_particular_sum(mat)) == i * i"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q57/command_results_3/Folder_53/tests57_53_3.py", "lineno": 69, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.where(np.sum(matrix, axis=1) == -37, matrix, np.empty(len(matrix), dtype=np.int))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/command_results_3/Folder_53/generated_answer.py", "lineno": 4, "message": "in submatrix_with_particular_sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def __getattr__(attr):", "        # Warn for expired attributes, and return a dummy function", "        # that always raises an exception.", "        import warnings", "        import math", "        try:", "            msg = __expired_functions__[attr]", "        except KeyError:", "            pass", "        else:", "            warnings.warn(msg, DeprecationWarning, stacklevel=2)", "    ", "            def _expired(*args, **kwds):", "                raise RuntimeError(msg)", "    ", "            return _expired", "    ", "        # Emit warnings for deprecated attributes", "        try:", "            val, msg = __deprecated_attrs__[attr]", "        except KeyError:", "            pass", "        else:", "            warnings.warn(msg, DeprecationWarning, stacklevel=2)", "            return val", "    ", "        if attr in __future_scalars__:", "            # And future warnings for those that will change, but also give", "            # the AttributeError", "            warnings.warn(", "                f\"In the future `np.{attr}` will be defined as the \"", "                \"corresponding NumPy scalar.\", FutureWarning, stacklevel=2)", "    ", "        if attr in __former_attrs__:", ">           raise AttributeError(__former_attrs__[attr])", "E           AttributeError: module 'numpy' has no attribute 'int'.", "E           `np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.", "E           The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:", "E               https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. Did you mean: 'inf'?"], "reprfuncargs": {"args": [["attr", "'int'"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/__init__.py", "lineno": 324, "message": "AttributeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/__init__.py", "lineno": 324, "message": "AttributeError: module 'numpy' has no attribute 'int'.\n`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. Did you mean: 'inf'?"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0002865798305720091, "start": 1731151560.8156395, "stop": 1731151560.8159268, "extras": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "9c9a9057bcb8401db178a048c8fda96a", "node": "<WorkerController gw2>"}
{"nodeid": "tests57_53_3.py::test_matrix_of_single_number_and_zeros", "location": ["tests57_53_3.py", 51, "test_matrix_of_single_number_and_zeros"], "keywords": {"test_matrix_of_single_number_and_zeros": 1, "__wrapped__": 1, "tests57_53_3.py": 1, "Folder_53": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00013766088522970676, "start": 1731151560.837692, "stop": 1731151560.83783, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "9c9a9057bcb8401db178a048c8fda96a", "node": "<WorkerController gw2>"}
{"nodeid": "tests57_53_3.py::test_matrix_of_single_number_equal_to_sum", "location": ["tests57_53_3.py", 17, "test_matrix_of_single_number_equal_to_sum"], "keywords": {"test_matrix_of_single_number_equal_to_sum": 1, "__wrapped__": 1, "tests57_53_3.py": 1, "Folder_53": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/__init__.py", "lineno": 324, "message": "AttributeError: module 'numpy' has no attribute 'int'.\n`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. Did you mean: 'inf'?"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_single_number_equal_to_sum():", "        input_matrix = np.matrix([[-37]])", ">       assert submatrix_with_particular_sum(input_matrix) == [[[-37]]]"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q57/command_results_3/Folder_53/tests57_53_3.py", "lineno": 21, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.where(np.sum(matrix, axis=1) == -37, matrix, np.empty(len(matrix), dtype=np.int))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/command_results_3/Folder_53/generated_answer.py", "lineno": 4, "message": "in submatrix_with_particular_sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def __getattr__(attr):", "        # Warn for expired attributes, and return a dummy function", "        # that always raises an exception.", "        import warnings", "        import math", "        try:", "            msg = __expired_functions__[attr]", "        except KeyError:", "            pass", "        else:", "            warnings.warn(msg, DeprecationWarning, stacklevel=2)", "    ", "            def _expired(*args, **kwds):", "                raise RuntimeError(msg)", "    ", "            return _expired", "    ", "        # Emit warnings for deprecated attributes", "        try:", "            val, msg = __deprecated_attrs__[attr]", "        except KeyError:", "            pass", "        else:", "            warnings.warn(msg, DeprecationWarning, stacklevel=2)", "            return val", "    ", "        if attr in __future_scalars__:", "            # And future warnings for those that will change, but also give", "            # the AttributeError", "            warnings.warn(", "                f\"In the future `np.{attr}` will be defined as the \"", "                \"corresponding NumPy scalar.\", FutureWarning, stacklevel=2)", "    ", "        if attr in __former_attrs__:", ">           raise AttributeError(__former_attrs__[attr])", "E           AttributeError: module 'numpy' has no attribute 'int'.", "E           `np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.", "E           The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:", "E               https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. Did you mean: 'inf'?"], "reprfuncargs": {"args": [["attr", "'int'"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/__init__.py", "lineno": 324, "message": "AttributeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_single_number_equal_to_sum():", "        input_matrix = np.matrix([[-37]])", ">       assert submatrix_with_particular_sum(input_matrix) == [[[-37]]]"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q57/command_results_3/Folder_53/tests57_53_3.py", "lineno": 21, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.where(np.sum(matrix, axis=1) == -37, matrix, np.empty(len(matrix), dtype=np.int))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/command_results_3/Folder_53/generated_answer.py", "lineno": 4, "message": "in submatrix_with_particular_sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def __getattr__(attr):", "        # Warn for expired attributes, and return a dummy function", "        # that always raises an exception.", "        import warnings", "        import math", "        try:", "            msg = __expired_functions__[attr]", "        except KeyError:", "            pass", "        else:", "            warnings.warn(msg, DeprecationWarning, stacklevel=2)", "    ", "            def _expired(*args, **kwds):", "                raise RuntimeError(msg)", "    ", "            return _expired", "    ", "        # Emit warnings for deprecated attributes", "        try:", "            val, msg = __deprecated_attrs__[attr]", "        except KeyError:", "            pass", "        else:", "            warnings.warn(msg, DeprecationWarning, stacklevel=2)", "            return val", "    ", "        if attr in __future_scalars__:", "            # And future warnings for those that will change, but also give", "            # the AttributeError", "            warnings.warn(", "                f\"In the future `np.{attr}` will be defined as the \"", "                \"corresponding NumPy scalar.\", FutureWarning, stacklevel=2)", "    ", "        if attr in __former_attrs__:", ">           raise AttributeError(__former_attrs__[attr])", "E           AttributeError: module 'numpy' has no attribute 'int'.", "E           `np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.", "E           The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:", "E               https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. Did you mean: 'inf'?"], "reprfuncargs": {"args": [["attr", "'int'"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/__init__.py", "lineno": 324, "message": "AttributeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/__init__.py", "lineno": 324, "message": "AttributeError: module 'numpy' has no attribute 'int'.\n`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. Did you mean: 'inf'?"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00031050294637680054, "start": 1731151560.8082855, "stop": 1731151560.8085968, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "9c9a9057bcb8401db178a048c8fda96a", "node": "<WorkerController gw0>"}
{"nodeid": "tests57_53_3.py::test_matrix_of_single_number_equal_to_sum", "location": ["tests57_53_3.py", 17, "test_matrix_of_single_number_equal_to_sum"], "keywords": {"test_matrix_of_single_number_equal_to_sum": 1, "__wrapped__": 1, "tests57_53_3.py": 1, "Folder_53": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0001758318394422531, "start": 1731151560.8422775, "stop": 1731151560.8424542, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "9c9a9057bcb8401db178a048c8fda96a", "node": "<WorkerController gw0>"}
{"nodeid": "tests57_53_3.py::test_matrix_of_several_numbers", "location": ["tests57_53_3.py", 29, "test_matrix_of_several_numbers"], "keywords": {"test_matrix_of_several_numbers": 1, "__wrapped__": 1, "tests57_53_3.py": 1, "Folder_53": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/__init__.py", "lineno": 324, "message": "AttributeError: module 'numpy' has no attribute 'int'.\n`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. Did you mean: 'inf'?"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_several_numbers():", "        if -37 <= 0:", "            row = '1 2 3 4 5 6 7 8 9'", "            input_matrix = np.matrix(f'{row}; {row}; {row}')", "        else:", "            row = '-1 -2 -3 -4 -5 -6 -7 -8 -9'", "            input_matrix = np.matrix(f'{row}; {row}; {row}')", ">       assert not submatrix_with_particular_sum(input_matrix)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q57/command_results_3/Folder_53/tests57_53_3.py", "lineno": 38, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.where(np.sum(matrix, axis=1) == -37, matrix, np.empty(len(matrix), dtype=np.int))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/command_results_3/Folder_53/generated_answer.py", "lineno": 4, "message": "in submatrix_with_particular_sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def __getattr__(attr):", "        # Warn for expired attributes, and return a dummy function", "        # that always raises an exception.", "        import warnings", "        import math", "        try:", "            msg = __expired_functions__[attr]", "        except KeyError:", "            pass", "        else:", "            warnings.warn(msg, DeprecationWarning, stacklevel=2)", "    ", "            def _expired(*args, **kwds):", "                raise RuntimeError(msg)", "    ", "            return _expired", "    ", "        # Emit warnings for deprecated attributes", "        try:", "            val, msg = __deprecated_attrs__[attr]", "        except KeyError:", "            pass", "        else:", "            warnings.warn(msg, DeprecationWarning, stacklevel=2)", "            return val", "    ", "        if attr in __future_scalars__:", "            # And future warnings for those that will change, but also give", "            # the AttributeError", "            warnings.warn(", "                f\"In the future `np.{attr}` will be defined as the \"", "                \"corresponding NumPy scalar.\", FutureWarning, stacklevel=2)", "    ", "        if attr in __former_attrs__:", ">           raise AttributeError(__former_attrs__[attr])", "E           AttributeError: module 'numpy' has no attribute 'int'.", "E           `np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.", "E           The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:", "E               https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. Did you mean: 'inf'?"], "reprfuncargs": {"args": [["attr", "'int'"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/__init__.py", "lineno": 324, "message": "AttributeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_several_numbers():", "        if -37 <= 0:", "            row = '1 2 3 4 5 6 7 8 9'", "            input_matrix = np.matrix(f'{row}; {row}; {row}')", "        else:", "            row = '-1 -2 -3 -4 -5 -6 -7 -8 -9'", "            input_matrix = np.matrix(f'{row}; {row}; {row}')", ">       assert not submatrix_with_particular_sum(input_matrix)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q57/command_results_3/Folder_53/tests57_53_3.py", "lineno": 38, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.where(np.sum(matrix, axis=1) == -37, matrix, np.empty(len(matrix), dtype=np.int))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/command_results_3/Folder_53/generated_answer.py", "lineno": 4, "message": "in submatrix_with_particular_sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def __getattr__(attr):", "        # Warn for expired attributes, and return a dummy function", "        # that always raises an exception.", "        import warnings", "        import math", "        try:", "            msg = __expired_functions__[attr]", "        except KeyError:", "            pass", "        else:", "            warnings.warn(msg, DeprecationWarning, stacklevel=2)", "    ", "            def _expired(*args, **kwds):", "                raise RuntimeError(msg)", "    ", "            return _expired", "    ", "        # Emit warnings for deprecated attributes", "        try:", "            val, msg = __deprecated_attrs__[attr]", "        except KeyError:", "            pass", "        else:", "            warnings.warn(msg, DeprecationWarning, stacklevel=2)", "            return val", "    ", "        if attr in __future_scalars__:", "            # And future warnings for those that will change, but also give", "            # the AttributeError", "            warnings.warn(", "                f\"In the future `np.{attr}` will be defined as the \"", "                \"corresponding NumPy scalar.\", FutureWarning, stacklevel=2)", "    ", "        if attr in __former_attrs__:", ">           raise AttributeError(__former_attrs__[attr])", "E           AttributeError: module 'numpy' has no attribute 'int'.", "E           `np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.", "E           The aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:", "E               https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. Did you mean: 'inf'?"], "reprfuncargs": {"args": [["attr", "'int'"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/__init__.py", "lineno": 324, "message": "AttributeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/__init__.py", "lineno": 324, "message": "AttributeError: module 'numpy' has no attribute 'int'.\n`np.int` was a deprecated alias for the builtin `int`. To avoid this error in existing code, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\nThe aliases was originally deprecated in NumPy 1.20; for more details and guidance see the original release note at:\n    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. Did you mean: 'inf'?"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.004263854119926691, "start": 1731151560.8075569, "stop": 1731151560.8118212, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "9c9a9057bcb8401db178a048c8fda96a", "node": "<WorkerController gw1>"}
{"nodeid": "tests57_53_3.py::test_matrix_of_several_numbers", "location": ["tests57_53_3.py", 29, "test_matrix_of_several_numbers"], "keywords": {"test_matrix_of_several_numbers": 1, "__wrapped__": 1, "tests57_53_3.py": 1, "Folder_53": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00015198183245956898, "start": 1731151560.8669875, "stop": 1731151560.8671403, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "9c9a9057bcb8401db178a048c8fda96a", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
