{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests58_60_3.py::test_matrix_of_having_88_integers", "location": ["tests58_60_3.py", 28, "test_matrix_of_having_88_integers"], "keywords": {"test_matrix_of_having_88_integers": 1, "__wrapped__": 1, "tests58_60_3.py": 1, "Folder_60": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00018618395552039146, "start": 1731153198.6559074, "stop": 1731153198.6560946, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "84b8568b12534ee9bd4ad55610f66b05", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_60_3.py::test_matrix_of_having_88_integers", "location": ["tests58_60_3.py", 28, "test_matrix_of_having_88_integers"], "keywords": {"test_matrix_of_having_88_integers": 1, "__wrapped__": 1, "tests58_60_3.py": 1, "Folder_60": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.0010433420538902283, "start": 1731153198.6565104, "stop": 1731153198.6575544, "extras": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "84b8568b12534ee9bd4ad55610f66b05", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_60_3.py::test_matrix_of_having_88_integers", "location": ["tests58_60_3.py", 28, "test_matrix_of_having_88_integers"], "keywords": {"test_matrix_of_having_88_integers": 1, "__wrapped__": 1, "tests58_60_3.py": 1, "Folder_60": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00013902783393859863, "start": 1731153198.6592221, "stop": 1731153198.6593618, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "84b8568b12534ee9bd4ad55610f66b05", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_60_3.py::test_matrix_of_one_integer", "location": ["tests58_60_3.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_60_3.py": 1, "Folder_60": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00014962092973291874, "start": 1731153198.6574004, "stop": 1731153198.6575506, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw1", "testrun_uid": "84b8568b12534ee9bd4ad55610f66b05", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_60_3.py::test_horizontal_matrix", "location": ["tests58_60_3.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_60_3.py": 1, "Folder_60": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00017029396258294582, "start": 1731153198.6601944, "stop": 1731153198.6603656, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "84b8568b12534ee9bd4ad55610f66b05", "node": "<WorkerController gw2>"}
{"nodeid": "tests58_60_3.py::test_matrix_of_one_integer", "location": ["tests58_60_3.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_60_3.py": 1, "Folder_60": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/shape_base.py", "lineno": 359, "message": "ValueError: need at least one array to concatenate"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_one_integer():", "        input_matrix = [[88]]", "        input_matrix = np.asmatrix(input_matrix)", "        if 88 == 1:", "            assert submatrix_with_n_numbers(input_matrix) == 1", "        else:", ">           assert not submatrix_with_n_numbers(input_matrix)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_3/Folder_60/tests58_60_3.py", "lineno": 26, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.sum(np.any(np.hstack([arr[i] for i in range(len(arr) - 1)]), axis=1))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_3/Folder_60/generated_answer.py", "lineno": 4, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_vhstack_dispatcher)", "    def hstack(tup, *, dtype=None, casting=\"same_kind\"):", "        \"\"\"", "        Stack arrays in sequence horizontally (column wise).", "    ", "        This is equivalent to concatenation along the second axis, except for 1-D", "        arrays where it concatenates along the first axis. Rebuilds arrays divided", "        by `hsplit`.", "    ", "        This function makes most sense for arrays with up to 3 dimensions. For", "        instance, for pixel-data with a height (first axis), width (second axis),", "        and r/g/b channels (third axis). The functions `concatenate`, `stack` and", "        `block` provide more general stacking and concatenation operations.", "    ", "        Parameters", "        ----------", "        tup : sequence of ndarrays", "            The arrays must have the same shape along all but the second axis,", "            except 1-D arrays which can be any length.", "    ", "        dtype : str or dtype", "            If provided, the destination array will have this dtype. Cannot be", "            provided together with `out`.", "    ", "        .. versionadded:: 1.24", "    ", "        casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional", "            Controls what kind of data casting may occur. Defaults to 'same_kind'.", "    ", "        .. versionadded:: 1.24", "    ", "        Returns", "        -------", "        stacked : ndarray", "            The array formed by stacking the given arrays.", "    ", "        See Also", "        --------", "        concatenate : Join a sequence of arrays along an existing axis.", "        stack : Join a sequence of arrays along a new axis.", "        block : Assemble an nd-array from nested lists of blocks.", "        vstack : Stack arrays in sequence vertically (row wise).", "        dstack : Stack arrays in sequence depth wise (along third axis).", "        column_stack : Stack 1-D arrays as columns into a 2-D array.", "        hsplit : Split an array into multiple sub-arrays horizontally (column-wise).", "    ", "        Examples", "        --------", "        >>> a = np.array((1,2,3))", "        >>> b = np.array((4,5,6))", "        >>> np.hstack((a,b))", "        array([1, 2, 3, 4, 5, 6])", "        >>> a = np.array([[1],[2],[3]])", "        >>> b = np.array([[4],[5],[6]])", "        >>> np.hstack((a,b))", "        array([[1, 4],", "               [2, 5],", "               [3, 6]])", "    ", "        \"\"\"", "        arrs = atleast_1d(*tup)", "        if not isinstance(arrs, list):", "            arrs = [arrs]", "        # As a special case, dimension 0 of 1-dimensional arrays is \"horizontal\"", "        if arrs and arrs[0].ndim == 1:", "            return _nx.concatenate(arrs, 0, dtype=dtype, casting=casting)", "        else:", ">           return _nx.concatenate(arrs, 1, dtype=dtype, casting=casting)", "E           ValueError: need at least one array to concatenate"], "reprfuncargs": {"args": [["tup", "[]"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/shape_base.py", "lineno": 359, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_one_integer():", "        input_matrix = [[88]]", "        input_matrix = np.asmatrix(input_matrix)", "        if 88 == 1:", "            assert submatrix_with_n_numbers(input_matrix) == 1", "        else:", ">           assert not submatrix_with_n_numbers(input_matrix)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_3/Folder_60/tests58_60_3.py", "lineno": 26, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.sum(np.any(np.hstack([arr[i] for i in range(len(arr) - 1)]), axis=1))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_3/Folder_60/generated_answer.py", "lineno": 4, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_vhstack_dispatcher)", "    def hstack(tup, *, dtype=None, casting=\"same_kind\"):", "        \"\"\"", "        Stack arrays in sequence horizontally (column wise).", "    ", "        This is equivalent to concatenation along the second axis, except for 1-D", "        arrays where it concatenates along the first axis. Rebuilds arrays divided", "        by `hsplit`.", "    ", "        This function makes most sense for arrays with up to 3 dimensions. For", "        instance, for pixel-data with a height (first axis), width (second axis),", "        and r/g/b channels (third axis). The functions `concatenate`, `stack` and", "        `block` provide more general stacking and concatenation operations.", "    ", "        Parameters", "        ----------", "        tup : sequence of ndarrays", "            The arrays must have the same shape along all but the second axis,", "            except 1-D arrays which can be any length.", "    ", "        dtype : str or dtype", "            If provided, the destination array will have this dtype. Cannot be", "            provided together with `out`.", "    ", "        .. versionadded:: 1.24", "    ", "        casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional", "            Controls what kind of data casting may occur. Defaults to 'same_kind'.", "    ", "        .. versionadded:: 1.24", "    ", "        Returns", "        -------", "        stacked : ndarray", "            The array formed by stacking the given arrays.", "    ", "        See Also", "        --------", "        concatenate : Join a sequence of arrays along an existing axis.", "        stack : Join a sequence of arrays along a new axis.", "        block : Assemble an nd-array from nested lists of blocks.", "        vstack : Stack arrays in sequence vertically (row wise).", "        dstack : Stack arrays in sequence depth wise (along third axis).", "        column_stack : Stack 1-D arrays as columns into a 2-D array.", "        hsplit : Split an array into multiple sub-arrays horizontally (column-wise).", "    ", "        Examples", "        --------", "        >>> a = np.array((1,2,3))", "        >>> b = np.array((4,5,6))", "        >>> np.hstack((a,b))", "        array([1, 2, 3, 4, 5, 6])", "        >>> a = np.array([[1],[2],[3]])", "        >>> b = np.array([[4],[5],[6]])", "        >>> np.hstack((a,b))", "        array([[1, 4],", "               [2, 5],", "               [3, 6]])", "    ", "        \"\"\"", "        arrs = atleast_1d(*tup)", "        if not isinstance(arrs, list):", "            arrs = [arrs]", "        # As a special case, dimension 0 of 1-dimensional arrays is \"horizontal\"", "        if arrs and arrs[0].ndim == 1:", "            return _nx.concatenate(arrs, 0, dtype=dtype, casting=casting)", "        else:", ">           return _nx.concatenate(arrs, 1, dtype=dtype, casting=casting)", "E           ValueError: need at least one array to concatenate"], "reprfuncargs": {"args": [["tup", "[]"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/shape_base.py", "lineno": 359, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/shape_base.py", "lineno": 359, "message": "ValueError: need at least one array to concatenate"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.003064661053940654, "start": 1731153198.6577723, "stop": 1731153198.6608374, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw1", "testrun_uid": "84b8568b12534ee9bd4ad55610f66b05", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_60_3.py::test_matrix_of_one_integer", "location": ["tests58_60_3.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_60_3.py": 1, "Folder_60": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00015664799138903618, "start": 1731153198.7011518, "stop": 1731153198.7013092, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw1", "testrun_uid": "84b8568b12534ee9bd4ad55610f66b05", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_60_3.py::test_horizontal_matrix", "location": ["tests58_60_3.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_60_3.py": 1, "Folder_60": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/shape_base.py", "lineno": 359, "message": "ValueError: need at least one array to concatenate"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_horizontal_matrix():", "        mat = [[random.randint(-10, 10) for _ in range(88)]]", "        mat = np.asmatrix(mat)", "        m = np.concatenate((mat, mat), axis=1)", "        if 88 < 30:", "            num = 4", "        elif 30 <= 88 < 70:", "            num = 3", "        elif 70 <= 88 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            m = np.concatenate((m, mat), axis=1)", ">           output = submatrix_with_n_numbers(m)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_3/Folder_60/tests58_60_3.py", "lineno": 56, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.sum(np.any(np.hstack([arr[i] for i in range(len(arr) - 1)]), axis=1))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_3/Folder_60/generated_answer.py", "lineno": 4, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_vhstack_dispatcher)", "    def hstack(tup, *, dtype=None, casting=\"same_kind\"):", "        \"\"\"", "        Stack arrays in sequence horizontally (column wise).", "    ", "        This is equivalent to concatenation along the second axis, except for 1-D", "        arrays where it concatenates along the first axis. Rebuilds arrays divided", "        by `hsplit`.", "    ", "        This function makes most sense for arrays with up to 3 dimensions. For", "        instance, for pixel-data with a height (first axis), width (second axis),", "        and r/g/b channels (third axis). The functions `concatenate`, `stack` and", "        `block` provide more general stacking and concatenation operations.", "    ", "        Parameters", "        ----------", "        tup : sequence of ndarrays", "            The arrays must have the same shape along all but the second axis,", "            except 1-D arrays which can be any length.", "    ", "        dtype : str or dtype", "            If provided, the destination array will have this dtype. Cannot be", "            provided together with `out`.", "    ", "        .. versionadded:: 1.24", "    ", "        casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional", "            Controls what kind of data casting may occur. Defaults to 'same_kind'.", "    ", "        .. versionadded:: 1.24", "    ", "        Returns", "        -------", "        stacked : ndarray", "            The array formed by stacking the given arrays.", "    ", "        See Also", "        --------", "        concatenate : Join a sequence of arrays along an existing axis.", "        stack : Join a sequence of arrays along a new axis.", "        block : Assemble an nd-array from nested lists of blocks.", "        vstack : Stack arrays in sequence vertically (row wise).", "        dstack : Stack arrays in sequence depth wise (along third axis).", "        column_stack : Stack 1-D arrays as columns into a 2-D array.", "        hsplit : Split an array into multiple sub-arrays horizontally (column-wise).", "    ", "        Examples", "        --------", "        >>> a = np.array((1,2,3))", "        >>> b = np.array((4,5,6))", "        >>> np.hstack((a,b))", "        array([1, 2, 3, 4, 5, 6])", "        >>> a = np.array([[1],[2],[3]])", "        >>> b = np.array([[4],[5],[6]])", "        >>> np.hstack((a,b))", "        array([[1, 4],", "               [2, 5],", "               [3, 6]])", "    ", "        \"\"\"", "        arrs = atleast_1d(*tup)", "        if not isinstance(arrs, list):", "            arrs = [arrs]", "        # As a special case, dimension 0 of 1-dimensional arrays is \"horizontal\"", "        if arrs and arrs[0].ndim == 1:", "            return _nx.concatenate(arrs, 0, dtype=dtype, casting=casting)", "        else:", ">           return _nx.concatenate(arrs, 1, dtype=dtype, casting=casting)", "E           ValueError: need at least one array to concatenate"], "reprfuncargs": {"args": [["tup", "[]"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/shape_base.py", "lineno": 359, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_horizontal_matrix():", "        mat = [[random.randint(-10, 10) for _ in range(88)]]", "        mat = np.asmatrix(mat)", "        m = np.concatenate((mat, mat), axis=1)", "        if 88 < 30:", "            num = 4", "        elif 30 <= 88 < 70:", "            num = 3", "        elif 70 <= 88 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            m = np.concatenate((m, mat), axis=1)", ">           output = submatrix_with_n_numbers(m)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_3/Folder_60/tests58_60_3.py", "lineno": 56, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.sum(np.any(np.hstack([arr[i] for i in range(len(arr) - 1)]), axis=1))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_3/Folder_60/generated_answer.py", "lineno": 4, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_vhstack_dispatcher)", "    def hstack(tup, *, dtype=None, casting=\"same_kind\"):", "        \"\"\"", "        Stack arrays in sequence horizontally (column wise).", "    ", "        This is equivalent to concatenation along the second axis, except for 1-D", "        arrays where it concatenates along the first axis. Rebuilds arrays divided", "        by `hsplit`.", "    ", "        This function makes most sense for arrays with up to 3 dimensions. For", "        instance, for pixel-data with a height (first axis), width (second axis),", "        and r/g/b channels (third axis). The functions `concatenate`, `stack` and", "        `block` provide more general stacking and concatenation operations.", "    ", "        Parameters", "        ----------", "        tup : sequence of ndarrays", "            The arrays must have the same shape along all but the second axis,", "            except 1-D arrays which can be any length.", "    ", "        dtype : str or dtype", "            If provided, the destination array will have this dtype. Cannot be", "            provided together with `out`.", "    ", "        .. versionadded:: 1.24", "    ", "        casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional", "            Controls what kind of data casting may occur. Defaults to 'same_kind'.", "    ", "        .. versionadded:: 1.24", "    ", "        Returns", "        -------", "        stacked : ndarray", "            The array formed by stacking the given arrays.", "    ", "        See Also", "        --------", "        concatenate : Join a sequence of arrays along an existing axis.", "        stack : Join a sequence of arrays along a new axis.", "        block : Assemble an nd-array from nested lists of blocks.", "        vstack : Stack arrays in sequence vertically (row wise).", "        dstack : Stack arrays in sequence depth wise (along third axis).", "        column_stack : Stack 1-D arrays as columns into a 2-D array.", "        hsplit : Split an array into multiple sub-arrays horizontally (column-wise).", "    ", "        Examples", "        --------", "        >>> a = np.array((1,2,3))", "        >>> b = np.array((4,5,6))", "        >>> np.hstack((a,b))", "        array([1, 2, 3, 4, 5, 6])", "        >>> a = np.array([[1],[2],[3]])", "        >>> b = np.array([[4],[5],[6]])", "        >>> np.hstack((a,b))", "        array([[1, 4],", "               [2, 5],", "               [3, 6]])", "    ", "        \"\"\"", "        arrs = atleast_1d(*tup)", "        if not isinstance(arrs, list):", "            arrs = [arrs]", "        # As a special case, dimension 0 of 1-dimensional arrays is \"horizontal\"", "        if arrs and arrs[0].ndim == 1:", "            return _nx.concatenate(arrs, 0, dtype=dtype, casting=casting)", "        else:", ">           return _nx.concatenate(arrs, 1, dtype=dtype, casting=casting)", "E           ValueError: need at least one array to concatenate"], "reprfuncargs": {"args": [["tup", "[]"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/shape_base.py", "lineno": 359, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/shape_base.py", "lineno": 359, "message": "ValueError: need at least one array to concatenate"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00031344383023679256, "start": 1731153198.660919, "stop": 1731153198.6612332, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "84b8568b12534ee9bd4ad55610f66b05", "node": "<WorkerController gw2>"}
{"nodeid": "tests58_60_3.py::test_horizontal_matrix", "location": ["tests58_60_3.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_60_3.py": 1, "Folder_60": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00015585892833769321, "start": 1731153198.7063365, "stop": 1731153198.706493, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "84b8568b12534ee9bd4ad55610f66b05", "node": "<WorkerController gw2>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
