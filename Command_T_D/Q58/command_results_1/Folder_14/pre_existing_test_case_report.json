{
  "parameter(s)": [
    84
  ],
  "test_matrix_of_having_84_integers": [
    "failed",
    "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[ 38, -85],\\n        [ 80, -79],\\n        [ 31, -98],\\n        [-95,  27],\\n        [ 27, -19],\\n        [-82,  97],\\n        [-47,  29],\\n        [-20,  54],\\n        [ 15, -35],\\n        [-98,  -8],\\n        [ 87, -60],\\n        [ -9,  35],\\n        [ 86, -44],\\n        [ 73, -81],\\n        [ 67,  -1],\\n        [ 98,  63],\\n        [ -7,  96],\\n        [  5,  97],\\n        [ 51, -54],\\n        [-81, -85],\\n        [  5,  84],\\n        [ 61,  64],\\n        [  7, -17],\\n        [-86,  17],\\n        [ 81, -92],\\n        [ 64, -71],\\n        [ 75, -82],\\n        [ 51,   2],\\n        [-59, -17],\\n        [ 17,  14],\\n        [ 64,  99],\\n        [ 69,   8],\\n        [ 26,  40],\\n        [-33,   9],\\n        [ 32,  -8],\\n        [ 43,  -9],\\n        [ 86, -72],\\n        [-44,  41],\\n        [ 69,  76],\\n        [ 87,  -1],\\n        [ 17, -87],\\n        [ -3,  37]]))",
    0.00068
  ],
  "test_matrix_of_one_integer": [
    "failed",
    "assert not 1\n +  where 1 = submatrix_with_n_numbers(matrix([[84]]))",
    0.00043
  ],
  "test_horizontal_matrix": [
    "failed",
    "assert 0 == 169",
    0.00048
  ]
}