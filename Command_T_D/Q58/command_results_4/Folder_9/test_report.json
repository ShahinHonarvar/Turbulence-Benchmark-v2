{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests58_9_4.py::test_matrix_of_having_33_integers", "location": ["tests58_9_4.py", 28, "test_matrix_of_having_33_integers"], "keywords": {"test_matrix_of_having_33_integers": 1, "__wrapped__": 1, "tests58_9_4.py": 1, "Folder_9": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0002343661617487669, "start": 1731153323.0372226, "stop": 1731153323.0374575, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "cf73b9055cac4b89ae4f3e0b1ce18ad2", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_9_4.py::test_matrix_of_one_integer", "location": ["tests58_9_4.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_9_4.py": 1, "Folder_9": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016852584667503834, "start": 1731153323.037494, "stop": 1731153323.0376632, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "cf73b9055cac4b89ae4f3e0b1ce18ad2", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_9_4.py::test_matrix_of_one_integer", "location": ["tests58_9_4.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_9_4.py": 1, "Folder_9": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.0004377590958029032, "start": 1731153323.0379405, "stop": 1731153323.0383787, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "cf73b9055cac4b89ae4f3e0b1ce18ad2", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_9_4.py::test_matrix_of_one_integer", "location": ["tests58_9_4.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_9_4.py": 1, "Folder_9": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00011570006608963013, "start": 1731153323.0398083, "stop": 1731153323.0399244, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "cf73b9055cac4b89ae4f3e0b1ce18ad2", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_9_4.py::test_vertical_matrix", "location": ["tests58_9_4.py", 60, "test_vertical_matrix"], "keywords": {"test_vertical_matrix": 1, "__wrapped__": 1, "tests58_9_4.py": 1, "Folder_9": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0004196460358798504, "start": 1731153323.0404007, "stop": 1731153323.0408208, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw0", "testrun_uid": "cf73b9055cac4b89ae4f3e0b1ce18ad2", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_9_4.py::test_horizontal_matrix", "location": ["tests58_9_4.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_9_4.py": 1, "Folder_9": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00015928293578326702, "start": 1731153323.0428393, "stop": 1731153323.042999, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "cf73b9055cac4b89ae4f3e0b1ce18ad2", "node": "<WorkerController gw2>"}
{"nodeid": "tests58_9_4.py::test_matrix_of_having_33_integers", "location": ["tests58_9_4.py", 28, "test_matrix_of_having_33_integers"], "keywords": {"test_matrix_of_having_33_integers": 1, "__wrapped__": 1, "tests58_9_4.py": 1, "Folder_9": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q58/command_results_4/Folder_9/tests58_9_4.py", "lineno": 38, "message": "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[ -94,  -48,  -36,   21,  -90,   79,  -14,  -68,  -37,   44,\\n           82,  -18,    2,  -19,  -19,  -48,   29,    5,  -86,  -88,\\n           10,  -52,  -62,  -74,  -87,  -22, -100,  -39,   93,  -88,\\n           93,   10,   62]]))"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_having_33_integers():", "        if 33 % 2 == 0:", "            input_matrix = [[random.randint(-100, 100) for _ in range(2)] for _ in range(33 // 2)]", "            input_matrix = np.asmatrix(input_matrix)", "        else:", "            input_matrix = [[random.randint(-100, 100) for _ in range(33)]]", "            input_matrix = np.asmatrix(input_matrix)", "    ", ">       assert submatrix_with_n_numbers(input_matrix) == 1", "E       assert 0 == 1", "E        +  where 0 = submatrix_with_n_numbers(matrix([[ -94,  -48,  -36,   21,  -90,   79,  -14,  -68,  -37,   44,\\n           82,  -18,    2,  -19,  -19,  -48,   29,    5,  -86,  -88,\\n           10,  -52,  -62,  -74,  -87,  -22, -100,  -39,   93,  -88,\\n           93,   10,   62]]))"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_4/Folder_9/tests58_9_4.py", "lineno": 38, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_having_33_integers():", "        if 33 % 2 == 0:", "            input_matrix = [[random.randint(-100, 100) for _ in range(2)] for _ in range(33 // 2)]", "            input_matrix = np.asmatrix(input_matrix)", "        else:", "            input_matrix = [[random.randint(-100, 100) for _ in range(33)]]", "            input_matrix = np.asmatrix(input_matrix)", "    ", ">       assert submatrix_with_n_numbers(input_matrix) == 1", "E       assert 0 == 1", "E        +  where 0 = submatrix_with_n_numbers(matrix([[ -94,  -48,  -36,   21,  -90,   79,  -14,  -68,  -37,   44,\\n           82,  -18,    2,  -19,  -19,  -48,   29,    5,  -86,  -88,\\n           10,  -52,  -62,  -74,  -87,  -22, -100,  -39,   93,  -88,\\n           93,   10,   62]]))"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_4/Folder_9/tests58_9_4.py", "lineno": 38, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q58/command_results_4/Folder_9/tests58_9_4.py", "lineno": 38, "message": "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[ -94,  -48,  -36,   21,  -90,   79,  -14,  -68,  -37,   44,\\n           82,  -18,    2,  -19,  -19,  -48,   29,    5,  -86,  -88,\\n           10,  -52,  -62,  -74,  -87,  -22, -100,  -39,   93,  -88,\\n           93,   10,   62]]))"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0005481492262333632, "start": 1731153323.037843, "stop": 1731153323.0383916, "extras": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "cf73b9055cac4b89ae4f3e0b1ce18ad2", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_9_4.py::test_matrix_of_having_33_integers", "location": ["tests58_9_4.py", 28, "test_matrix_of_having_33_integers"], "keywords": {"test_matrix_of_having_33_integers": 1, "__wrapped__": 1, "tests58_9_4.py": 1, "Folder_9": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00010957708582282066, "start": 1731153323.0592177, "stop": 1731153323.0593278, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "cf73b9055cac4b89ae4f3e0b1ce18ad2", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_9_4.py::test_horizontal_matrix", "location": ["tests58_9_4.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_9_4.py": 1, "Folder_9": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q58/command_results_4/Folder_9/tests58_9_4.py", "lineno": 58, "message": "assert 0 == 67"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_horizontal_matrix():", "        mat = [[random.randint(-10, 10) for _ in range(33)]]", "        mat = np.asmatrix(mat)", "        m = np.concatenate((mat, mat), axis=1)", "        if 33 < 30:", "            num = 4", "        elif 30 <= 33 < 70:", "            num = 3", "        elif 70 <= 33 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            m = np.concatenate((m, mat), axis=1)", "            output = submatrix_with_n_numbers(m)", "            expected_result = ((i + 2) * 33) + 1", ">           assert output == expected_result", "E           assert 0 == 67"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_4/Folder_9/tests58_9_4.py", "lineno": 58, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_horizontal_matrix():", "        mat = [[random.randint(-10, 10) for _ in range(33)]]", "        mat = np.asmatrix(mat)", "        m = np.concatenate((mat, mat), axis=1)", "        if 33 < 30:", "            num = 4", "        elif 30 <= 33 < 70:", "            num = 3", "        elif 70 <= 33 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            m = np.concatenate((m, mat), axis=1)", "            output = submatrix_with_n_numbers(m)", "            expected_result = ((i + 2) * 33) + 1", ">           assert output == expected_result", "E           assert 0 == 67"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_4/Folder_9/tests58_9_4.py", "lineno": 58, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q58/command_results_4/Folder_9/tests58_9_4.py", "lineno": 58, "message": "assert 0 == 67"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0004115400370210409, "start": 1731153323.0432684, "stop": 1731153323.0436804, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "cf73b9055cac4b89ae4f3e0b1ce18ad2", "node": "<WorkerController gw2>"}
{"nodeid": "tests58_9_4.py::test_horizontal_matrix", "location": ["tests58_9_4.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_9_4.py": 1, "Folder_9": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00010613398626446724, "start": 1731153323.0610676, "stop": 1731153323.0611742, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "cf73b9055cac4b89ae4f3e0b1ce18ad2", "node": "<WorkerController gw2>"}
{"nodeid": "tests58_9_4.py::test_vertical_matrix", "location": ["tests58_9_4.py", 60, "test_vertical_matrix"], "keywords": {"test_vertical_matrix": 1, "__wrapped__": 1, "tests58_9_4.py": 1, "Folder_9": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2307, "message": "ValueError: operands could not be broadcast together with shapes (33,4) (32,4)"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_vertical_matrix():", "        m = '1 ;' * 33", "        m = m[:-1]", "        m = np.matrix(m)", "        mat = np.concatenate((m, m), axis=0)", "        if 33 < 30:", "            num = 4", "        elif 30 <= 33 < 70:", "            num = 3", "        elif 70 <= 33 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            mat = np.concatenate((m, mat), axis=0)", ">           output = submatrix_with_n_numbers(mat)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_4/Folder_9/tests58_9_4.py", "lineno": 77, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.sum(np.all((np.where(arr[i] == 33, arr[i + 1:i + 34], -1) == [0, 1, 2, 3] for i in range(len(arr) - 32))))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_4/Folder_9/generated_answer.py", "lineno": 4, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_sum_dispatcher)", "    def sum(a, axis=None, dtype=None, out=None, keepdims=np._NoValue,", "            initial=np._NoValue, where=np._NoValue):", "        \"\"\"", "        Sum of array elements over a given axis.", "    ", "        Parameters", "        ----------", "        a : array_like", "            Elements to sum.", "        axis : None or int or tuple of ints, optional", "            Axis or axes along which a sum is performed.  The default,", "            axis=None, will sum all of the elements of the input array.  If", "            axis is negative it counts from the last to the first axis.", "    ", "            .. versionadded:: 1.7.0", "    ", "            If axis is a tuple of ints, a sum is performed on all of the axes", "            specified in the tuple instead of a single axis or all the axes as", "            before.", "        dtype : dtype, optional", "            The type of the returned array and of the accumulator in which the", "            elements are summed.  The dtype of `a` is used by default unless `a`", "            has an integer dtype of less precision than the default platform", "            integer.  In that case, if `a` is signed then the platform integer", "            is used while if `a` is unsigned then an unsigned integer of the", "            same precision as the platform integer is used.", "        out : ndarray, optional", "            Alternative output array in which to place the result. It must have", "            the same shape as the expected output, but the type of the output", "            values will be cast if necessary.", "        keepdims : bool, optional", "            If this is set to True, the axes which are reduced are left", "            in the result as dimensions with size one. With this option,", "            the result will broadcast correctly against the input array.", "    ", "            If the default value is passed, then `keepdims` will not be", "            passed through to the `sum` method of sub-classes of", "            `ndarray`, however any non-default value will be.  If the", "            sub-class' method does not implement `keepdims` any", "            exceptions will be raised.", "        initial : scalar, optional", "            Starting value for the sum. See `~numpy.ufunc.reduce` for details.", "    ", "            .. versionadded:: 1.15.0", "    ", "        where : array_like of bool, optional", "            Elements to include in the sum. See `~numpy.ufunc.reduce` for details.", "    ", "            .. versionadded:: 1.17.0", "    ", "        Returns", "        -------", "        sum_along_axis : ndarray", "            An array with the same shape as `a`, with the specified", "            axis removed.   If `a` is a 0-d array, or if `axis` is None, a scalar", "            is returned.  If an output array is specified, a reference to", "            `out` is returned.", "    ", "        See Also", "        --------", "        ndarray.sum : Equivalent method.", "    ", "        add.reduce : Equivalent functionality of `add`.", "    ", "        cumsum : Cumulative sum of array elements.", "    ", "        trapz : Integration of array values using the composite trapezoidal rule.", "    ", "        mean, average", "    ", "        Notes", "        -----", "        Arithmetic is modular when using integer types, and no error is", "        raised on overflow.", "    ", "        The sum of an empty array is the neutral element 0:", "    ", "        >>> np.sum([])", "        0.0", "    ", "        For floating point numbers the numerical precision of sum (and", "        ``np.add.reduce``) is in general limited by directly adding each number", "        individually to the result causing rounding errors in every step.", "        However, often numpy will use a  numerically better approach (partial", "        pairwise summation) leading to improved precision in many use-cases.", "        This improved precision is always provided when no ``axis`` is given.", "        When ``axis`` is given, it will depend on which axis is summed.", "        Technically, to provide the best speed possible, the improved precision", "        is only used when the summation is along the fast axis in memory.", "        Note that the exact precision may vary depending on other parameters.", "        In contrast to NumPy, Python's ``math.fsum`` function uses a slower but", "        more precise approach to summation.", "        Especially when summing a large number of lower precision floating point", "        numbers, such as ``float32``, numerical errors can become significant.", "        In such cases it can be advisable to use `dtype=\"float64\"` to use a higher", "        precision for the output.", "    ", "        Examples", "        --------", "        >>> np.sum([0.5, 1.5])", "        2.0", "        >>> np.sum([0.5, 0.7, 0.2, 1.5], dtype=np.int32)", "        1", "        >>> np.sum([[0, 1], [0, 5]])", "        6", "        >>> np.sum([[0, 1], [0, 5]], axis=0)", "        array([0, 6])", "        >>> np.sum([[0, 1], [0, 5]], axis=1)", "        array([1, 5])", "        >>> np.sum([[0, 1], [np.nan, 5]], where=[False, True], axis=1)", "        array([1., 5.])", "    ", "        If the accumulator is too small, overflow occurs:", "    ", "        >>> np.ones(128, dtype=np.int8).sum(dtype=np.int8)", "        -128", "    ", "        You can also start the sum with a value other than zero:", "    ", "        >>> np.sum([10], initial=5)", "        15", "        \"\"\"", "        if isinstance(a, _gentype):", "            # 2018-02-25, 1.15.0", "            warnings.warn(", "                \"Calling np.sum(generator) is deprecated, and in the future will give a different result. \"", "                \"Use np.sum(np.fromiter(generator)) or the python sum builtin instead.\",", "                DeprecationWarning, stacklevel=2)", "    ", ">           res = _sum_(a)", "E           ValueError: operands could not be broadcast together with shapes (33,4) (32,4)"], "reprfuncargs": {"args": [["a", "<generator object submatrix_with_n_numbers.<locals>.<genexpr> at 0x74e7dc39fe40>"], ["axis", "None"], ["dtype", "None"], ["out", "None"], ["keepdims", "<no value>"], ["initial", "<no value>"], ["where", "<no value>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2307, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_vertical_matrix():", "        m = '1 ;' * 33", "        m = m[:-1]", "        m = np.matrix(m)", "        mat = np.concatenate((m, m), axis=0)", "        if 33 < 30:", "            num = 4", "        elif 30 <= 33 < 70:", "            num = 3", "        elif 70 <= 33 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            mat = np.concatenate((m, mat), axis=0)", ">           output = submatrix_with_n_numbers(mat)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_4/Folder_9/tests58_9_4.py", "lineno": 77, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.sum(np.all((np.where(arr[i] == 33, arr[i + 1:i + 34], -1) == [0, 1, 2, 3] for i in range(len(arr) - 32))))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_4/Folder_9/generated_answer.py", "lineno": 4, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_sum_dispatcher)", "    def sum(a, axis=None, dtype=None, out=None, keepdims=np._NoValue,", "            initial=np._NoValue, where=np._NoValue):", "        \"\"\"", "        Sum of array elements over a given axis.", "    ", "        Parameters", "        ----------", "        a : array_like", "            Elements to sum.", "        axis : None or int or tuple of ints, optional", "            Axis or axes along which a sum is performed.  The default,", "            axis=None, will sum all of the elements of the input array.  If", "            axis is negative it counts from the last to the first axis.", "    ", "            .. versionadded:: 1.7.0", "    ", "            If axis is a tuple of ints, a sum is performed on all of the axes", "            specified in the tuple instead of a single axis or all the axes as", "            before.", "        dtype : dtype, optional", "            The type of the returned array and of the accumulator in which the", "            elements are summed.  The dtype of `a` is used by default unless `a`", "            has an integer dtype of less precision than the default platform", "            integer.  In that case, if `a` is signed then the platform integer", "            is used while if `a` is unsigned then an unsigned integer of the", "            same precision as the platform integer is used.", "        out : ndarray, optional", "            Alternative output array in which to place the result. It must have", "            the same shape as the expected output, but the type of the output", "            values will be cast if necessary.", "        keepdims : bool, optional", "            If this is set to True, the axes which are reduced are left", "            in the result as dimensions with size one. With this option,", "            the result will broadcast correctly against the input array.", "    ", "            If the default value is passed, then `keepdims` will not be", "            passed through to the `sum` method of sub-classes of", "            `ndarray`, however any non-default value will be.  If the", "            sub-class' method does not implement `keepdims` any", "            exceptions will be raised.", "        initial : scalar, optional", "            Starting value for the sum. See `~numpy.ufunc.reduce` for details.", "    ", "            .. versionadded:: 1.15.0", "    ", "        where : array_like of bool, optional", "            Elements to include in the sum. See `~numpy.ufunc.reduce` for details.", "    ", "            .. versionadded:: 1.17.0", "    ", "        Returns", "        -------", "        sum_along_axis : ndarray", "            An array with the same shape as `a`, with the specified", "            axis removed.   If `a` is a 0-d array, or if `axis` is None, a scalar", "            is returned.  If an output array is specified, a reference to", "            `out` is returned.", "    ", "        See Also", "        --------", "        ndarray.sum : Equivalent method.", "    ", "        add.reduce : Equivalent functionality of `add`.", "    ", "        cumsum : Cumulative sum of array elements.", "    ", "        trapz : Integration of array values using the composite trapezoidal rule.", "    ", "        mean, average", "    ", "        Notes", "        -----", "        Arithmetic is modular when using integer types, and no error is", "        raised on overflow.", "    ", "        The sum of an empty array is the neutral element 0:", "    ", "        >>> np.sum([])", "        0.0", "    ", "        For floating point numbers the numerical precision of sum (and", "        ``np.add.reduce``) is in general limited by directly adding each number", "        individually to the result causing rounding errors in every step.", "        However, often numpy will use a  numerically better approach (partial", "        pairwise summation) leading to improved precision in many use-cases.", "        This improved precision is always provided when no ``axis`` is given.", "        When ``axis`` is given, it will depend on which axis is summed.", "        Technically, to provide the best speed possible, the improved precision", "        is only used when the summation is along the fast axis in memory.", "        Note that the exact precision may vary depending on other parameters.", "        In contrast to NumPy, Python's ``math.fsum`` function uses a slower but", "        more precise approach to summation.", "        Especially when summing a large number of lower precision floating point", "        numbers, such as ``float32``, numerical errors can become significant.", "        In such cases it can be advisable to use `dtype=\"float64\"` to use a higher", "        precision for the output.", "    ", "        Examples", "        --------", "        >>> np.sum([0.5, 1.5])", "        2.0", "        >>> np.sum([0.5, 0.7, 0.2, 1.5], dtype=np.int32)", "        1", "        >>> np.sum([[0, 1], [0, 5]])", "        6", "        >>> np.sum([[0, 1], [0, 5]], axis=0)", "        array([0, 6])", "        >>> np.sum([[0, 1], [0, 5]], axis=1)", "        array([1, 5])", "        >>> np.sum([[0, 1], [np.nan, 5]], where=[False, True], axis=1)", "        array([1., 5.])", "    ", "        If the accumulator is too small, overflow occurs:", "    ", "        >>> np.ones(128, dtype=np.int8).sum(dtype=np.int8)", "        -128", "    ", "        You can also start the sum with a value other than zero:", "    ", "        >>> np.sum([10], initial=5)", "        15", "        \"\"\"", "        if isinstance(a, _gentype):", "            # 2018-02-25, 1.15.0", "            warnings.warn(", "                \"Calling np.sum(generator) is deprecated, and in the future will give a different result. \"", "                \"Use np.sum(np.fromiter(generator)) or the python sum builtin instead.\",", "                DeprecationWarning, stacklevel=2)", "    ", ">           res = _sum_(a)", "E           ValueError: operands could not be broadcast together with shapes (33,4) (32,4)"], "reprfuncargs": {"args": [["a", "<generator object submatrix_with_n_numbers.<locals>.<genexpr> at 0x74e7dc39fe40>"], ["axis", "None"], ["dtype", "None"], ["out", "None"], ["keepdims", "<no value>"], ["initial", "<no value>"], ["where", "<no value>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2307, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2307, "message": "ValueError: operands could not be broadcast together with shapes (33,4) (32,4)"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0025080100167542696, "start": 1731153323.041086, "stop": 1731153323.0435948, "extras": [], "$report_type": "TestReport", "item_index": 3, "worker_id": "gw0", "testrun_uid": "cf73b9055cac4b89ae4f3e0b1ce18ad2", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_9_4.py::test_vertical_matrix", "location": ["tests58_9_4.py", 60, "test_vertical_matrix"], "keywords": {"test_vertical_matrix": 1, "__wrapped__": 1, "tests58_9_4.py": 1, "Folder_9": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00011918507516384125, "start": 1731153323.0671837, "stop": 1731153323.0673037, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw0", "testrun_uid": "cf73b9055cac4b89ae4f3e0b1ce18ad2", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
