{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests58_33_2.py::test_matrix_of_one_integer", "location": ["tests58_33_2.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_33_2.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00017174798995256424, "start": 1731152794.4826877, "stop": 1731152794.48286, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw1", "testrun_uid": "f16854b62d7b48368843573068f7dc87", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_33_2.py::test_horizontal_matrix", "location": ["tests58_33_2.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_33_2.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.000177070964127779, "start": 1731152794.4827254, "stop": 1731152794.4829032, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw0", "testrun_uid": "f16854b62d7b48368843573068f7dc87", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_33_2.py::test_matrix_of_one_integer", "location": ["tests58_33_2.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_33_2.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.00018189498223364353, "start": 1731152794.4830992, "stop": 1731152794.4832816, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw1", "testrun_uid": "f16854b62d7b48368843573068f7dc87", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_33_2.py::test_matrix_of_one_integer", "location": ["tests58_33_2.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_33_2.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 8.057011291384697e-05, "start": 1731152794.4836094, "stop": 1731152794.4836903, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw1", "testrun_uid": "f16854b62d7b48368843573068f7dc87", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_33_2.py::test_matrix_of_having_118_integers", "location": ["tests58_33_2.py", 28, "test_matrix_of_having_118_integers"], "keywords": {"test_matrix_of_having_118_integers": 1, "__wrapped__": 1, "tests58_33_2.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016480614431202412, "start": 1731152794.4827397, "stop": 1731152794.4829051, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw2", "testrun_uid": "f16854b62d7b48368843573068f7dc87", "node": "<WorkerController gw2>"}
{"nodeid": "tests58_33_2.py::test_vertical_matrix", "location": ["tests58_33_2.py", 60, "test_vertical_matrix"], "keywords": {"test_vertical_matrix": 1, "__wrapped__": 1, "tests58_33_2.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 8.672499097883701e-05, "start": 1731152794.4841046, "stop": 1731152794.484192, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw1", "testrun_uid": "f16854b62d7b48368843573068f7dc87", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_33_2.py::test_matrix_of_having_118_integers", "location": ["tests58_33_2.py", 28, "test_matrix_of_having_118_integers"], "keywords": {"test_matrix_of_having_118_integers": 1, "__wrapped__": 1, "tests58_33_2.py": 1, "Folder_33": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q58/command_results_2/Folder_33/tests58_33_2.py", "lineno": 38, "message": "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[ -2, -14],\\n        [-66,  -4],\\n        [-70,  35],\\n        [-49,  70],\\n        [-50, -61],\\n        [-12, -82],\\n        [-75,  47],\\n        [-35,  65],\\n        [ 86, -64],\\n        [ 76,  50],\\n        [ 20,  19],\\n        [ 92, -67],\\n        [-15, -67],\\n        [ 62,   1],\\n        [ 93, -12],\\n        [ 23,   7],\\n        [-47, -20],\\n        [  0, -39],\\n        [ 49,  99],\\n        [ 68,  40],\\n        [ 19,  16],\\n        [-33,  84],\\n        [ 97,   7],\\n        [-21, -76],\\n        [-82,  31],\\n        [  3,  57],\\n        [ 44, -54],\\n        [ 70,  11],\\n        [ 54, -19],\\n        [ 55, -66],\\n        [ 98,  -4],\\n        [ 63, -56],\\n        [-48, -62],\\n        [ 10,  56],\\n        [ 79, -88],\\n        [ 43, -16],\\n        [  5, -83],\\n        [-94, -54],\\n        [-92, -43],\\n        [-75,  28],\\n        [ 82,  68],\\n        [-16,  28],\\n        [ 67,  98],\\n        [ 30, -39],\\n        [-81,  -1],\\n        [ 17,  91],\\n        [ 31, -72],\\n        [ 70, -72],\\n        [ 50, -97],\\n        [ 98,  11],\\n        [-42,  58],\\n        [-27,   6],\\n        [-98, -46],\\n        [-74,  56],\\n        [ 12,  34],\\n        [ 61, -43],\\n        [ 53,  -8],\\n        [-48,  57],\\n        [-99, -63]]))"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_having_118_integers():", "        if 118 % 2 == 0:", "            input_matrix = [[random.randint(-100, 100) for _ in range(2)] for _ in range(118 // 2)]", "            input_matrix = np.asmatrix(input_matrix)", "        else:", "            input_matrix = [[random.randint(-100, 100) for _ in range(118)]]", "            input_matrix = np.asmatrix(input_matrix)", "    ", ">       assert submatrix_with_n_numbers(input_matrix) == 1", "E       assert 0 == 1", "E        +  where 0 = submatrix_with_n_numbers(matrix([[ -2, -14],\\n        [-66,  -4],\\n        [-70,  35],\\n        [-49,  70],\\n        [-50, -61],\\n        [-12, -82],\\n        [-75,  47],\\n        [-35,  65],\\n        [ 86, -64],\\n        [ 76,  50],\\n        [ 20,  19],\\n        [ 92, -67],\\n        [-15, -67],\\n        [ 62,   1],\\n        [ 93, -12],\\n        [ 23,   7],\\n        [-47, -20],\\n        [  0, -39],\\n        [ 49,  99],\\n        [ 68,  40],\\n        [ 19,  16],\\n        [-33,  84],\\n        [ 97,   7],\\n        [-21, -76],\\n        [-82,  31],\\n        [  3,  57],\\n        [ 44, -54],\\n        [ 70,  11],\\n        [ 54, -19],\\n        [ 55, -66],\\n        [ 98,  -4],\\n        [ 63, -56],\\n        [-48, -62],\\n        [ 10,  56],\\n        [ 79, -88],\\n        [ 43, -16],\\n        [  5, -83],\\n        [-94, -54],\\n        [-92, -43],\\n        [-75,  28],\\n        [ 82,  68],\\n        [-16,  28],\\n        [ 67,  98],\\n        [ 30, -39],\\n        [-81,  -1],\\n        [ 17,  91],\\n        [ 31, -72],\\n        [ 70, -72],\\n        [ 50, -97],\\n        [ 98,  11],\\n        [-42,  58],\\n        [-27,   6],\\n        [-98, -46],\\n        [-74,  56],\\n        [ 12,  34],\\n        [ 61, -43],\\n        [ 53,  -8],\\n        [-48,  57],\\n        [-99, -63]]))"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_2/Folder_33/tests58_33_2.py", "lineno": 38, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_having_118_integers():", "        if 118 % 2 == 0:", "            input_matrix = [[random.randint(-100, 100) for _ in range(2)] for _ in range(118 // 2)]", "            input_matrix = np.asmatrix(input_matrix)", "        else:", "            input_matrix = [[random.randint(-100, 100) for _ in range(118)]]", "            input_matrix = np.asmatrix(input_matrix)", "    ", ">       assert submatrix_with_n_numbers(input_matrix) == 1", "E       assert 0 == 1", "E        +  where 0 = submatrix_with_n_numbers(matrix([[ -2, -14],\\n        [-66,  -4],\\n        [-70,  35],\\n        [-49,  70],\\n        [-50, -61],\\n        [-12, -82],\\n        [-75,  47],\\n        [-35,  65],\\n        [ 86, -64],\\n        [ 76,  50],\\n        [ 20,  19],\\n        [ 92, -67],\\n        [-15, -67],\\n        [ 62,   1],\\n        [ 93, -12],\\n        [ 23,   7],\\n        [-47, -20],\\n        [  0, -39],\\n        [ 49,  99],\\n        [ 68,  40],\\n        [ 19,  16],\\n        [-33,  84],\\n        [ 97,   7],\\n        [-21, -76],\\n        [-82,  31],\\n        [  3,  57],\\n        [ 44, -54],\\n        [ 70,  11],\\n        [ 54, -19],\\n        [ 55, -66],\\n        [ 98,  -4],\\n        [ 63, -56],\\n        [-48, -62],\\n        [ 10,  56],\\n        [ 79, -88],\\n        [ 43, -16],\\n        [  5, -83],\\n        [-94, -54],\\n        [-92, -43],\\n        [-75,  28],\\n        [ 82,  68],\\n        [-16,  28],\\n        [ 67,  98],\\n        [ 30, -39],\\n        [-81,  -1],\\n        [ 17,  91],\\n        [ 31, -72],\\n        [ 70, -72],\\n        [ 50, -97],\\n        [ 98,  11],\\n        [-42,  58],\\n        [-27,   6],\\n        [-98, -46],\\n        [-74,  56],\\n        [ 12,  34],\\n        [ 61, -43],\\n        [ 53,  -8],\\n        [-48,  57],\\n        [-99, -63]]))"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_2/Folder_33/tests58_33_2.py", "lineno": 38, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q58/command_results_2/Folder_33/tests58_33_2.py", "lineno": 38, "message": "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[ -2, -14],\\n        [-66,  -4],\\n        [-70,  35],\\n        [-49,  70],\\n        [-50, -61],\\n        [-12, -82],\\n        [-75,  47],\\n        [-35,  65],\\n        [ 86, -64],\\n        [ 76,  50],\\n        [ 20,  19],\\n        [ 92, -67],\\n        [-15, -67],\\n        [ 62,   1],\\n        [ 93, -12],\\n        [ 23,   7],\\n        [-47, -20],\\n        [  0, -39],\\n        [ 49,  99],\\n        [ 68,  40],\\n        [ 19,  16],\\n        [-33,  84],\\n        [ 97,   7],\\n        [-21, -76],\\n        [-82,  31],\\n        [  3,  57],\\n        [ 44, -54],\\n        [ 70,  11],\\n        [ 54, -19],\\n        [ 55, -66],\\n        [ 98,  -4],\\n        [ 63, -56],\\n        [-48, -62],\\n        [ 10,  56],\\n        [ 79, -88],\\n        [ 43, -16],\\n        [  5, -83],\\n        [-94, -54],\\n        [-92, -43],\\n        [-75,  28],\\n        [ 82,  68],\\n        [-16,  28],\\n        [ 67,  98],\\n        [ 30, -39],\\n        [-81,  -1],\\n        [ 17,  91],\\n        [ 31, -72],\\n        [ 70, -72],\\n        [ 50, -97],\\n        [ 98,  11],\\n        [-42,  58],\\n        [-27,   6],\\n        [-98, -46],\\n        [-74,  56],\\n        [ 12,  34],\\n        [ 61, -43],\\n        [ 53,  -8],\\n        [-48,  57],\\n        [-99, -63]]))"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0008716238662600517, "start": 1731152794.4831653, "stop": 1731152794.4840374, "extras": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw2", "testrun_uid": "f16854b62d7b48368843573068f7dc87", "node": "<WorkerController gw2>"}
{"nodeid": "tests58_33_2.py::test_matrix_of_having_118_integers", "location": ["tests58_33_2.py", 28, "test_matrix_of_having_118_integers"], "keywords": {"test_matrix_of_having_118_integers": 1, "__wrapped__": 1, "tests58_33_2.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00017733685672283173, "start": 1731152794.505509, "stop": 1731152794.5056872, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw2", "testrun_uid": "f16854b62d7b48368843573068f7dc87", "node": "<WorkerController gw2>"}
{"nodeid": "tests58_33_2.py::test_vertical_matrix", "location": ["tests58_33_2.py", 60, "test_vertical_matrix"], "keywords": {"test_vertical_matrix": 1, "__wrapped__": 1, "tests58_33_2.py": 1, "Folder_33": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2307, "message": "ValueError: operands could not be broadcast together with shapes (120,1) (121,1)"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_vertical_matrix():", "        m = '1 ;' * 118", "        m = m[:-1]", "        m = np.matrix(m)", "        mat = np.concatenate((m, m), axis=0)", "        if 118 < 30:", "            num = 4", "        elif 30 <= 118 < 70:", "            num = 3", "        elif 70 <= 118 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            mat = np.concatenate((m, mat), axis=0)", ">           output = submatrix_with_n_numbers(mat)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_2/Folder_33/tests58_33_2.py", "lineno": 77, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.sum((np.all(matrix[i:j + 119] == list(range(i, j + 1)), axis=1) for i in range(0, len(matrix) - 118) for j in range(i + 1, len(matrix))))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_2/Folder_33/generated_answer.py", "lineno": 4, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_sum_dispatcher)", "    def sum(a, axis=None, dtype=None, out=None, keepdims=np._NoValue,", "            initial=np._NoValue, where=np._NoValue):", "        \"\"\"", "        Sum of array elements over a given axis.", "    ", "        Parameters", "        ----------", "        a : array_like", "            Elements to sum.", "        axis : None or int or tuple of ints, optional", "            Axis or axes along which a sum is performed.  The default,", "            axis=None, will sum all of the elements of the input array.  If", "            axis is negative it counts from the last to the first axis.", "    ", "            .. versionadded:: 1.7.0", "    ", "            If axis is a tuple of ints, a sum is performed on all of the axes", "            specified in the tuple instead of a single axis or all the axes as", "            before.", "        dtype : dtype, optional", "            The type of the returned array and of the accumulator in which the", "            elements are summed.  The dtype of `a` is used by default unless `a`", "            has an integer dtype of less precision than the default platform", "            integer.  In that case, if `a` is signed then the platform integer", "            is used while if `a` is unsigned then an unsigned integer of the", "            same precision as the platform integer is used.", "        out : ndarray, optional", "            Alternative output array in which to place the result. It must have", "            the same shape as the expected output, but the type of the output", "            values will be cast if necessary.", "        keepdims : bool, optional", "            If this is set to True, the axes which are reduced are left", "            in the result as dimensions with size one. With this option,", "            the result will broadcast correctly against the input array.", "    ", "            If the default value is passed, then `keepdims` will not be", "            passed through to the `sum` method of sub-classes of", "            `ndarray`, however any non-default value will be.  If the", "            sub-class' method does not implement `keepdims` any", "            exceptions will be raised.", "        initial : scalar, optional", "            Starting value for the sum. See `~numpy.ufunc.reduce` for details.", "    ", "            .. versionadded:: 1.15.0", "    ", "        where : array_like of bool, optional", "            Elements to include in the sum. See `~numpy.ufunc.reduce` for details.", "    ", "            .. versionadded:: 1.17.0", "    ", "        Returns", "        -------", "        sum_along_axis : ndarray", "            An array with the same shape as `a`, with the specified", "            axis removed.   If `a` is a 0-d array, or if `axis` is None, a scalar", "            is returned.  If an output array is specified, a reference to", "            `out` is returned.", "    ", "        See Also", "        --------", "        ndarray.sum : Equivalent method.", "    ", "        add.reduce : Equivalent functionality of `add`.", "    ", "        cumsum : Cumulative sum of array elements.", "    ", "        trapz : Integration of array values using the composite trapezoidal rule.", "    ", "        mean, average", "    ", "        Notes", "        -----", "        Arithmetic is modular when using integer types, and no error is", "        raised on overflow.", "    ", "        The sum of an empty array is the neutral element 0:", "    ", "        >>> np.sum([])", "        0.0", "    ", "        For floating point numbers the numerical precision of sum (and", "        ``np.add.reduce``) is in general limited by directly adding each number", "        individually to the result causing rounding errors in every step.", "        However, often numpy will use a  numerically better approach (partial", "        pairwise summation) leading to improved precision in many use-cases.", "        This improved precision is always provided when no ``axis`` is given.", "        When ``axis`` is given, it will depend on which axis is summed.", "        Technically, to provide the best speed possible, the improved precision", "        is only used when the summation is along the fast axis in memory.", "        Note that the exact precision may vary depending on other parameters.", "        In contrast to NumPy, Python's ``math.fsum`` function uses a slower but", "        more precise approach to summation.", "        Especially when summing a large number of lower precision floating point", "        numbers, such as ``float32``, numerical errors can become significant.", "        In such cases it can be advisable to use `dtype=\"float64\"` to use a higher", "        precision for the output.", "    ", "        Examples", "        --------", "        >>> np.sum([0.5, 1.5])", "        2.0", "        >>> np.sum([0.5, 0.7, 0.2, 1.5], dtype=np.int32)", "        1", "        >>> np.sum([[0, 1], [0, 5]])", "        6", "        >>> np.sum([[0, 1], [0, 5]], axis=0)", "        array([0, 6])", "        >>> np.sum([[0, 1], [0, 5]], axis=1)", "        array([1, 5])", "        >>> np.sum([[0, 1], [np.nan, 5]], where=[False, True], axis=1)", "        array([1., 5.])", "    ", "        If the accumulator is too small, overflow occurs:", "    ", "        >>> np.ones(128, dtype=np.int8).sum(dtype=np.int8)", "        -128", "    ", "        You can also start the sum with a value other than zero:", "    ", "        >>> np.sum([10], initial=5)", "        15", "        \"\"\"", "        if isinstance(a, _gentype):", "            # 2018-02-25, 1.15.0", "            warnings.warn(", "                \"Calling np.sum(generator) is deprecated, and in the future will give a different result. \"", "                \"Use np.sum(np.fromiter(generator)) or the python sum builtin instead.\",", "                DeprecationWarning, stacklevel=2)", "    ", ">           res = _sum_(a)", "E           ValueError: operands could not be broadcast together with shapes (120,1) (121,1)"], "reprfuncargs": {"args": [["a", "<generator object submatrix_with_n_numbers.<locals>.<genexpr> at 0x7b87d47c20e0>"], ["axis", "None"], ["dtype", "None"], ["out", "None"], ["keepdims", "<no value>"], ["initial", "<no value>"], ["where", "<no value>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2307, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_vertical_matrix():", "        m = '1 ;' * 118", "        m = m[:-1]", "        m = np.matrix(m)", "        mat = np.concatenate((m, m), axis=0)", "        if 118 < 30:", "            num = 4", "        elif 30 <= 118 < 70:", "            num = 3", "        elif 70 <= 118 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            mat = np.concatenate((m, mat), axis=0)", ">           output = submatrix_with_n_numbers(mat)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_2/Folder_33/tests58_33_2.py", "lineno": 77, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return np.sum((np.all(matrix[i:j + 119] == list(range(i, j + 1)), axis=1) for i in range(0, len(matrix) - 118) for j in range(i + 1, len(matrix))))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_2/Folder_33/generated_answer.py", "lineno": 4, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_sum_dispatcher)", "    def sum(a, axis=None, dtype=None, out=None, keepdims=np._NoValue,", "            initial=np._NoValue, where=np._NoValue):", "        \"\"\"", "        Sum of array elements over a given axis.", "    ", "        Parameters", "        ----------", "        a : array_like", "            Elements to sum.", "        axis : None or int or tuple of ints, optional", "            Axis or axes along which a sum is performed.  The default,", "            axis=None, will sum all of the elements of the input array.  If", "            axis is negative it counts from the last to the first axis.", "    ", "            .. versionadded:: 1.7.0", "    ", "            If axis is a tuple of ints, a sum is performed on all of the axes", "            specified in the tuple instead of a single axis or all the axes as", "            before.", "        dtype : dtype, optional", "            The type of the returned array and of the accumulator in which the", "            elements are summed.  The dtype of `a` is used by default unless `a`", "            has an integer dtype of less precision than the default platform", "            integer.  In that case, if `a` is signed then the platform integer", "            is used while if `a` is unsigned then an unsigned integer of the", "            same precision as the platform integer is used.", "        out : ndarray, optional", "            Alternative output array in which to place the result. It must have", "            the same shape as the expected output, but the type of the output", "            values will be cast if necessary.", "        keepdims : bool, optional", "            If this is set to True, the axes which are reduced are left", "            in the result as dimensions with size one. With this option,", "            the result will broadcast correctly against the input array.", "    ", "            If the default value is passed, then `keepdims` will not be", "            passed through to the `sum` method of sub-classes of", "            `ndarray`, however any non-default value will be.  If the", "            sub-class' method does not implement `keepdims` any", "            exceptions will be raised.", "        initial : scalar, optional", "            Starting value for the sum. See `~numpy.ufunc.reduce` for details.", "    ", "            .. versionadded:: 1.15.0", "    ", "        where : array_like of bool, optional", "            Elements to include in the sum. See `~numpy.ufunc.reduce` for details.", "    ", "            .. versionadded:: 1.17.0", "    ", "        Returns", "        -------", "        sum_along_axis : ndarray", "            An array with the same shape as `a`, with the specified", "            axis removed.   If `a` is a 0-d array, or if `axis` is None, a scalar", "            is returned.  If an output array is specified, a reference to", "            `out` is returned.", "    ", "        See Also", "        --------", "        ndarray.sum : Equivalent method.", "    ", "        add.reduce : Equivalent functionality of `add`.", "    ", "        cumsum : Cumulative sum of array elements.", "    ", "        trapz : Integration of array values using the composite trapezoidal rule.", "    ", "        mean, average", "    ", "        Notes", "        -----", "        Arithmetic is modular when using integer types, and no error is", "        raised on overflow.", "    ", "        The sum of an empty array is the neutral element 0:", "    ", "        >>> np.sum([])", "        0.0", "    ", "        For floating point numbers the numerical precision of sum (and", "        ``np.add.reduce``) is in general limited by directly adding each number", "        individually to the result causing rounding errors in every step.", "        However, often numpy will use a  numerically better approach (partial", "        pairwise summation) leading to improved precision in many use-cases.", "        This improved precision is always provided when no ``axis`` is given.", "        When ``axis`` is given, it will depend on which axis is summed.", "        Technically, to provide the best speed possible, the improved precision", "        is only used when the summation is along the fast axis in memory.", "        Note that the exact precision may vary depending on other parameters.", "        In contrast to NumPy, Python's ``math.fsum`` function uses a slower but", "        more precise approach to summation.", "        Especially when summing a large number of lower precision floating point", "        numbers, such as ``float32``, numerical errors can become significant.", "        In such cases it can be advisable to use `dtype=\"float64\"` to use a higher", "        precision for the output.", "    ", "        Examples", "        --------", "        >>> np.sum([0.5, 1.5])", "        2.0", "        >>> np.sum([0.5, 0.7, 0.2, 1.5], dtype=np.int32)", "        1", "        >>> np.sum([[0, 1], [0, 5]])", "        6", "        >>> np.sum([[0, 1], [0, 5]], axis=0)", "        array([0, 6])", "        >>> np.sum([[0, 1], [0, 5]], axis=1)", "        array([1, 5])", "        >>> np.sum([[0, 1], [np.nan, 5]], where=[False, True], axis=1)", "        array([1., 5.])", "    ", "        If the accumulator is too small, overflow occurs:", "    ", "        >>> np.ones(128, dtype=np.int8).sum(dtype=np.int8)", "        -128", "    ", "        You can also start the sum with a value other than zero:", "    ", "        >>> np.sum([10], initial=5)", "        15", "        \"\"\"", "        if isinstance(a, _gentype):", "            # 2018-02-25, 1.15.0", "            warnings.warn(", "                \"Calling np.sum(generator) is deprecated, and in the future will give a different result. \"", "                \"Use np.sum(np.fromiter(generator)) or the python sum builtin instead.\",", "                DeprecationWarning, stacklevel=2)", "    ", ">           res = _sum_(a)", "E           ValueError: operands could not be broadcast together with shapes (120,1) (121,1)"], "reprfuncargs": {"args": [["a", "<generator object submatrix_with_n_numbers.<locals>.<genexpr> at 0x7b87d47c20e0>"], ["axis", "None"], ["dtype", "None"], ["out", "None"], ["keepdims", "<no value>"], ["initial", "<no value>"], ["where", "<no value>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2307, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2307, "message": "ValueError: operands could not be broadcast together with shapes (120,1) (121,1)"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0009580419864505529, "start": 1731152794.484292, "stop": 1731152794.4852507, "extras": [], "$report_type": "TestReport", "item_index": 3, "worker_id": "gw1", "testrun_uid": "f16854b62d7b48368843573068f7dc87", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_33_2.py::test_vertical_matrix", "location": ["tests58_33_2.py", 60, "test_vertical_matrix"], "keywords": {"test_vertical_matrix": 1, "__wrapped__": 1, "tests58_33_2.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00011737202294170856, "start": 1731152794.5092332, "stop": 1731152794.5093513, "$report_type": "TestReport", "item_index": 3, "worker_id": "gw1", "testrun_uid": "f16854b62d7b48368843573068f7dc87", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_33_2.py::test_horizontal_matrix", "location": ["tests58_33_2.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_33_2.py": 1, "Folder_33": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q58/command_results_2/Folder_33/tests58_33_2.py", "lineno": 58, "message": "assert 0 == 237"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_horizontal_matrix():", "        mat = [[random.randint(-10, 10) for _ in range(118)]]", "        mat = np.asmatrix(mat)", "        m = np.concatenate((mat, mat), axis=1)", "        if 118 < 30:", "            num = 4", "        elif 30 <= 118 < 70:", "            num = 3", "        elif 70 <= 118 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            m = np.concatenate((m, mat), axis=1)", "            output = submatrix_with_n_numbers(m)", "            expected_result = ((i + 2) * 118) + 1", ">           assert output == expected_result", "E           assert 0 == 237"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_2/Folder_33/tests58_33_2.py", "lineno": 58, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_horizontal_matrix():", "        mat = [[random.randint(-10, 10) for _ in range(118)]]", "        mat = np.asmatrix(mat)", "        m = np.concatenate((mat, mat), axis=1)", "        if 118 < 30:", "            num = 4", "        elif 30 <= 118 < 70:", "            num = 3", "        elif 70 <= 118 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            m = np.concatenate((m, mat), axis=1)", "            output = submatrix_with_n_numbers(m)", "            expected_result = ((i + 2) * 118) + 1", ">           assert output == expected_result", "E           assert 0 == 237"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_2/Folder_33/tests58_33_2.py", "lineno": 58, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q58/command_results_2/Folder_33/tests58_33_2.py", "lineno": 58, "message": "assert 0 == 237"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00045151100493967533, "start": 1731152794.483183, "stop": 1731152794.4836352, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw0", "testrun_uid": "f16854b62d7b48368843573068f7dc87", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_33_2.py::test_horizontal_matrix", "location": ["tests58_33_2.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_33_2.py": 1, "Folder_33": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00017032912001013756, "start": 1731152794.5117025, "stop": 1731152794.5118737, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw0", "testrun_uid": "f16854b62d7b48368843573068f7dc87", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
