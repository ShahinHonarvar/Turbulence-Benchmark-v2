{
  "parameter(s)": [
    159
  ],
  "test_matrix_of_one_integer": [
    "passed",
    "",
    0.00184
  ],
  "test_horizontal_matrix": [
    "failed",
    "assert 0 == 319",
    0.00054
  ],
  "test_matrix_of_having_159_integers": [
    "failed",
    "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[  26,   64,   20,  -76,   27,  -21,   -5,  -35,  -84,   19,\\n          -70,  -90,  -73,   -6,   52,   16,   74,   58,   17,  -34,\\n          -25,   15,   25,    0,   43,    2, -100,  -10,   16,  -25,\\n           71,   22,   23,  -34,   88,  -36,   78,  -70,   59,   98,\\n           32,  -81,  -87,  -69,  -99,  -43,   39,    8,  -23,   85,\\n          -18,  -22,  -40,  -95,   -1,   56,   62,  -72,  -74,  100,\\n          -75,   21,  -26,  -36,  -82,   78,   31,   75,   93,  -39,\\n            7,  -88,  -43,  -25,  -30,  -56,  -39,  -25,   88,  -84,\\n          -78,   25,  -83,  -81,  -67,  -30,   43,   24,  -56,   30,\\n           95,   -5,  -90,   25,   61,   94,  -89,   77,   80,   26,\\n          -86,  -33,   46,   44,  -59,  -31,   63,  -47,   35,   25,\\n           25,   31,  -97,   -7,  -39,   80,  -86,   67,   22,  -30,\\n           75,    3,   47,  100,  -98,  -23,   73,   59,   49,   80,\\n          -30,  -60,   -7,   30,   41,  -57,  -27,  -93,   75,  100,\\n           95,   32,   78,   -8,    9,  -76,  -25,   80,   71,  -65,\\n          -11,   89,   14,   84,   79,  -75,  -99,   66,   79]]))",
    0.00092
  ],
  "test_vertical_matrix": [
    "failed",
    "assert 0 == 319",
    0.00369
  ]
}