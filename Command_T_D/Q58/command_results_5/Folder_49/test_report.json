{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests58_49_5.py::test_horizontal_matrix", "location": ["tests58_49_5.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_49_5.py": 1, "Folder_49": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00012848502956330776, "start": 1731153696.2649841, "stop": 1731153696.265113, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "ea543f17970c45299a1d3cf52ba2a3d6", "node": "<WorkerController gw2>"}
{"nodeid": "tests58_49_5.py::test_matrix_of_having_72_integers", "location": ["tests58_49_5.py", 28, "test_matrix_of_having_72_integers"], "keywords": {"test_matrix_of_having_72_integers": 1, "__wrapped__": 1, "tests58_49_5.py": 1, "Folder_49": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001630149781703949, "start": 1731153696.2651825, "stop": 1731153696.2653458, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "ea543f17970c45299a1d3cf52ba2a3d6", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_49_5.py::test_matrix_of_one_integer", "location": ["tests58_49_5.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_49_5.py": 1, "Folder_49": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016471697017550468, "start": 1731153696.26518, "stop": 1731153696.2653456, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "ea543f17970c45299a1d3cf52ba2a3d6", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_49_5.py::test_horizontal_matrix", "location": ["tests58_49_5.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_49_5.py": 1, "Folder_49": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 88, "message": "numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_horizontal_matrix():", "        mat = [[random.randint(-10, 10) for _ in range(72)]]", "        mat = np.asmatrix(mat)", "        m = np.concatenate((mat, mat), axis=1)", "        if 72 < 30:", "            num = 4", "        elif 30 <= 72 < 70:", "            num = 3", "        elif 70 <= 72 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            m = np.concatenate((m, mat), axis=1)", ">           output = submatrix_with_n_numbers(m)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/tests58_49_5.py", "lineno": 56, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return sum((1 for row in range(len(matrix[0])) if np.sum(matrix[row] == 1, axis=1) == 72))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/generated_answer.py", "lineno": 5, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return sum((1 for row in range(len(matrix[0])) if np.sum(matrix[row] == 1, axis=1) == 72))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/generated_answer.py", "lineno": 5, "message": "in <genexpr>"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _wrapreduction(a, np.add, 'sum', axis, dtype, out, keepdims=keepdims,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2313, "message": "in sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _wrapreduction(obj, ufunc, method, axis, dtype, out, **kwargs):", "        passkwargs = {k: v for k, v in kwargs.items()", "                      if v is not np._NoValue}", "    ", "        if type(obj) is not mu.ndarray:", "            try:", "                reduction = getattr(obj, method)", "            except AttributeError:", "                pass", "            else:", "                # This branch is needed for reductions like any which don't", "                # support a dtype.", "                if dtype is not None:", "                    return reduction(axis=axis, dtype=dtype, out=out, **passkwargs)", "                else:", "                    return reduction(axis=axis, out=out, **passkwargs)", "    ", ">       return ufunc.reduce(obj, axis, dtype, out, **passkwargs)", "E       numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1"], "reprfuncargs": {"args": [["obj", "array([False, False, False, False, False, False, False, False, False,\n        True, False, False, False, False, False,...False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False])"], ["ufunc", "<ufunc 'add'>"], ["method", "'sum'"], ["axis", "1"], ["dtype", "None"], ["out", "None"], ["kwargs", "{'initial': <no value>, 'keepdims': <no value>, 'where': <no value>}"], ["passkwargs", "{}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 88, "message": "AxisError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_horizontal_matrix():", "        mat = [[random.randint(-10, 10) for _ in range(72)]]", "        mat = np.asmatrix(mat)", "        m = np.concatenate((mat, mat), axis=1)", "        if 72 < 30:", "            num = 4", "        elif 30 <= 72 < 70:", "            num = 3", "        elif 70 <= 72 < 150:", "            num = 2", "        else:", "            num = 1", "        for i in range(num):", "            m = np.concatenate((m, mat), axis=1)", ">           output = submatrix_with_n_numbers(m)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/tests58_49_5.py", "lineno": 56, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return sum((1 for row in range(len(matrix[0])) if np.sum(matrix[row] == 1, axis=1) == 72))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/generated_answer.py", "lineno": 5, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return sum((1 for row in range(len(matrix[0])) if np.sum(matrix[row] == 1, axis=1) == 72))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/generated_answer.py", "lineno": 5, "message": "in <genexpr>"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _wrapreduction(a, np.add, 'sum', axis, dtype, out, keepdims=keepdims,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2313, "message": "in sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _wrapreduction(obj, ufunc, method, axis, dtype, out, **kwargs):", "        passkwargs = {k: v for k, v in kwargs.items()", "                      if v is not np._NoValue}", "    ", "        if type(obj) is not mu.ndarray:", "            try:", "                reduction = getattr(obj, method)", "            except AttributeError:", "                pass", "            else:", "                # This branch is needed for reductions like any which don't", "                # support a dtype.", "                if dtype is not None:", "                    return reduction(axis=axis, dtype=dtype, out=out, **passkwargs)", "                else:", "                    return reduction(axis=axis, out=out, **passkwargs)", "    ", ">       return ufunc.reduce(obj, axis, dtype, out, **passkwargs)", "E       numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1"], "reprfuncargs": {"args": [["obj", "array([False, False, False, False, False, False, False, False, False,\n        True, False, False, False, False, False,...False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False])"], ["ufunc", "<ufunc 'add'>"], ["method", "'sum'"], ["axis", "1"], ["dtype", "None"], ["out", "None"], ["kwargs", "{'initial': <no value>, 'keepdims': <no value>, 'where': <no value>}"], ["passkwargs", "{}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 88, "message": "AxisError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 88, "message": "numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0003033219836652279, "start": 1731153696.2653232, "stop": 1731153696.265627, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "ea543f17970c45299a1d3cf52ba2a3d6", "node": "<WorkerController gw2>"}
{"nodeid": "tests58_49_5.py::test_horizontal_matrix", "location": ["tests58_49_5.py", 40, "test_horizontal_matrix"], "keywords": {"test_horizontal_matrix": 1, "__wrapped__": 1, "tests58_49_5.py": 1, "Folder_49": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00014040805399417877, "start": 1731153696.2871847, "stop": 1731153696.2873256, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "ea543f17970c45299a1d3cf52ba2a3d6", "node": "<WorkerController gw2>"}
{"nodeid": "tests58_49_5.py::test_matrix_of_one_integer", "location": ["tests58_49_5.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_49_5.py": 1, "Folder_49": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 88, "message": "numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_one_integer():", "        input_matrix = [[72]]", "        input_matrix = np.asmatrix(input_matrix)", "        if 72 == 1:", "            assert submatrix_with_n_numbers(input_matrix) == 1", "        else:", ">           assert not submatrix_with_n_numbers(input_matrix)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/tests58_49_5.py", "lineno": 26, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return sum((1 for row in range(len(matrix[0])) if np.sum(matrix[row] == 1, axis=1) == 72))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/generated_answer.py", "lineno": 5, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return sum((1 for row in range(len(matrix[0])) if np.sum(matrix[row] == 1, axis=1) == 72))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/generated_answer.py", "lineno": 5, "message": "in <genexpr>"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _wrapreduction(a, np.add, 'sum', axis, dtype, out, keepdims=keepdims,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2313, "message": "in sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _wrapreduction(obj, ufunc, method, axis, dtype, out, **kwargs):", "        passkwargs = {k: v for k, v in kwargs.items()", "                      if v is not np._NoValue}", "    ", "        if type(obj) is not mu.ndarray:", "            try:", "                reduction = getattr(obj, method)", "            except AttributeError:", "                pass", "            else:", "                # This branch is needed for reductions like any which don't", "                # support a dtype.", "                if dtype is not None:", "                    return reduction(axis=axis, dtype=dtype, out=out, **passkwargs)", "                else:", "                    return reduction(axis=axis, out=out, **passkwargs)", "    ", ">       return ufunc.reduce(obj, axis, dtype, out, **passkwargs)", "E       numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1"], "reprfuncargs": {"args": [["obj", "array([False])"], ["ufunc", "<ufunc 'add'>"], ["method", "'sum'"], ["axis", "1"], ["dtype", "None"], ["out", "None"], ["kwargs", "{'initial': <no value>, 'keepdims': <no value>, 'where': <no value>}"], ["passkwargs", "{}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 88, "message": "AxisError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_one_integer():", "        input_matrix = [[72]]", "        input_matrix = np.asmatrix(input_matrix)", "        if 72 == 1:", "            assert submatrix_with_n_numbers(input_matrix) == 1", "        else:", ">           assert not submatrix_with_n_numbers(input_matrix)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/tests58_49_5.py", "lineno": 26, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return sum((1 for row in range(len(matrix[0])) if np.sum(matrix[row] == 1, axis=1) == 72))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/generated_answer.py", "lineno": 5, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return sum((1 for row in range(len(matrix[0])) if np.sum(matrix[row] == 1, axis=1) == 72))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/generated_answer.py", "lineno": 5, "message": "in <genexpr>"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _wrapreduction(a, np.add, 'sum', axis, dtype, out, keepdims=keepdims,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2313, "message": "in sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _wrapreduction(obj, ufunc, method, axis, dtype, out, **kwargs):", "        passkwargs = {k: v for k, v in kwargs.items()", "                      if v is not np._NoValue}", "    ", "        if type(obj) is not mu.ndarray:", "            try:", "                reduction = getattr(obj, method)", "            except AttributeError:", "                pass", "            else:", "                # This branch is needed for reductions like any which don't", "                # support a dtype.", "                if dtype is not None:", "                    return reduction(axis=axis, dtype=dtype, out=out, **passkwargs)", "                else:", "                    return reduction(axis=axis, out=out, **passkwargs)", "    ", ">       return ufunc.reduce(obj, axis, dtype, out, **passkwargs)", "E       numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1"], "reprfuncargs": {"args": [["obj", "array([False])"], ["ufunc", "<ufunc 'add'>"], ["method", "'sum'"], ["axis", "1"], ["dtype", "None"], ["out", "None"], ["kwargs", "{'initial': <no value>, 'keepdims': <no value>, 'where': <no value>}"], ["passkwargs", "{}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 88, "message": "AxisError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 88, "message": "numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0002502759452909231, "start": 1731153696.2655923, "stop": 1731153696.265843, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "ea543f17970c45299a1d3cf52ba2a3d6", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_49_5.py::test_matrix_of_one_integer", "location": ["tests58_49_5.py", 18, "test_matrix_of_one_integer"], "keywords": {"test_matrix_of_one_integer": 1, "__wrapped__": 1, "tests58_49_5.py": 1, "Folder_49": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0001123200636357069, "start": 1731153696.2917461, "stop": 1731153696.291859, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "ea543f17970c45299a1d3cf52ba2a3d6", "node": "<WorkerController gw0>"}
{"nodeid": "tests58_49_5.py::test_matrix_of_having_72_integers", "location": ["tests58_49_5.py", 28, "test_matrix_of_having_72_integers"], "keywords": {"test_matrix_of_having_72_integers": 1, "__wrapped__": 1, "tests58_49_5.py": 1, "Folder_49": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 88, "message": "numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_having_72_integers():", "        if 72 % 2 == 0:", "            input_matrix = [[random.randint(-100, 100) for _ in range(2)] for _ in range(72 // 2)]", "            input_matrix = np.asmatrix(input_matrix)", "        else:", "            input_matrix = [[random.randint(-100, 100) for _ in range(72)]]", "            input_matrix = np.asmatrix(input_matrix)", "    ", ">       assert submatrix_with_n_numbers(input_matrix) == 1"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/tests58_49_5.py", "lineno": 38, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return sum((1 for row in range(len(matrix[0])) if np.sum(matrix[row] == 1, axis=1) == 72))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/generated_answer.py", "lineno": 5, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return sum((1 for row in range(len(matrix[0])) if np.sum(matrix[row] == 1, axis=1) == 72))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/generated_answer.py", "lineno": 5, "message": "in <genexpr>"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _wrapreduction(a, np.add, 'sum', axis, dtype, out, keepdims=keepdims,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2313, "message": "in sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _wrapreduction(obj, ufunc, method, axis, dtype, out, **kwargs):", "        passkwargs = {k: v for k, v in kwargs.items()", "                      if v is not np._NoValue}", "    ", "        if type(obj) is not mu.ndarray:", "            try:", "                reduction = getattr(obj, method)", "            except AttributeError:", "                pass", "            else:", "                # This branch is needed for reductions like any which don't", "                # support a dtype.", "                if dtype is not None:", "                    return reduction(axis=axis, dtype=dtype, out=out, **passkwargs)", "                else:", "                    return reduction(axis=axis, out=out, **passkwargs)", "    ", ">       return ufunc.reduce(obj, axis, dtype, out, **passkwargs)", "E       numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1"], "reprfuncargs": {"args": [["obj", "array([False, False])"], ["ufunc", "<ufunc 'add'>"], ["method", "'sum'"], ["axis", "1"], ["dtype", "None"], ["out", "None"], ["kwargs", "{'initial': <no value>, 'keepdims': <no value>, 'where': <no value>}"], ["passkwargs", "{}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 88, "message": "AxisError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_having_72_integers():", "        if 72 % 2 == 0:", "            input_matrix = [[random.randint(-100, 100) for _ in range(2)] for _ in range(72 // 2)]", "            input_matrix = np.asmatrix(input_matrix)", "        else:", "            input_matrix = [[random.randint(-100, 100) for _ in range(72)]]", "            input_matrix = np.asmatrix(input_matrix)", "    ", ">       assert submatrix_with_n_numbers(input_matrix) == 1"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/tests58_49_5.py", "lineno": 38, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return sum((1 for row in range(len(matrix[0])) if np.sum(matrix[row] == 1, axis=1) == 72))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/generated_answer.py", "lineno": 5, "message": "in submatrix_with_n_numbers"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return sum((1 for row in range(len(matrix[0])) if np.sum(matrix[row] == 1, axis=1) == 72))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q58/command_results_5/Folder_49/generated_answer.py", "lineno": 5, "message": "in <genexpr>"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _wrapreduction(a, np.add, 'sum', axis, dtype, out, keepdims=keepdims,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 2313, "message": "in sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _wrapreduction(obj, ufunc, method, axis, dtype, out, **kwargs):", "        passkwargs = {k: v for k, v in kwargs.items()", "                      if v is not np._NoValue}", "    ", "        if type(obj) is not mu.ndarray:", "            try:", "                reduction = getattr(obj, method)", "            except AttributeError:", "                pass", "            else:", "                # This branch is needed for reductions like any which don't", "                # support a dtype.", "                if dtype is not None:", "                    return reduction(axis=axis, dtype=dtype, out=out, **passkwargs)", "                else:", "                    return reduction(axis=axis, out=out, **passkwargs)", "    ", ">       return ufunc.reduce(obj, axis, dtype, out, **passkwargs)", "E       numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1"], "reprfuncargs": {"args": [["obj", "array([False, False])"], ["ufunc", "<ufunc 'add'>"], ["method", "'sum'"], ["axis", "1"], ["dtype", "None"], ["out", "None"], ["kwargs", "{'initial': <no value>, 'keepdims': <no value>, 'where': <no value>}"], ["passkwargs", "{}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 88, "message": "AxisError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/fromnumeric.py", "lineno": 88, "message": "numpy.exceptions.AxisError: axis 1 is out of bounds for array of dimension 1"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00032509397715330124, "start": 1731153696.265587, "stop": 1731153696.2659128, "extras": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "ea543f17970c45299a1d3cf52ba2a3d6", "node": "<WorkerController gw1>"}
{"nodeid": "tests58_49_5.py::test_matrix_of_having_72_integers", "location": ["tests58_49_5.py", 28, "test_matrix_of_having_72_integers"], "keywords": {"test_matrix_of_having_72_integers": 1, "__wrapped__": 1, "tests58_49_5.py": 1, "Folder_49": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0001881360076367855, "start": 1731153696.2930007, "stop": 1731153696.29319, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "ea543f17970c45299a1d3cf52ba2a3d6", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
