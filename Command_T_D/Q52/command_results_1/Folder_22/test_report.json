{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests52_22_1.py::test_string_of_spaces_and_letters", "location": ["tests52_22_1.py", 16, "test_string_of_spaces_and_letters"], "keywords": {"test_string_of_spaces_and_letters": 1, "tests52_22_1.py": 1, "Folder_22": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011958694085478783, "start": 1731135108.9590843, "stop": 1731135108.9592044, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "f30c6f37622949d3a0e16f38bb1ec0cf", "node": "<WorkerController gw2>"}
{"nodeid": "tests52_22_1.py::test_string_of_identical_nums", "location": ["tests52_22_1.py", 26, "test_string_of_identical_nums"], "keywords": {"test_string_of_identical_nums": 1, "tests52_22_1.py": 1, "Folder_22": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001211799681186676, "start": 1731135108.959006, "stop": 1731135108.9591272, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw1", "testrun_uid": "f30c6f37622949d3a0e16f38bb1ec0cf", "node": "<WorkerController gw1>"}
{"nodeid": "tests52_22_1.py::test_string_of_many_chars", "location": ["tests52_22_1.py", 6, "test_string_of_many_chars"], "keywords": {"test_string_of_many_chars": 1, "tests52_22_1.py": 1, "Folder_22": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00014841207303106785, "start": 1731135108.9590871, "stop": 1731135108.9592364, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "f30c6f37622949d3a0e16f38bb1ec0cf", "node": "<WorkerController gw0>"}
{"nodeid": "tests52_22_1.py::test_string_of_spaces_and_letters", "location": ["tests52_22_1.py", 16, "test_string_of_spaces_and_letters"], "keywords": {"test_string_of_spaces_and_letters": 1, "tests52_22_1.py": 1, "Folder_22": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "re.error: invalid group reference 2 at position 30"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces_and_letters():", "        s = 'a a' * (20 * 2)", ">       assert not palindrome_of_length_n(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q52/command_results_1/Folder_22/tests52_22_1.py", "lineno": 19, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('(?i)(?=.*[a-z])(.)(?=.*[a-z])\\\\2(?i)(?=.*[a-z])(.)(?=.*[a-z])\\\\1', s))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q52/command_results_1/Folder_22/generated_answer.py", "lineno": 4, "message": "in palindrome_of_length_n"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 544, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}')) from None", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 2 at position 30"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x72ec9f56eb70>"], ["escape", "'\\\\2'"], ["state", "<re._parser.State object at 0x72ec9f56ef60>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces_and_letters():", "        s = 'a a' * (20 * 2)", ">       assert not palindrome_of_length_n(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q52/command_results_1/Folder_22/tests52_22_1.py", "lineno": 19, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('(?i)(?=.*[a-z])(.)(?=.*[a-z])\\\\2(?i)(?=.*[a-z])(.)(?=.*[a-z])\\\\1', s))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q52/command_results_1/Folder_22/generated_answer.py", "lineno": 4, "message": "in palindrome_of_length_n"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 544, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}')) from None", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 2 at position 30"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x72ec9f56eb70>"], ["escape", "'\\\\2'"], ["state", "<re._parser.State object at 0x72ec9f56ef60>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "re.error: invalid group reference 2 at position 30"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00018348696175962687, "start": 1731135108.9593883, "stop": 1731135108.959572, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "f30c6f37622949d3a0e16f38bb1ec0cf", "node": "<WorkerController gw2>"}
{"nodeid": "tests52_22_1.py::test_string_of_spaces_and_letters", "location": ["tests52_22_1.py", 16, "test_string_of_spaces_and_letters"], "keywords": {"test_string_of_spaces_and_letters": 1, "tests52_22_1.py": 1, "Folder_22": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00013349298387765884, "start": 1731135108.9983034, "stop": 1731135108.9984381, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "f30c6f37622949d3a0e16f38bb1ec0cf", "node": "<WorkerController gw2>"}
{"nodeid": "tests52_22_1.py::test_string_of_identical_nums", "location": ["tests52_22_1.py", 26, "test_string_of_identical_nums"], "keywords": {"test_string_of_identical_nums": 1, "tests52_22_1.py": 1, "Folder_22": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "re.error: invalid group reference 2 at position 30"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_identical_nums():", "        s = '0' * (20 * 2)", ">       assert not palindrome_of_length_n(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q52/command_results_1/Folder_22/tests52_22_1.py", "lineno": 29, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('(?i)(?=.*[a-z])(.)(?=.*[a-z])\\\\2(?i)(?=.*[a-z])(.)(?=.*[a-z])\\\\1', s))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q52/command_results_1/Folder_22/generated_answer.py", "lineno": 4, "message": "in palindrome_of_length_n"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 544, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}')) from None", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 2 at position 30"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x78e347be5040>"], ["escape", "'\\\\2'"], ["state", "<re._parser.State object at 0x78e34c208a70>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_identical_nums():", "        s = '0' * (20 * 2)", ">       assert not palindrome_of_length_n(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q52/command_results_1/Folder_22/tests52_22_1.py", "lineno": 29, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('(?i)(?=.*[a-z])(.)(?=.*[a-z])\\\\2(?i)(?=.*[a-z])(.)(?=.*[a-z])\\\\1', s))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q52/command_results_1/Folder_22/generated_answer.py", "lineno": 4, "message": "in palindrome_of_length_n"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 544, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}')) from None", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 2 at position 30"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x78e347be5040>"], ["escape", "'\\\\2'"], ["state", "<re._parser.State object at 0x78e34c208a70>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "re.error: invalid group reference 2 at position 30"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00019824202172458172, "start": 1731135108.959332, "stop": 1731135108.9595308, "extras": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw1", "testrun_uid": "f30c6f37622949d3a0e16f38bb1ec0cf", "node": "<WorkerController gw1>"}
{"nodeid": "tests52_22_1.py::test_string_of_identical_nums", "location": ["tests52_22_1.py", 26, "test_string_of_identical_nums"], "keywords": {"test_string_of_identical_nums": 1, "tests52_22_1.py": 1, "Folder_22": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00011745002120733261, "start": 1731135109.0018466, "stop": 1731135109.0019646, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw1", "testrun_uid": "f30c6f37622949d3a0e16f38bb1ec0cf", "node": "<WorkerController gw1>"}
{"nodeid": "tests52_22_1.py::test_string_of_many_chars", "location": ["tests52_22_1.py", 6, "test_string_of_many_chars"], "keywords": {"test_string_of_many_chars": 1, "tests52_22_1.py": 1, "Folder_22": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "re.error: invalid group reference 2 at position 30"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_many_chars():", "        s = 'abcdef'", ">       assert not palindrome_of_length_n(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q52/command_results_1/Folder_22/tests52_22_1.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('(?i)(?=.*[a-z])(.)(?=.*[a-z])\\\\2(?i)(?=.*[a-z])(.)(?=.*[a-z])\\\\1', s))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q52/command_results_1/Folder_22/generated_answer.py", "lineno": 4, "message": "in palindrome_of_length_n"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 544, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}')) from None", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 2 at position 30"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7b7c239146e0>"], ["escape", "'\\\\2'"], ["state", "<re._parser.State object at 0x7b7c239170e0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_many_chars():", "        s = 'abcdef'", ">       assert not palindrome_of_length_n(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q52/command_results_1/Folder_22/tests52_22_1.py", "lineno": 9, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('(?i)(?=.*[a-z])(.)(?=.*[a-z])\\\\2(?i)(?=.*[a-z])(.)(?=.*[a-z])\\\\1', s))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q52/command_results_1/Folder_22/generated_answer.py", "lineno": 4, "message": "in palindrome_of_length_n"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 544, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}')) from None", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 2 at position 30"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7b7c239146e0>"], ["escape", "'\\\\2'"], ["state", "<re._parser.State object at 0x7b7c239170e0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "re.error: invalid group reference 2 at position 30"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00021597393788397312, "start": 1731135108.9594574, "stop": 1731135108.959674, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "f30c6f37622949d3a0e16f38bb1ec0cf", "node": "<WorkerController gw0>"}
{"nodeid": "tests52_22_1.py::test_string_of_many_chars", "location": ["tests52_22_1.py", 6, "test_string_of_many_chars"], "keywords": {"test_string_of_many_chars": 1, "tests52_22_1.py": 1, "Folder_22": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00011861196253448725, "start": 1731135109.0240428, "stop": 1731135109.024162, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "f30c6f37622949d3a0e16f38bb1ec0cf", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
