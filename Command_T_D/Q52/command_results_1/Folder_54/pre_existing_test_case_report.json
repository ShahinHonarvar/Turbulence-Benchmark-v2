{
  "parameter(s)": [
    85
  ],
  "test_string_of_many_chars": [
    "passed",
    "",
    0.00013
  ],
  "test_string_of_spaces_and_letters": [
    "failed",
    "AssertionError: assert not ['a', 'a', 'a', 'a', 'a', 'a', ...]\n +  where ['a', 'a', 'a', 'a', 'a', 'a', ...] = palindrome_of_length_n('a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a')",
    0.00038
  ],
  "test_string_of_identical_nums": [
    "failed",
    "AssertionError: assert not ['0', '0', '0', '0', '0', '0', ...]\n +  where ['0', '0', '0', '0', '0', '0', ...] = palindrome_of_length_n('00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')",
    0.00022
  ],
  "test_string_of_spaces": [
    "failed",
    "AssertionError: assert not [' ', ' ', ' ', ' ', ' ', ' ', ...]\n +  where [' ', ' ', ' ', ' ', ' ', ' ', ...] = palindrome_of_length_n('                                                                                                                                                                          ')",
    0.00014
  ]
}