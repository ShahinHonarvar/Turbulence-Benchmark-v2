{
  "parameter(s)": [
    92
  ],
  "test_string_of_identical_nums": [
    "failed",
    "AssertionError: assert not {''}\n +  where {''} = palindrome_of_length_n('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')",
    0.00019
  ],
  "test_string_of_spaces_and_letters": [
    "failed",
    "AssertionError: assert not {''}\n +  where {''} = palindrome_of_length_n('a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a')",
    0.00028
  ],
  "test_string_of_many_chars": [
    "failed",
    "AssertionError: assert not {''}\n +  where {''} = palindrome_of_length_n('abcdef')",
    0.00028
  ]
}