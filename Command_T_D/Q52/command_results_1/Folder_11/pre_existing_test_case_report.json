{
  "parameter(s)": [
    77
  ],
  "test_string_of_identical_nums": [
    "failed",
    "AssertionError: assert not {'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'}\n +  where {'0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'} = palindrome_of_length_n('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')",
    0.00016
  ],
  "test_string_of_spaces_and_letters": [
    "failed",
    "AssertionError: assert not {'a', 'aa'}\n +  where {'a', 'aa'} = palindrome_of_length_n('a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a')",
    0.00023
  ],
  "test_string_of_many_chars": [
    "failed",
    "AssertionError: assert not {'abcdef'}\n +  where {'abcdef'} = palindrome_of_length_n('abcdef')",
    0.00023
  ]
}