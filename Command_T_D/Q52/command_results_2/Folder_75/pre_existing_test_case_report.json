{
  "parameter(s)": [
    80
  ],
  "test_string_of_identical_nums": [
    "failed",
    "AssertionError: assert not {''}\n +  where {''} = palindrome_of_length_n('0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')",
    0.00161
  ],
  "test_string_of_spaces_and_letters": [
    "failed",
    "AssertionError: assert not {'aa', 'aaaa', 'aaaaaa', 'aaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaaa', ...}\n +  where {'aa', 'aaaa', 'aaaaaa', 'aaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaaa', ...} = palindrome_of_length_n('a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a')",
    0.0195
  ],
  "test_string_of_many_chars": [
    "failed",
    "AssertionError: assert not {'abc', 'abcbcd', 'abcbcdcde', 'abcbcdcdedef', 'abcbcdcdedefef', 'abcbcdcdedefeff'}\n +  where {'abc', 'abcbcd', 'abcbcdcde', 'abcbcdcdedef', 'abcbcdcdedefef', 'abcbcdcdedefeff'} = palindrome_of_length_n('abcdef')",
    0.00029
  ]
}