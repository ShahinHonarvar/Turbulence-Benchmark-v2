{
  "parameter(s)": [
    72
  ],
  "test_string_of_many_chars": [
    "passed",
    "",
    0.00015
  ],
  "test_string_of_identical_nums": [
    "failed",
    "AssertionError: assert not {0, 1, 2, 3, 4, 5, ...}\n +  where {0, 1, 2, 3, 4, 5, ...} = palindrome_of_length_n('000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000')",
    0.00017
  ],
  "test_string_of_spaces_and_letters": [
    "failed",
    "AssertionError: assert not {0, 3, 6, 9, 12, 15, ...}\n +  where {0, 3, 6, 9, 12, 15, ...} = palindrome_of_length_n('a aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa a')",
    0.00034
  ],
  "test_string_of_spaces": [
    "failed",
    "AssertionError: assert not {0, 1, 2, 3, 4, 5, ...}\n +  where {0, 1, 2, 3, 4, 5, ...} = palindrome_of_length_n('                                                                                                                                                ')",
    0.00018
  ]
}