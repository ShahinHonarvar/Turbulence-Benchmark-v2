{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests47_20_3.py::test_string_of_distinct_chars", "location": ["tests47_20_3.py", 17, "test_string_of_distinct_chars"], "keywords": {"test_string_of_distinct_chars": 1, "tests47_20_3.py": 1, "Folder_20": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011878192890435457, "start": 1731127084.9741597, "stop": 1731127084.9742787, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "4e38a7c6392e4dc99d446fc06884b20b", "node": "<WorkerController gw1>"}
{"nodeid": "tests47_20_3.py::test_string_of_spaces_and_letters", "location": ["tests47_20_3.py", 27, "test_string_of_spaces_and_letters"], "keywords": {"test_string_of_spaces_and_letters": 1, "tests47_20_3.py": 1, "Folder_20": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001422680215910077, "start": 1731127084.9742377, "stop": 1731127084.9743805, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "4e38a7c6392e4dc99d446fc06884b20b", "node": "<WorkerController gw2>"}
{"nodeid": "tests47_20_3.py::test_string_of_similar_chars", "location": ["tests47_20_3.py", 3, "test_string_of_similar_chars"], "keywords": {"test_string_of_similar_chars": 1, "tests47_20_3.py": 1, "Folder_20": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00012151198461651802, "start": 1731127084.9741712, "stop": 1731127084.974293, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "4e38a7c6392e4dc99d446fc06884b20b", "node": "<WorkerController gw0>"}
{"nodeid": "tests47_20_3.py::test_string_of_similar_chars", "location": ["tests47_20_3.py", 3, "test_string_of_similar_chars"], "keywords": {"test_string_of_similar_chars": 1, "tests47_20_3.py": 1, "Folder_20": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 840, "message": "re.error: global flags not at the start of the expression at position 12"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_similar_chars():", "        n = max(74, 42)", "        m = min(74 - 20 + 1, 42)", "        s = ''.join('a' for _ in range(n * 2))", ">       assert palindromes_of_specific_lengths(s) == {'a' * i for i in range(36, m + 1)}"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_20/tests47_20_3.py", "lineno": 8, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{36,42}(?i)', s[20:-20]))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_20/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        setappend((RANGE, (lo, hi)))", "                    else:", "                        if code1[0] is IN:", "                            code1 = code1[1][0]", "                        setappend(code1)", "    ", "                set = _uniq(set)", "                # XXX: <fl> should move set optimization to compiler!", "                if _len(set) == 1 and set[0][0] is LITERAL:", "                    # optimization", "                    if negate:", "                        subpatternappend((NOT_LITERAL, set[0][1]))", "                    else:", "                        subpatternappend(set[0])", "                else:", "                    if negate:", "                        set.insert(0, (NEGATE, None))", "                    # charmap optimization can't be added here because", "                    # global flags still are not known", "                    subpatternappend((IN, set))", "    ", "            elif this in REPEAT_CHARS:", "                # repeat previous item", "                here = source.tell()", "                if this == \"?\":", "                    min, max = 0, 1", "                elif this == \"*\":", "                    min, max = 0, MAXREPEAT", "    ", "                elif this == \"+\":", "                    min, max = 1, MAXREPEAT", "                elif this == \"{\":", "                    if source.next == \"}\":", "                        subpatternappend((LITERAL, _ord(this)))", "                        continue", "    ", "                    min, max = 0, MAXREPEAT", "                    lo = hi = \"\"", "                    while source.next in DIGITS:", "                        lo += sourceget()", "                    if sourcematch(\",\"):", "                        while source.next in DIGITS:", "                            hi += sourceget()", "                    else:", "                        hi = lo", "                    if not sourcematch(\"}\"):", "                        subpatternappend((LITERAL, _ord(this)))", "                        source.seek(here)", "                        continue", "    ", "                    if lo:", "                        min = int(lo)", "                        if min >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                    if hi:", "                        max = int(hi)", "                        if max >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                        if max < min:", "                            raise source.error(\"min repeat greater than max repeat\",", "                                               source.tell() - here)", "                else:", "                    raise AssertionError(\"unsupported quantifier %r\" % (char,))", "                # figure out which item to repeat", "                if subpattern:", "                    item = subpattern[-1:]", "                else:", "                    item = None", "                if not item or item[0][0] is AT:", "                    raise source.error(\"nothing to repeat\",", "                                       source.tell() - here + len(this))", "                if item[0][0] in _REPEATCODES:", "                    raise source.error(\"multiple repeat\",", "                                       source.tell() - here + len(this))", "                if item[0][0] is SUBPATTERN:", "                    group, add_flags, del_flags, p = item[0][1]", "                    if group is None and not add_flags and not del_flags:", "                        item = p", "                if sourcematch(\"?\"):", "                    # Non-Greedy Match", "                    subpattern[-1] = (MIN_REPEAT, (min, max, item))", "                elif sourcematch(\"+\"):", "                    # Possessive Match (Always Greedy)", "                    subpattern[-1] = (POSSESSIVE_REPEAT, (min, max, item))", "                else:", "                    # Greedy Match", "                    subpattern[-1] = (MAX_REPEAT, (min, max, item))", "    ", "            elif this == \".\":", "                subpatternappend((ANY, None))", "    ", "            elif this == \"(\":", "                start = source.tell() - 1", "                capture = True", "                atomic = False", "                name = None", "                add_flags = 0", "                del_flags = 0", "                if sourcematch(\"?\"):", "                    # options", "                    char = sourceget()", "                    if char is None:", "                        raise source.error(\"unexpected end of pattern\")", "                    if char == \"P\":", "                        # python extensions", "                        if sourcematch(\"<\"):", "                            # named group: skip forward to end of name", "                            name = source.getuntil(\">\", \"group name\")", "                            source.checkgroupname(name, 1)", "                        elif sourcematch(\"=\"):", "                            # named backreference", "                            name = source.getuntil(\")\", \"group name\")", "                            source.checkgroupname(name, 1)", "                            gid = state.groupdict.get(name)", "                            if gid is None:", "                                msg = \"unknown group name %r\" % name", "                                raise source.error(msg, len(name) + 1)", "                            if not state.checkgroup(gid):", "                                raise source.error(\"cannot refer to an open group\",", "                                                   len(name) + 1)", "                            state.checklookbehindgroup(gid, source)", "                            subpatternappend((GROUPREF, gid))", "                            continue", "    ", "                        else:", "                            char = sourceget()", "                            if char is None:", "                                raise source.error(\"unexpected end of pattern\")", "                            raise source.error(\"unknown extension ?P\" + char,", "                                               len(char) + 2)", "                    elif char == \":\":", "                        # non-capturing group", "                        capture = False", "                    elif char == \"#\":", "                        # comment", "                        while True:", "                            if source.next is None:", "                                raise source.error(\"missing ), unterminated comment\",", "                                                   source.tell() - start)", "                            if sourceget() == \")\":", "                                break", "                        continue", "    ", "                    elif char in \"=!<\":", "                        # lookahead assertions", "                        dir = 1", "                        if char == \"<\":", "                            char = sourceget()", "                            if char is None:", "                                raise source.error(\"unexpected end of pattern\")", "                            if char not in \"=!\":", "                                raise source.error(\"unknown extension ?<\" + char,", "                                                   len(char) + 2)", "                            dir = -1 # lookbehind", "                            lookbehindgroups = state.lookbehindgroups", "                            if lookbehindgroups is None:", "                                state.lookbehindgroups = state.groups", "                        p = _parse_sub(source, state, verbose, nested + 1)", "                        if dir < 0:", "                            if lookbehindgroups is None:", "                                state.lookbehindgroups = None", "                        if not sourcematch(\")\"):", "                            raise source.error(\"missing ), unterminated subpattern\",", "                                               source.tell() - start)", "                        if char == \"=\":", "                            subpatternappend((ASSERT, (dir, p)))", "                        else:", "                            subpatternappend((ASSERT_NOT, (dir, p)))", "                        continue", "    ", "                    elif char == \"(\":", "                        # conditional backreference group", "                        condname = source.getuntil(\")\", \"group name\")", "                        if not (condname.isdecimal() and condname.isascii()):", "                            source.checkgroupname(condname, 1)", "                            condgroup = state.groupdict.get(condname)", "                            if condgroup is None:", "                                msg = \"unknown group name %r\" % condname", "                                raise source.error(msg, len(condname) + 1)", "                        else:", "                            condgroup = int(condname)", "                            if not condgroup:", "                                raise source.error(\"bad group number\",", "                                                   len(condname) + 1)", "                            if condgroup >= MAXGROUPS:", "                                msg = \"invalid group reference %d\" % condgroup", "                                raise source.error(msg, len(condname) + 1)", "                            if condgroup not in state.grouprefpos:", "                                state.grouprefpos[condgroup] = (", "                                    source.tell() - len(condname) - 1", "                                )", "                            if not (condname.isdecimal() and condname.isascii()):", "                                import warnings", "                                warnings.warn(", "                                    \"bad character in group name %s at position %d\" %", "                                    (repr(condname) if source.istext else ascii(condname),", "                                     source.tell() - len(condname) - 1),", "                                    DeprecationWarning, stacklevel=nested + 6", "                                )", "                        state.checklookbehindgroup(condgroup, source)", "                        item_yes = _parse(source, state, verbose, nested + 1)", "                        if source.match(\"|\"):", "                            item_no = _parse(source, state, verbose, nested + 1)", "                            if source.next == \"|\":", "                                raise source.error(\"conditional backref with more than two branches\")", "                        else:", "                            item_no = None", "                        if not source.match(\")\"):", "                            raise source.error(\"missing ), unterminated subpattern\",", "                                               source.tell() - start)", "                        subpatternappend((GROUPREF_EXISTS, (condgroup, item_yes, item_no)))", "                        continue", "    ", "                    elif char == \">\":", "                        # non-capturing, atomic group", "                        capture = False", "                        atomic = True", "                    elif char in FLAGS or char == \"-\":", "                        # flags", "                        flags = _parse_flags(source, state, char)", "                        if flags is None:  # global flags", "                            if not first or subpattern:", ">                               raise source.error('global flags not at the start '", "                                                   'of the expression',", "                                                   source.tell() - start)", "E                               re.error: global flags not at the start of the expression at position 12"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x71a00316a0f0>"], ["state", "<re._parser.State object at 0x71a003760ad0>"], ["verbose", "0"], ["nested", "1"], ["first", "True"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 840, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_similar_chars():", "        n = max(74, 42)", "        m = min(74 - 20 + 1, 42)", "        s = ''.join('a' for _ in range(n * 2))", ">       assert palindromes_of_specific_lengths(s) == {'a' * i for i in range(36, m + 1)}"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_20/tests47_20_3.py", "lineno": 8, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{36,42}(?i)', s[20:-20]))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_20/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        setappend((RANGE, (lo, hi)))", "                    else:", "                        if code1[0] is IN:", "                            code1 = code1[1][0]", "                        setappend(code1)", "    ", "                set = _uniq(set)", "                # XXX: <fl> should move set optimization to compiler!", "                if _len(set) == 1 and set[0][0] is LITERAL:", "                    # optimization", "                    if negate:", "                        subpatternappend((NOT_LITERAL, set[0][1]))", "                    else:", "                        subpatternappend(set[0])", "                else:", "                    if negate:", "                        set.insert(0, (NEGATE, None))", "                    # charmap optimization can't be added here because", "                    # global flags still are not known", "                    subpatternappend((IN, set))", "    ", "            elif this in REPEAT_CHARS:", "                # repeat previous item", "                here = source.tell()", "                if this == \"?\":", "                    min, max = 0, 1", "                elif this == \"*\":", "                    min, max = 0, MAXREPEAT", "    ", "                elif this == \"+\":", "                    min, max = 1, MAXREPEAT", "                elif this == \"{\":", "                    if source.next == \"}\":", "                        subpatternappend((LITERAL, _ord(this)))", "                        continue", "    ", "                    min, max = 0, MAXREPEAT", "                    lo = hi = \"\"", "                    while source.next in DIGITS:", "                        lo += sourceget()", "                    if sourcematch(\",\"):", "                        while source.next in DIGITS:", "                            hi += sourceget()", "                    else:", "                        hi = lo", "                    if not sourcematch(\"}\"):", "                        subpatternappend((LITERAL, _ord(this)))", "                        source.seek(here)", "                        continue", "    ", "                    if lo:", "                        min = int(lo)", "                        if min >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                    if hi:", "                        max = int(hi)", "                        if max >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                        if max < min:", "                            raise source.error(\"min repeat greater than max repeat\",", "                                               source.tell() - here)", "                else:", "                    raise AssertionError(\"unsupported quantifier %r\" % (char,))", "                # figure out which item to repeat", "                if subpattern:", "                    item = subpattern[-1:]", "                else:", "                    item = None", "                if not item or item[0][0] is AT:", "                    raise source.error(\"nothing to repeat\",", "                                       source.tell() - here + len(this))", "                if item[0][0] in _REPEATCODES:", "                    raise source.error(\"multiple repeat\",", "                                       source.tell() - here + len(this))", "                if item[0][0] is SUBPATTERN:", "                    group, add_flags, del_flags, p = item[0][1]", "                    if group is None and not add_flags and not del_flags:", "                        item = p", "                if sourcematch(\"?\"):", "                    # Non-Greedy Match", "                    subpattern[-1] = (MIN_REPEAT, (min, max, item))", "                elif sourcematch(\"+\"):", "                    # Possessive Match (Always Greedy)", "                    subpattern[-1] = (POSSESSIVE_REPEAT, (min, max, item))", "                else:", "                    # Greedy Match", "                    subpattern[-1] = (MAX_REPEAT, (min, max, item))", "    ", "            elif this == \".\":", "                subpatternappend((ANY, None))", "    ", "            elif this == \"(\":", "                start = source.tell() - 1", "                capture = True", "                atomic = False", "                name = None", "                add_flags = 0", "                del_flags = 0", "                if sourcematch(\"?\"):", "                    # options", "                    char = sourceget()", "                    if char is None:", "                        raise source.error(\"unexpected end of pattern\")", "                    if char == \"P\":", "                        # python extensions", "                        if sourcematch(\"<\"):", "                            # named group: skip forward to end of name", "                            name = source.getuntil(\">\", \"group name\")", "                            source.checkgroupname(name, 1)", "                        elif sourcematch(\"=\"):", "                            # named backreference", "                            name = source.getuntil(\")\", \"group name\")", "                            source.checkgroupname(name, 1)", "                            gid = state.groupdict.get(name)", "                            if gid is None:", "                                msg = \"unknown group name %r\" % name", "                                raise source.error(msg, len(name) + 1)", "                            if not state.checkgroup(gid):", "                                raise source.error(\"cannot refer to an open group\",", "                                                   len(name) + 1)", "                            state.checklookbehindgroup(gid, source)", "                            subpatternappend((GROUPREF, gid))", "                            continue", "    ", "                        else:", "                            char = sourceget()", "                            if char is None:", "                                raise source.error(\"unexpected end of pattern\")", "                            raise source.error(\"unknown extension ?P\" + char,", "                                               len(char) + 2)", "                    elif char == \":\":", "                        # non-capturing group", "                        capture = False", "                    elif char == \"#\":", "                        # comment", "                        while True:", "                            if source.next is None:", "                                raise source.error(\"missing ), unterminated comment\",", "                                                   source.tell() - start)", "                            if sourceget() == \")\":", "                                break", "                        continue", "    ", "                    elif char in \"=!<\":", "                        # lookahead assertions", "                        dir = 1", "                        if char == \"<\":", "                            char = sourceget()", "                            if char is None:", "                                raise source.error(\"unexpected end of pattern\")", "                            if char not in \"=!\":", "                                raise source.error(\"unknown extension ?<\" + char,", "                                                   len(char) + 2)", "                            dir = -1 # lookbehind", "                            lookbehindgroups = state.lookbehindgroups", "                            if lookbehindgroups is None:", "                                state.lookbehindgroups = state.groups", "                        p = _parse_sub(source, state, verbose, nested + 1)", "                        if dir < 0:", "                            if lookbehindgroups is None:", "                                state.lookbehindgroups = None", "                        if not sourcematch(\")\"):", "                            raise source.error(\"missing ), unterminated subpattern\",", "                                               source.tell() - start)", "                        if char == \"=\":", "                            subpatternappend((ASSERT, (dir, p)))", "                        else:", "                            subpatternappend((ASSERT_NOT, (dir, p)))", "                        continue", "    ", "                    elif char == \"(\":", "                        # conditional backreference group", "                        condname = source.getuntil(\")\", \"group name\")", "                        if not (condname.isdecimal() and condname.isascii()):", "                            source.checkgroupname(condname, 1)", "                            condgroup = state.groupdict.get(condname)", "                            if condgroup is None:", "                                msg = \"unknown group name %r\" % condname", "                                raise source.error(msg, len(condname) + 1)", "                        else:", "                            condgroup = int(condname)", "                            if not condgroup:", "                                raise source.error(\"bad group number\",", "                                                   len(condname) + 1)", "                            if condgroup >= MAXGROUPS:", "                                msg = \"invalid group reference %d\" % condgroup", "                                raise source.error(msg, len(condname) + 1)", "                            if condgroup not in state.grouprefpos:", "                                state.grouprefpos[condgroup] = (", "                                    source.tell() - len(condname) - 1", "                                )", "                            if not (condname.isdecimal() and condname.isascii()):", "                                import warnings", "                                warnings.warn(", "                                    \"bad character in group name %s at position %d\" %", "                                    (repr(condname) if source.istext else ascii(condname),", "                                     source.tell() - len(condname) - 1),", "                                    DeprecationWarning, stacklevel=nested + 6", "                                )", "                        state.checklookbehindgroup(condgroup, source)", "                        item_yes = _parse(source, state, verbose, nested + 1)", "                        if source.match(\"|\"):", "                            item_no = _parse(source, state, verbose, nested + 1)", "                            if source.next == \"|\":", "                                raise source.error(\"conditional backref with more than two branches\")", "                        else:", "                            item_no = None", "                        if not source.match(\")\"):", "                            raise source.error(\"missing ), unterminated subpattern\",", "                                               source.tell() - start)", "                        subpatternappend((GROUPREF_EXISTS, (condgroup, item_yes, item_no)))", "                        continue", "    ", "                    elif char == \">\":", "                        # non-capturing, atomic group", "                        capture = False", "                        atomic = True", "                    elif char in FLAGS or char == \"-\":", "                        # flags", "                        flags = _parse_flags(source, state, char)", "                        if flags is None:  # global flags", "                            if not first or subpattern:", ">                               raise source.error('global flags not at the start '", "                                                   'of the expression',", "                                                   source.tell() - start)", "E                               re.error: global flags not at the start of the expression at position 12"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x71a00316a0f0>"], ["state", "<re._parser.State object at 0x71a003760ad0>"], ["verbose", "0"], ["nested", "1"], ["first", "True"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 840, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 840, "message": "re.error: global flags not at the start of the expression at position 12"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00015709304716438055, "start": 1731127084.9744704, "stop": 1731127084.9746277, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "4e38a7c6392e4dc99d446fc06884b20b", "node": "<WorkerController gw0>"}
{"nodeid": "tests47_20_3.py::test_string_of_similar_chars", "location": ["tests47_20_3.py", 3, "test_string_of_similar_chars"], "keywords": {"test_string_of_similar_chars": 1, "tests47_20_3.py": 1, "Folder_20": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00010598206426948309, "start": 1731127085.0100293, "stop": 1731127085.0101361, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "4e38a7c6392e4dc99d446fc06884b20b", "node": "<WorkerController gw0>"}
{"nodeid": "tests47_20_3.py::test_string_of_spaces_and_letters", "location": ["tests47_20_3.py", 27, "test_string_of_spaces_and_letters"], "keywords": {"test_string_of_spaces_and_letters": 1, "tests47_20_3.py": 1, "Folder_20": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 840, "message": "re.error: global flags not at the start of the expression at position 12"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces_and_letters():", "        s = ' a ' * (74 * 3)", ">       assert not palindromes_of_specific_lengths(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_20/tests47_20_3.py", "lineno": 30, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{36,42}(?i)', s[20:-20]))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_20/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        setappend((RANGE, (lo, hi)))", "                    else:", "                        if code1[0] is IN:", "                            code1 = code1[1][0]", "                        setappend(code1)", "    ", "                set = _uniq(set)", "                # XXX: <fl> should move set optimization to compiler!", "                if _len(set) == 1 and set[0][0] is LITERAL:", "                    # optimization", "                    if negate:", "                        subpatternappend((NOT_LITERAL, set[0][1]))", "                    else:", "                        subpatternappend(set[0])", "                else:", "                    if negate:", "                        set.insert(0, (NEGATE, None))", "                    # charmap optimization can't be added here because", "                    # global flags still are not known", "                    subpatternappend((IN, set))", "    ", "            elif this in REPEAT_CHARS:", "                # repeat previous item", "                here = source.tell()", "                if this == \"?\":", "                    min, max = 0, 1", "                elif this == \"*\":", "                    min, max = 0, MAXREPEAT", "    ", "                elif this == \"+\":", "                    min, max = 1, MAXREPEAT", "                elif this == \"{\":", "                    if source.next == \"}\":", "                        subpatternappend((LITERAL, _ord(this)))", "                        continue", "    ", "                    min, max = 0, MAXREPEAT", "                    lo = hi = \"\"", "                    while source.next in DIGITS:", "                        lo += sourceget()", "                    if sourcematch(\",\"):", "                        while source.next in DIGITS:", "                            hi += sourceget()", "                    else:", "                        hi = lo", "                    if not sourcematch(\"}\"):", "                        subpatternappend((LITERAL, _ord(this)))", "                        source.seek(here)", "                        continue", "    ", "                    if lo:", "                        min = int(lo)", "                        if min >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                    if hi:", "                        max = int(hi)", "                        if max >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                        if max < min:", "                            raise source.error(\"min repeat greater than max repeat\",", "                                               source.tell() - here)", "                else:", "                    raise AssertionError(\"unsupported quantifier %r\" % (char,))", "                # figure out which item to repeat", "                if subpattern:", "                    item = subpattern[-1:]", "                else:", "                    item = None", "                if not item or item[0][0] is AT:", "                    raise source.error(\"nothing to repeat\",", "                                       source.tell() - here + len(this))", "                if item[0][0] in _REPEATCODES:", "                    raise source.error(\"multiple repeat\",", "                                       source.tell() - here + len(this))", "                if item[0][0] is SUBPATTERN:", "                    group, add_flags, del_flags, p = item[0][1]", "                    if group is None and not add_flags and not del_flags:", "                        item = p", "                if sourcematch(\"?\"):", "                    # Non-Greedy Match", "                    subpattern[-1] = (MIN_REPEAT, (min, max, item))", "                elif sourcematch(\"+\"):", "                    # Possessive Match (Always Greedy)", "                    subpattern[-1] = (POSSESSIVE_REPEAT, (min, max, item))", "                else:", "                    # Greedy Match", "                    subpattern[-1] = (MAX_REPEAT, (min, max, item))", "    ", "            elif this == \".\":", "                subpatternappend((ANY, None))", "    ", "            elif this == \"(\":", "                start = source.tell() - 1", "                capture = True", "                atomic = False", "                name = None", "                add_flags = 0", "                del_flags = 0", "                if sourcematch(\"?\"):", "                    # options", "                    char = sourceget()", "                    if char is None:", "                        raise source.error(\"unexpected end of pattern\")", "                    if char == \"P\":", "                        # python extensions", "                        if sourcematch(\"<\"):", "                            # named group: skip forward to end of name", "                            name = source.getuntil(\">\", \"group name\")", "                            source.checkgroupname(name, 1)", "                        elif sourcematch(\"=\"):", "                            # named backreference", "                            name = source.getuntil(\")\", \"group name\")", "                            source.checkgroupname(name, 1)", "                            gid = state.groupdict.get(name)", "                            if gid is None:", "                                msg = \"unknown group name %r\" % name", "                                raise source.error(msg, len(name) + 1)", "                            if not state.checkgroup(gid):", "                                raise source.error(\"cannot refer to an open group\",", "                                                   len(name) + 1)", "                            state.checklookbehindgroup(gid, source)", "                            subpatternappend((GROUPREF, gid))", "                            continue", "    ", "                        else:", "                            char = sourceget()", "                            if char is None:", "                                raise source.error(\"unexpected end of pattern\")", "                            raise source.error(\"unknown extension ?P\" + char,", "                                               len(char) + 2)", "                    elif char == \":\":", "                        # non-capturing group", "                        capture = False", "                    elif char == \"#\":", "                        # comment", "                        while True:", "                            if source.next is None:", "                                raise source.error(\"missing ), unterminated comment\",", "                                                   source.tell() - start)", "                            if sourceget() == \")\":", "                                break", "                        continue", "    ", "                    elif char in \"=!<\":", "                        # lookahead assertions", "                        dir = 1", "                        if char == \"<\":", "                            char = sourceget()", "                            if char is None:", "                                raise source.error(\"unexpected end of pattern\")", "                            if char not in \"=!\":", "                                raise source.error(\"unknown extension ?<\" + char,", "                                                   len(char) + 2)", "                            dir = -1 # lookbehind", "                            lookbehindgroups = state.lookbehindgroups", "                            if lookbehindgroups is None:", "                                state.lookbehindgroups = state.groups", "                        p = _parse_sub(source, state, verbose, nested + 1)", "                        if dir < 0:", "                            if lookbehindgroups is None:", "                                state.lookbehindgroups = None", "                        if not sourcematch(\")\"):", "                            raise source.error(\"missing ), unterminated subpattern\",", "                                               source.tell() - start)", "                        if char == \"=\":", "                            subpatternappend((ASSERT, (dir, p)))", "                        else:", "                            subpatternappend((ASSERT_NOT, (dir, p)))", "                        continue", "    ", "                    elif char == \"(\":", "                        # conditional backreference group", "                        condname = source.getuntil(\")\", \"group name\")", "                        if not (condname.isdecimal() and condname.isascii()):", "                            source.checkgroupname(condname, 1)", "                            condgroup = state.groupdict.get(condname)", "                            if condgroup is None:", "                                msg = \"unknown group name %r\" % condname", "                                raise source.error(msg, len(condname) + 1)", "                        else:", "                            condgroup = int(condname)", "                            if not condgroup:", "                                raise source.error(\"bad group number\",", "                                                   len(condname) + 1)", "                            if condgroup >= MAXGROUPS:", "                                msg = \"invalid group reference %d\" % condgroup", "                                raise source.error(msg, len(condname) + 1)", "                            if condgroup not in state.grouprefpos:", "                                state.grouprefpos[condgroup] = (", "                                    source.tell() - len(condname) - 1", "                                )", "                            if not (condname.isdecimal() and condname.isascii()):", "                                import warnings", "                                warnings.warn(", "                                    \"bad character in group name %s at position %d\" %", "                                    (repr(condname) if source.istext else ascii(condname),", "                                     source.tell() - len(condname) - 1),", "                                    DeprecationWarning, stacklevel=nested + 6", "                                )", "                        state.checklookbehindgroup(condgroup, source)", "                        item_yes = _parse(source, state, verbose, nested + 1)", "                        if source.match(\"|\"):", "                            item_no = _parse(source, state, verbose, nested + 1)", "                            if source.next == \"|\":", "                                raise source.error(\"conditional backref with more than two branches\")", "                        else:", "                            item_no = None", "                        if not source.match(\")\"):", "                            raise source.error(\"missing ), unterminated subpattern\",", "                                               source.tell() - start)", "                        subpatternappend((GROUPREF_EXISTS, (condgroup, item_yes, item_no)))", "                        continue", "    ", "                    elif char == \">\":", "                        # non-capturing, atomic group", "                        capture = False", "                        atomic = True", "                    elif char in FLAGS or char == \"-\":", "                        # flags", "                        flags = _parse_flags(source, state, char)", "                        if flags is None:  # global flags", "                            if not first or subpattern:", ">                               raise source.error('global flags not at the start '", "                                                   'of the expression',", "                                                   source.tell() - start)", "E                               re.error: global flags not at the start of the expression at position 12"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7c2a446a6600>"], ["state", "<re._parser.State object at 0x7c2a446a48f0>"], ["verbose", "0"], ["nested", "1"], ["first", "True"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 840, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces_and_letters():", "        s = ' a ' * (74 * 3)", ">       assert not palindromes_of_specific_lengths(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_20/tests47_20_3.py", "lineno": 30, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{36,42}(?i)', s[20:-20]))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_20/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        setappend((RANGE, (lo, hi)))", "                    else:", "                        if code1[0] is IN:", "                            code1 = code1[1][0]", "                        setappend(code1)", "    ", "                set = _uniq(set)", "                # XXX: <fl> should move set optimization to compiler!", "                if _len(set) == 1 and set[0][0] is LITERAL:", "                    # optimization", "                    if negate:", "                        subpatternappend((NOT_LITERAL, set[0][1]))", "                    else:", "                        subpatternappend(set[0])", "                else:", "                    if negate:", "                        set.insert(0, (NEGATE, None))", "                    # charmap optimization can't be added here because", "                    # global flags still are not known", "                    subpatternappend((IN, set))", "    ", "            elif this in REPEAT_CHARS:", "                # repeat previous item", "                here = source.tell()", "                if this == \"?\":", "                    min, max = 0, 1", "                elif this == \"*\":", "                    min, max = 0, MAXREPEAT", "    ", "                elif this == \"+\":", "                    min, max = 1, MAXREPEAT", "                elif this == \"{\":", "                    if source.next == \"}\":", "                        subpatternappend((LITERAL, _ord(this)))", "                        continue", "    ", "                    min, max = 0, MAXREPEAT", "                    lo = hi = \"\"", "                    while source.next in DIGITS:", "                        lo += sourceget()", "                    if sourcematch(\",\"):", "                        while source.next in DIGITS:", "                            hi += sourceget()", "                    else:", "                        hi = lo", "                    if not sourcematch(\"}\"):", "                        subpatternappend((LITERAL, _ord(this)))", "                        source.seek(here)", "                        continue", "    ", "                    if lo:", "                        min = int(lo)", "                        if min >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                    if hi:", "                        max = int(hi)", "                        if max >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                        if max < min:", "                            raise source.error(\"min repeat greater than max repeat\",", "                                               source.tell() - here)", "                else:", "                    raise AssertionError(\"unsupported quantifier %r\" % (char,))", "                # figure out which item to repeat", "                if subpattern:", "                    item = subpattern[-1:]", "                else:", "                    item = None", "                if not item or item[0][0] is AT:", "                    raise source.error(\"nothing to repeat\",", "                                       source.tell() - here + len(this))", "                if item[0][0] in _REPEATCODES:", "                    raise source.error(\"multiple repeat\",", "                                       source.tell() - here + len(this))", "                if item[0][0] is SUBPATTERN:", "                    group, add_flags, del_flags, p = item[0][1]", "                    if group is None and not add_flags and not del_flags:", "                        item = p", "                if sourcematch(\"?\"):", "                    # Non-Greedy Match", "                    subpattern[-1] = (MIN_REPEAT, (min, max, item))", "                elif sourcematch(\"+\"):", "                    # Possessive Match (Always Greedy)", "                    subpattern[-1] = (POSSESSIVE_REPEAT, (min, max, item))", "                else:", "                    # Greedy Match", "                    subpattern[-1] = (MAX_REPEAT, (min, max, item))", "    ", "            elif this == \".\":", "                subpatternappend((ANY, None))", "    ", "            elif this == \"(\":", "                start = source.tell() - 1", "                capture = True", "                atomic = False", "                name = None", "                add_flags = 0", "                del_flags = 0", "                if sourcematch(\"?\"):", "                    # options", "                    char = sourceget()", "                    if char is None:", "                        raise source.error(\"unexpected end of pattern\")", "                    if char == \"P\":", "                        # python extensions", "                        if sourcematch(\"<\"):", "                            # named group: skip forward to end of name", "                            name = source.getuntil(\">\", \"group name\")", "                            source.checkgroupname(name, 1)", "                        elif sourcematch(\"=\"):", "                            # named backreference", "                            name = source.getuntil(\")\", \"group name\")", "                            source.checkgroupname(name, 1)", "                            gid = state.groupdict.get(name)", "                            if gid is None:", "                                msg = \"unknown group name %r\" % name", "                                raise source.error(msg, len(name) + 1)", "                            if not state.checkgroup(gid):", "                                raise source.error(\"cannot refer to an open group\",", "                                                   len(name) + 1)", "                            state.checklookbehindgroup(gid, source)", "                            subpatternappend((GROUPREF, gid))", "                            continue", "    ", "                        else:", "                            char = sourceget()", "                            if char is None:", "                                raise source.error(\"unexpected end of pattern\")", "                            raise source.error(\"unknown extension ?P\" + char,", "                                               len(char) + 2)", "                    elif char == \":\":", "                        # non-capturing group", "                        capture = False", "                    elif char == \"#\":", "                        # comment", "                        while True:", "                            if source.next is None:", "                                raise source.error(\"missing ), unterminated comment\",", "                                                   source.tell() - start)", "                            if sourceget() == \")\":", "                                break", "                        continue", "    ", "                    elif char in \"=!<\":", "                        # lookahead assertions", "                        dir = 1", "                        if char == \"<\":", "                            char = sourceget()", "                            if char is None:", "                                raise source.error(\"unexpected end of pattern\")", "                            if char not in \"=!\":", "                                raise source.error(\"unknown extension ?<\" + char,", "                                                   len(char) + 2)", "                            dir = -1 # lookbehind", "                            lookbehindgroups = state.lookbehindgroups", "                            if lookbehindgroups is None:", "                                state.lookbehindgroups = state.groups", "                        p = _parse_sub(source, state, verbose, nested + 1)", "                        if dir < 0:", "                            if lookbehindgroups is None:", "                                state.lookbehindgroups = None", "                        if not sourcematch(\")\"):", "                            raise source.error(\"missing ), unterminated subpattern\",", "                                               source.tell() - start)", "                        if char == \"=\":", "                            subpatternappend((ASSERT, (dir, p)))", "                        else:", "                            subpatternappend((ASSERT_NOT, (dir, p)))", "                        continue", "    ", "                    elif char == \"(\":", "                        # conditional backreference group", "                        condname = source.getuntil(\")\", \"group name\")", "                        if not (condname.isdecimal() and condname.isascii()):", "                            source.checkgroupname(condname, 1)", "                            condgroup = state.groupdict.get(condname)", "                            if condgroup is None:", "                                msg = \"unknown group name %r\" % condname", "                                raise source.error(msg, len(condname) + 1)", "                        else:", "                            condgroup = int(condname)", "                            if not condgroup:", "                                raise source.error(\"bad group number\",", "                                                   len(condname) + 1)", "                            if condgroup >= MAXGROUPS:", "                                msg = \"invalid group reference %d\" % condgroup", "                                raise source.error(msg, len(condname) + 1)", "                            if condgroup not in state.grouprefpos:", "                                state.grouprefpos[condgroup] = (", "                                    source.tell() - len(condname) - 1", "                                )", "                            if not (condname.isdecimal() and condname.isascii()):", "                                import warnings", "                                warnings.warn(", "                                    \"bad character in group name %s at position %d\" %", "                                    (repr(condname) if source.istext else ascii(condname),", "                                     source.tell() - len(condname) - 1),", "                                    DeprecationWarning, stacklevel=nested + 6", "                                )", "                        state.checklookbehindgroup(condgroup, source)", "                        item_yes = _parse(source, state, verbose, nested + 1)", "                        if source.match(\"|\"):", "                            item_no = _parse(source, state, verbose, nested + 1)", "                            if source.next == \"|\":", "                                raise source.error(\"conditional backref with more than two branches\")", "                        else:", "                            item_no = None", "                        if not source.match(\")\"):", "                            raise source.error(\"missing ), unterminated subpattern\",", "                                               source.tell() - start)", "                        subpatternappend((GROUPREF_EXISTS, (condgroup, item_yes, item_no)))", "                        continue", "    ", "                    elif char == \">\":", "                        # non-capturing, atomic group", "                        capture = False", "                        atomic = True", "                    elif char in FLAGS or char == \"-\":", "                        # flags", "                        flags = _parse_flags(source, state, char)", "                        if flags is None:  # global flags", "                            if not first or subpattern:", ">                               raise source.error('global flags not at the start '", "                                                   'of the expression',", "                                                   source.tell() - start)", "E                               re.error: global flags not at the start of the expression at position 12"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7c2a446a6600>"], ["state", "<re._parser.State object at 0x7c2a446a48f0>"], ["verbose", "0"], ["nested", "1"], ["first", "True"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 840, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 840, "message": "re.error: global flags not at the start of the expression at position 12"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00022004905622452497, "start": 1731127084.9746122, "stop": 1731127084.974833, "extras": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "4e38a7c6392e4dc99d446fc06884b20b", "node": "<WorkerController gw2>"}
{"nodeid": "tests47_20_3.py::test_string_of_spaces_and_letters", "location": ["tests47_20_3.py", 27, "test_string_of_spaces_and_letters"], "keywords": {"test_string_of_spaces_and_letters": 1, "tests47_20_3.py": 1, "Folder_20": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00010087096597999334, "start": 1731127085.0133317, "stop": 1731127085.0134335, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "4e38a7c6392e4dc99d446fc06884b20b", "node": "<WorkerController gw2>"}
{"nodeid": "tests47_20_3.py::test_string_of_distinct_chars", "location": ["tests47_20_3.py", 17, "test_string_of_distinct_chars"], "keywords": {"test_string_of_distinct_chars": 1, "tests47_20_3.py": 1, "Folder_20": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 840, "message": "re.error: global flags not at the start of the expression at position 12"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_distinct_chars():", "        s = 'abc' * (74 * 3)", ">       assert not palindromes_of_specific_lengths(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_20/tests47_20_3.py", "lineno": 20, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{36,42}(?i)', s[20:-20]))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_20/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        setappend((RANGE, (lo, hi)))", "                    else:", "                        if code1[0] is IN:", "                            code1 = code1[1][0]", "                        setappend(code1)", "    ", "                set = _uniq(set)", "                # XXX: <fl> should move set optimization to compiler!", "                if _len(set) == 1 and set[0][0] is LITERAL:", "                    # optimization", "                    if negate:", "                        subpatternappend((NOT_LITERAL, set[0][1]))", "                    else:", "                        subpatternappend(set[0])", "                else:", "                    if negate:", "                        set.insert(0, (NEGATE, None))", "                    # charmap optimization can't be added here because", "                    # global flags still are not known", "                    subpatternappend((IN, set))", "    ", "            elif this in REPEAT_CHARS:", "                # repeat previous item", "                here = source.tell()", "                if this == \"?\":", "                    min, max = 0, 1", "                elif this == \"*\":", "                    min, max = 0, MAXREPEAT", "    ", "                elif this == \"+\":", "                    min, max = 1, MAXREPEAT", "                elif this == \"{\":", "                    if source.next == \"}\":", "                        subpatternappend((LITERAL, _ord(this)))", "                        continue", "    ", "                    min, max = 0, MAXREPEAT", "                    lo = hi = \"\"", "                    while source.next in DIGITS:", "                        lo += sourceget()", "                    if sourcematch(\",\"):", "                        while source.next in DIGITS:", "                            hi += sourceget()", "                    else:", "                        hi = lo", "                    if not sourcematch(\"}\"):", "                        subpatternappend((LITERAL, _ord(this)))", "                        source.seek(here)", "                        continue", "    ", "                    if lo:", "                        min = int(lo)", "                        if min >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                    if hi:", "                        max = int(hi)", "                        if max >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                        if max < min:", "                            raise source.error(\"min repeat greater than max repeat\",", "                                               source.tell() - here)", "                else:", "                    raise AssertionError(\"unsupported quantifier %r\" % (char,))", "                # figure out which item to repeat", "                if subpattern:", "                    item = subpattern[-1:]", "                else:", "                    item = None", "                if not item or item[0][0] is AT:", "                    raise source.error(\"nothing to repeat\",", "                                       source.tell() - here + len(this))", "                if item[0][0] in _REPEATCODES:", "                    raise source.error(\"multiple repeat\",", "                                       source.tell() - here + len(this))", "                if item[0][0] is SUBPATTERN:", "                    group, add_flags, del_flags, p = item[0][1]", "                    if group is None and not add_flags and not del_flags:", "                        item = p", "                if sourcematch(\"?\"):", "                    # Non-Greedy Match", "                    subpattern[-1] = (MIN_REPEAT, (min, max, item))", "                elif sourcematch(\"+\"):", "                    # Possessive Match (Always Greedy)", "                    subpattern[-1] = (POSSESSIVE_REPEAT, (min, max, item))", "                else:", "                    # Greedy Match", "                    subpattern[-1] = (MAX_REPEAT, (min, max, item))", "    ", "            elif this == \".\":", "                subpatternappend((ANY, None))", "    ", "            elif this == \"(\":", "                start = source.tell() - 1", "                capture = True", "                atomic = False", "                name = None", "                add_flags = 0", "                del_flags = 0", "                if sourcematch(\"?\"):", "                    # options", "                    char = sourceget()", "                    if char is None:", "                        raise source.error(\"unexpected end of pattern\")", "                    if char == \"P\":", "                        # python extensions", "                        if sourcematch(\"<\"):", "                            # named group: skip forward to end of name", "                            name = source.getuntil(\">\", \"group name\")", "                            source.checkgroupname(name, 1)", "                        elif sourcematch(\"=\"):", "                            # named backreference", "                            name = source.getuntil(\")\", \"group name\")", "                            source.checkgroupname(name, 1)", "                            gid = state.groupdict.get(name)", "                            if gid is None:", "                                msg = \"unknown group name %r\" % name", "                                raise source.error(msg, len(name) + 1)", "                            if not state.checkgroup(gid):", "                                raise source.error(\"cannot refer to an open group\",", "                                                   len(name) + 1)", "                            state.checklookbehindgroup(gid, source)", "                            subpatternappend((GROUPREF, gid))", "                            continue", "    ", "                        else:", "                            char = sourceget()", "                            if char is None:", "                                raise source.error(\"unexpected end of pattern\")", "                            raise source.error(\"unknown extension ?P\" + char,", "                                               len(char) + 2)", "                    elif char == \":\":", "                        # non-capturing group", "                        capture = False", "                    elif char == \"#\":", "                        # comment", "                        while True:", "                            if source.next is None:", "                                raise source.error(\"missing ), unterminated comment\",", "                                                   source.tell() - start)", "                            if sourceget() == \")\":", "                                break", "                        continue", "    ", "                    elif char in \"=!<\":", "                        # lookahead assertions", "                        dir = 1", "                        if char == \"<\":", "                            char = sourceget()", "                            if char is None:", "                                raise source.error(\"unexpected end of pattern\")", "                            if char not in \"=!\":", "                                raise source.error(\"unknown extension ?<\" + char,", "                                                   len(char) + 2)", "                            dir = -1 # lookbehind", "                            lookbehindgroups = state.lookbehindgroups", "                            if lookbehindgroups is None:", "                                state.lookbehindgroups = state.groups", "                        p = _parse_sub(source, state, verbose, nested + 1)", "                        if dir < 0:", "                            if lookbehindgroups is None:", "                                state.lookbehindgroups = None", "                        if not sourcematch(\")\"):", "                            raise source.error(\"missing ), unterminated subpattern\",", "                                               source.tell() - start)", "                        if char == \"=\":", "                            subpatternappend((ASSERT, (dir, p)))", "                        else:", "                            subpatternappend((ASSERT_NOT, (dir, p)))", "                        continue", "    ", "                    elif char == \"(\":", "                        # conditional backreference group", "                        condname = source.getuntil(\")\", \"group name\")", "                        if not (condname.isdecimal() and condname.isascii()):", "                            source.checkgroupname(condname, 1)", "                            condgroup = state.groupdict.get(condname)", "                            if condgroup is None:", "                                msg = \"unknown group name %r\" % condname", "                                raise source.error(msg, len(condname) + 1)", "                        else:", "                            condgroup = int(condname)", "                            if not condgroup:", "                                raise source.error(\"bad group number\",", "                                                   len(condname) + 1)", "                            if condgroup >= MAXGROUPS:", "                                msg = \"invalid group reference %d\" % condgroup", "                                raise source.error(msg, len(condname) + 1)", "                            if condgroup not in state.grouprefpos:", "                                state.grouprefpos[condgroup] = (", "                                    source.tell() - len(condname) - 1", "                                )", "                            if not (condname.isdecimal() and condname.isascii()):", "                                import warnings", "                                warnings.warn(", "                                    \"bad character in group name %s at position %d\" %", "                                    (repr(condname) if source.istext else ascii(condname),", "                                     source.tell() - len(condname) - 1),", "                                    DeprecationWarning, stacklevel=nested + 6", "                                )", "                        state.checklookbehindgroup(condgroup, source)", "                        item_yes = _parse(source, state, verbose, nested + 1)", "                        if source.match(\"|\"):", "                            item_no = _parse(source, state, verbose, nested + 1)", "                            if source.next == \"|\":", "                                raise source.error(\"conditional backref with more than two branches\")", "                        else:", "                            item_no = None", "                        if not source.match(\")\"):", "                            raise source.error(\"missing ), unterminated subpattern\",", "                                               source.tell() - start)", "                        subpatternappend((GROUPREF_EXISTS, (condgroup, item_yes, item_no)))", "                        continue", "    ", "                    elif char == \">\":", "                        # non-capturing, atomic group", "                        capture = False", "                        atomic = True", "                    elif char in FLAGS or char == \"-\":", "                        # flags", "                        flags = _parse_flags(source, state, char)", "                        if flags is None:  # global flags", "                            if not first or subpattern:", ">                               raise source.error('global flags not at the start '", "                                                   'of the expression',", "                                                   source.tell() - start)", "E                               re.error: global flags not at the start of the expression at position 12"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7325dbbe0650>"], ["state", "<re._parser.State object at 0x7325dbb50080>"], ["verbose", "0"], ["nested", "1"], ["first", "True"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 840, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_distinct_chars():", "        s = 'abc' * (74 * 3)", ">       assert not palindromes_of_specific_lengths(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_20/tests47_20_3.py", "lineno": 20, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{36,42}(?i)', s[20:-20]))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_20/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        setappend((RANGE, (lo, hi)))", "                    else:", "                        if code1[0] is IN:", "                            code1 = code1[1][0]", "                        setappend(code1)", "    ", "                set = _uniq(set)", "                # XXX: <fl> should move set optimization to compiler!", "                if _len(set) == 1 and set[0][0] is LITERAL:", "                    # optimization", "                    if negate:", "                        subpatternappend((NOT_LITERAL, set[0][1]))", "                    else:", "                        subpatternappend(set[0])", "                else:", "                    if negate:", "                        set.insert(0, (NEGATE, None))", "                    # charmap optimization can't be added here because", "                    # global flags still are not known", "                    subpatternappend((IN, set))", "    ", "            elif this in REPEAT_CHARS:", "                # repeat previous item", "                here = source.tell()", "                if this == \"?\":", "                    min, max = 0, 1", "                elif this == \"*\":", "                    min, max = 0, MAXREPEAT", "    ", "                elif this == \"+\":", "                    min, max = 1, MAXREPEAT", "                elif this == \"{\":", "                    if source.next == \"}\":", "                        subpatternappend((LITERAL, _ord(this)))", "                        continue", "    ", "                    min, max = 0, MAXREPEAT", "                    lo = hi = \"\"", "                    while source.next in DIGITS:", "                        lo += sourceget()", "                    if sourcematch(\",\"):", "                        while source.next in DIGITS:", "                            hi += sourceget()", "                    else:", "                        hi = lo", "                    if not sourcematch(\"}\"):", "                        subpatternappend((LITERAL, _ord(this)))", "                        source.seek(here)", "                        continue", "    ", "                    if lo:", "                        min = int(lo)", "                        if min >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                    if hi:", "                        max = int(hi)", "                        if max >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                        if max < min:", "                            raise source.error(\"min repeat greater than max repeat\",", "                                               source.tell() - here)", "                else:", "                    raise AssertionError(\"unsupported quantifier %r\" % (char,))", "                # figure out which item to repeat", "                if subpattern:", "                    item = subpattern[-1:]", "                else:", "                    item = None", "                if not item or item[0][0] is AT:", "                    raise source.error(\"nothing to repeat\",", "                                       source.tell() - here + len(this))", "                if item[0][0] in _REPEATCODES:", "                    raise source.error(\"multiple repeat\",", "                                       source.tell() - here + len(this))", "                if item[0][0] is SUBPATTERN:", "                    group, add_flags, del_flags, p = item[0][1]", "                    if group is None and not add_flags and not del_flags:", "                        item = p", "                if sourcematch(\"?\"):", "                    # Non-Greedy Match", "                    subpattern[-1] = (MIN_REPEAT, (min, max, item))", "                elif sourcematch(\"+\"):", "                    # Possessive Match (Always Greedy)", "                    subpattern[-1] = (POSSESSIVE_REPEAT, (min, max, item))", "                else:", "                    # Greedy Match", "                    subpattern[-1] = (MAX_REPEAT, (min, max, item))", "    ", "            elif this == \".\":", "                subpatternappend((ANY, None))", "    ", "            elif this == \"(\":", "                start = source.tell() - 1", "                capture = True", "                atomic = False", "                name = None", "                add_flags = 0", "                del_flags = 0", "                if sourcematch(\"?\"):", "                    # options", "                    char = sourceget()", "                    if char is None:", "                        raise source.error(\"unexpected end of pattern\")", "                    if char == \"P\":", "                        # python extensions", "                        if sourcematch(\"<\"):", "                            # named group: skip forward to end of name", "                            name = source.getuntil(\">\", \"group name\")", "                            source.checkgroupname(name, 1)", "                        elif sourcematch(\"=\"):", "                            # named backreference", "                            name = source.getuntil(\")\", \"group name\")", "                            source.checkgroupname(name, 1)", "                            gid = state.groupdict.get(name)", "                            if gid is None:", "                                msg = \"unknown group name %r\" % name", "                                raise source.error(msg, len(name) + 1)", "                            if not state.checkgroup(gid):", "                                raise source.error(\"cannot refer to an open group\",", "                                                   len(name) + 1)", "                            state.checklookbehindgroup(gid, source)", "                            subpatternappend((GROUPREF, gid))", "                            continue", "    ", "                        else:", "                            char = sourceget()", "                            if char is None:", "                                raise source.error(\"unexpected end of pattern\")", "                            raise source.error(\"unknown extension ?P\" + char,", "                                               len(char) + 2)", "                    elif char == \":\":", "                        # non-capturing group", "                        capture = False", "                    elif char == \"#\":", "                        # comment", "                        while True:", "                            if source.next is None:", "                                raise source.error(\"missing ), unterminated comment\",", "                                                   source.tell() - start)", "                            if sourceget() == \")\":", "                                break", "                        continue", "    ", "                    elif char in \"=!<\":", "                        # lookahead assertions", "                        dir = 1", "                        if char == \"<\":", "                            char = sourceget()", "                            if char is None:", "                                raise source.error(\"unexpected end of pattern\")", "                            if char not in \"=!\":", "                                raise source.error(\"unknown extension ?<\" + char,", "                                                   len(char) + 2)", "                            dir = -1 # lookbehind", "                            lookbehindgroups = state.lookbehindgroups", "                            if lookbehindgroups is None:", "                                state.lookbehindgroups = state.groups", "                        p = _parse_sub(source, state, verbose, nested + 1)", "                        if dir < 0:", "                            if lookbehindgroups is None:", "                                state.lookbehindgroups = None", "                        if not sourcematch(\")\"):", "                            raise source.error(\"missing ), unterminated subpattern\",", "                                               source.tell() - start)", "                        if char == \"=\":", "                            subpatternappend((ASSERT, (dir, p)))", "                        else:", "                            subpatternappend((ASSERT_NOT, (dir, p)))", "                        continue", "    ", "                    elif char == \"(\":", "                        # conditional backreference group", "                        condname = source.getuntil(\")\", \"group name\")", "                        if not (condname.isdecimal() and condname.isascii()):", "                            source.checkgroupname(condname, 1)", "                            condgroup = state.groupdict.get(condname)", "                            if condgroup is None:", "                                msg = \"unknown group name %r\" % condname", "                                raise source.error(msg, len(condname) + 1)", "                        else:", "                            condgroup = int(condname)", "                            if not condgroup:", "                                raise source.error(\"bad group number\",", "                                                   len(condname) + 1)", "                            if condgroup >= MAXGROUPS:", "                                msg = \"invalid group reference %d\" % condgroup", "                                raise source.error(msg, len(condname) + 1)", "                            if condgroup not in state.grouprefpos:", "                                state.grouprefpos[condgroup] = (", "                                    source.tell() - len(condname) - 1", "                                )", "                            if not (condname.isdecimal() and condname.isascii()):", "                                import warnings", "                                warnings.warn(", "                                    \"bad character in group name %s at position %d\" %", "                                    (repr(condname) if source.istext else ascii(condname),", "                                     source.tell() - len(condname) - 1),", "                                    DeprecationWarning, stacklevel=nested + 6", "                                )", "                        state.checklookbehindgroup(condgroup, source)", "                        item_yes = _parse(source, state, verbose, nested + 1)", "                        if source.match(\"|\"):", "                            item_no = _parse(source, state, verbose, nested + 1)", "                            if source.next == \"|\":", "                                raise source.error(\"conditional backref with more than two branches\")", "                        else:", "                            item_no = None", "                        if not source.match(\")\"):", "                            raise source.error(\"missing ), unterminated subpattern\",", "                                               source.tell() - start)", "                        subpatternappend((GROUPREF_EXISTS, (condgroup, item_yes, item_no)))", "                        continue", "    ", "                    elif char == \">\":", "                        # non-capturing, atomic group", "                        capture = False", "                        atomic = True", "                    elif char in FLAGS or char == \"-\":", "                        # flags", "                        flags = _parse_flags(source, state, char)", "                        if flags is None:  # global flags", "                            if not first or subpattern:", ">                               raise source.error('global flags not at the start '", "                                                   'of the expression',", "                                                   source.tell() - start)", "E                               re.error: global flags not at the start of the expression at position 12"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7325dbbe0650>"], ["state", "<re._parser.State object at 0x7325dbb50080>"], ["verbose", "0"], ["nested", "1"], ["first", "True"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 840, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 840, "message": "re.error: global flags not at the start of the expression at position 12"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00015102396719157696, "start": 1731127084.974461, "stop": 1731127084.9746125, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "4e38a7c6392e4dc99d446fc06884b20b", "node": "<WorkerController gw1>"}
{"nodeid": "tests47_20_3.py::test_string_of_distinct_chars", "location": ["tests47_20_3.py", 17, "test_string_of_distinct_chars"], "keywords": {"test_string_of_distinct_chars": 1, "tests47_20_3.py": 1, "Folder_20": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00010704610031098127, "start": 1731127085.017444, "stop": 1731127085.0175514, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "4e38a7c6392e4dc99d446fc06884b20b", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
