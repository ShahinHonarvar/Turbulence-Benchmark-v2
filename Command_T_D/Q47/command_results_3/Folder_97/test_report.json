{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests47_97_3.py::test_string_of_distinct_chars", "location": ["tests47_97_3.py", 17, "test_string_of_distinct_chars"], "keywords": {"test_string_of_distinct_chars": 1, "tests47_97_3.py": 1, "Folder_97": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00015529303345829248, "start": 1731127325.8500535, "stop": 1731127325.8502095, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "322ff8365049430fb16035c2adc90614", "node": "<WorkerController gw1>"}
{"nodeid": "tests47_97_3.py::test_string_of_spaces_and_letters", "location": ["tests47_97_3.py", 27, "test_string_of_spaces_and_letters"], "keywords": {"test_string_of_spaces_and_letters": 1, "tests47_97_3.py": 1, "Folder_97": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001533740432932973, "start": 1731127325.8500063, "stop": 1731127325.85016, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "322ff8365049430fb16035c2adc90614", "node": "<WorkerController gw2>"}
{"nodeid": "tests47_97_3.py::test_string_of_similar_chars", "location": ["tests47_97_3.py", 3, "test_string_of_similar_chars"], "keywords": {"test_string_of_similar_chars": 1, "tests47_97_3.py": 1, "Folder_97": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016943190712481737, "start": 1731127325.8500566, "stop": 1731127325.8502266, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "322ff8365049430fb16035c2adc90614", "node": "<WorkerController gw0>"}
{"nodeid": "tests47_97_3.py::test_string_of_spaces_and_letters", "location": ["tests47_97_3.py", 27, "test_string_of_spaces_and_letters"], "keywords": {"test_string_of_spaces_and_letters": 1, "tests47_97_3.py": 1, "Folder_97": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 687, "message": "re.error: nothing to repeat at position 26"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces_and_letters():", "        s = ' a ' * (94 * 3)", ">       assert not palindromes_of_specific_lengths(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_97/tests47_97_3.py", "lineno": 30, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{38,49}(?=([a-z]{28}|{94})))', s))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_97/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 775, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 862, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        setappend((RANGE, (lo, hi)))", "                    else:", "                        if code1[0] is IN:", "                            code1 = code1[1][0]", "                        setappend(code1)", "    ", "                set = _uniq(set)", "                # XXX: <fl> should move set optimization to compiler!", "                if _len(set) == 1 and set[0][0] is LITERAL:", "                    # optimization", "                    if negate:", "                        subpatternappend((NOT_LITERAL, set[0][1]))", "                    else:", "                        subpatternappend(set[0])", "                else:", "                    if negate:", "                        set.insert(0, (NEGATE, None))", "                    # charmap optimization can't be added here because", "                    # global flags still are not known", "                    subpatternappend((IN, set))", "    ", "            elif this in REPEAT_CHARS:", "                # repeat previous item", "                here = source.tell()", "                if this == \"?\":", "                    min, max = 0, 1", "                elif this == \"*\":", "                    min, max = 0, MAXREPEAT", "    ", "                elif this == \"+\":", "                    min, max = 1, MAXREPEAT", "                elif this == \"{\":", "                    if source.next == \"}\":", "                        subpatternappend((LITERAL, _ord(this)))", "                        continue", "    ", "                    min, max = 0, MAXREPEAT", "                    lo = hi = \"\"", "                    while source.next in DIGITS:", "                        lo += sourceget()", "                    if sourcematch(\",\"):", "                        while source.next in DIGITS:", "                            hi += sourceget()", "                    else:", "                        hi = lo", "                    if not sourcematch(\"}\"):", "                        subpatternappend((LITERAL, _ord(this)))", "                        source.seek(here)", "                        continue", "    ", "                    if lo:", "                        min = int(lo)", "                        if min >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                    if hi:", "                        max = int(hi)", "                        if max >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                        if max < min:", "                            raise source.error(\"min repeat greater than max repeat\",", "                                               source.tell() - here)", "                else:", "                    raise AssertionError(\"unsupported quantifier %r\" % (char,))", "                # figure out which item to repeat", "                if subpattern:", "                    item = subpattern[-1:]", "                else:", "                    item = None", "                if not item or item[0][0] is AT:", ">                   raise source.error(\"nothing to repeat\",", "                                       source.tell() - here + len(this))", "E                   re.error: nothing to repeat at position 26"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7e4fc8c9e330>"], ["state", "<re._parser.State object at 0x7e4fc92ebe90>"], ["verbose", "0"], ["nested", "5"], ["first", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 687, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces_and_letters():", "        s = ' a ' * (94 * 3)", ">       assert not palindromes_of_specific_lengths(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_97/tests47_97_3.py", "lineno": 30, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{38,49}(?=([a-z]{28}|{94})))', s))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_97/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 775, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 862, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        setappend((RANGE, (lo, hi)))", "                    else:", "                        if code1[0] is IN:", "                            code1 = code1[1][0]", "                        setappend(code1)", "    ", "                set = _uniq(set)", "                # XXX: <fl> should move set optimization to compiler!", "                if _len(set) == 1 and set[0][0] is LITERAL:", "                    # optimization", "                    if negate:", "                        subpatternappend((NOT_LITERAL, set[0][1]))", "                    else:", "                        subpatternappend(set[0])", "                else:", "                    if negate:", "                        set.insert(0, (NEGATE, None))", "                    # charmap optimization can't be added here because", "                    # global flags still are not known", "                    subpatternappend((IN, set))", "    ", "            elif this in REPEAT_CHARS:", "                # repeat previous item", "                here = source.tell()", "                if this == \"?\":", "                    min, max = 0, 1", "                elif this == \"*\":", "                    min, max = 0, MAXREPEAT", "    ", "                elif this == \"+\":", "                    min, max = 1, MAXREPEAT", "                elif this == \"{\":", "                    if source.next == \"}\":", "                        subpatternappend((LITERAL, _ord(this)))", "                        continue", "    ", "                    min, max = 0, MAXREPEAT", "                    lo = hi = \"\"", "                    while source.next in DIGITS:", "                        lo += sourceget()", "                    if sourcematch(\",\"):", "                        while source.next in DIGITS:", "                            hi += sourceget()", "                    else:", "                        hi = lo", "                    if not sourcematch(\"}\"):", "                        subpatternappend((LITERAL, _ord(this)))", "                        source.seek(here)", "                        continue", "    ", "                    if lo:", "                        min = int(lo)", "                        if min >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                    if hi:", "                        max = int(hi)", "                        if max >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                        if max < min:", "                            raise source.error(\"min repeat greater than max repeat\",", "                                               source.tell() - here)", "                else:", "                    raise AssertionError(\"unsupported quantifier %r\" % (char,))", "                # figure out which item to repeat", "                if subpattern:", "                    item = subpattern[-1:]", "                else:", "                    item = None", "                if not item or item[0][0] is AT:", ">                   raise source.error(\"nothing to repeat\",", "                                       source.tell() - here + len(this))", "E                   re.error: nothing to repeat at position 26"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7e4fc8c9e330>"], ["state", "<re._parser.State object at 0x7e4fc92ebe90>"], ["verbose", "0"], ["nested", "5"], ["first", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 687, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 687, "message": "re.error: nothing to repeat at position 26"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00022343790624290705, "start": 1731127325.8504012, "stop": 1731127325.8506253, "extras": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "322ff8365049430fb16035c2adc90614", "node": "<WorkerController gw2>"}
{"nodeid": "tests47_97_3.py::test_string_of_spaces_and_letters", "location": ["tests47_97_3.py", 27, "test_string_of_spaces_and_letters"], "keywords": {"test_string_of_spaces_and_letters": 1, "tests47_97_3.py": 1, "Folder_97": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.000108918990008533, "start": 1731127325.8991113, "stop": 1731127325.899221, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "322ff8365049430fb16035c2adc90614", "node": "<WorkerController gw2>"}
{"nodeid": "tests47_97_3.py::test_string_of_distinct_chars", "location": ["tests47_97_3.py", 17, "test_string_of_distinct_chars"], "keywords": {"test_string_of_distinct_chars": 1, "tests47_97_3.py": 1, "Folder_97": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 687, "message": "re.error: nothing to repeat at position 26"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_distinct_chars():", "        s = 'abc' * (94 * 3)", ">       assert not palindromes_of_specific_lengths(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_97/tests47_97_3.py", "lineno": 20, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{38,49}(?=([a-z]{28}|{94})))', s))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_97/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 775, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 862, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        setappend((RANGE, (lo, hi)))", "                    else:", "                        if code1[0] is IN:", "                            code1 = code1[1][0]", "                        setappend(code1)", "    ", "                set = _uniq(set)", "                # XXX: <fl> should move set optimization to compiler!", "                if _len(set) == 1 and set[0][0] is LITERAL:", "                    # optimization", "                    if negate:", "                        subpatternappend((NOT_LITERAL, set[0][1]))", "                    else:", "                        subpatternappend(set[0])", "                else:", "                    if negate:", "                        set.insert(0, (NEGATE, None))", "                    # charmap optimization can't be added here because", "                    # global flags still are not known", "                    subpatternappend((IN, set))", "    ", "            elif this in REPEAT_CHARS:", "                # repeat previous item", "                here = source.tell()", "                if this == \"?\":", "                    min, max = 0, 1", "                elif this == \"*\":", "                    min, max = 0, MAXREPEAT", "    ", "                elif this == \"+\":", "                    min, max = 1, MAXREPEAT", "                elif this == \"{\":", "                    if source.next == \"}\":", "                        subpatternappend((LITERAL, _ord(this)))", "                        continue", "    ", "                    min, max = 0, MAXREPEAT", "                    lo = hi = \"\"", "                    while source.next in DIGITS:", "                        lo += sourceget()", "                    if sourcematch(\",\"):", "                        while source.next in DIGITS:", "                            hi += sourceget()", "                    else:", "                        hi = lo", "                    if not sourcematch(\"}\"):", "                        subpatternappend((LITERAL, _ord(this)))", "                        source.seek(here)", "                        continue", "    ", "                    if lo:", "                        min = int(lo)", "                        if min >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                    if hi:", "                        max = int(hi)", "                        if max >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                        if max < min:", "                            raise source.error(\"min repeat greater than max repeat\",", "                                               source.tell() - here)", "                else:", "                    raise AssertionError(\"unsupported quantifier %r\" % (char,))", "                # figure out which item to repeat", "                if subpattern:", "                    item = subpattern[-1:]", "                else:", "                    item = None", "                if not item or item[0][0] is AT:", ">                   raise source.error(\"nothing to repeat\",", "                                       source.tell() - here + len(this))", "E                   re.error: nothing to repeat at position 26"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7c4b2fbfe1b0>"], ["state", "<re._parser.State object at 0x7c4b2fbfdc10>"], ["verbose", "0"], ["nested", "5"], ["first", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 687, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_distinct_chars():", "        s = 'abc' * (94 * 3)", ">       assert not palindromes_of_specific_lengths(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_97/tests47_97_3.py", "lineno": 20, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{38,49}(?=([a-z]{28}|{94})))', s))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_97/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 775, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 862, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        setappend((RANGE, (lo, hi)))", "                    else:", "                        if code1[0] is IN:", "                            code1 = code1[1][0]", "                        setappend(code1)", "    ", "                set = _uniq(set)", "                # XXX: <fl> should move set optimization to compiler!", "                if _len(set) == 1 and set[0][0] is LITERAL:", "                    # optimization", "                    if negate:", "                        subpatternappend((NOT_LITERAL, set[0][1]))", "                    else:", "                        subpatternappend(set[0])", "                else:", "                    if negate:", "                        set.insert(0, (NEGATE, None))", "                    # charmap optimization can't be added here because", "                    # global flags still are not known", "                    subpatternappend((IN, set))", "    ", "            elif this in REPEAT_CHARS:", "                # repeat previous item", "                here = source.tell()", "                if this == \"?\":", "                    min, max = 0, 1", "                elif this == \"*\":", "                    min, max = 0, MAXREPEAT", "    ", "                elif this == \"+\":", "                    min, max = 1, MAXREPEAT", "                elif this == \"{\":", "                    if source.next == \"}\":", "                        subpatternappend((LITERAL, _ord(this)))", "                        continue", "    ", "                    min, max = 0, MAXREPEAT", "                    lo = hi = \"\"", "                    while source.next in DIGITS:", "                        lo += sourceget()", "                    if sourcematch(\",\"):", "                        while source.next in DIGITS:", "                            hi += sourceget()", "                    else:", "                        hi = lo", "                    if not sourcematch(\"}\"):", "                        subpatternappend((LITERAL, _ord(this)))", "                        source.seek(here)", "                        continue", "    ", "                    if lo:", "                        min = int(lo)", "                        if min >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                    if hi:", "                        max = int(hi)", "                        if max >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                        if max < min:", "                            raise source.error(\"min repeat greater than max repeat\",", "                                               source.tell() - here)", "                else:", "                    raise AssertionError(\"unsupported quantifier %r\" % (char,))", "                # figure out which item to repeat", "                if subpattern:", "                    item = subpattern[-1:]", "                else:", "                    item = None", "                if not item or item[0][0] is AT:", ">                   raise source.error(\"nothing to repeat\",", "                                       source.tell() - here + len(this))", "E                   re.error: nothing to repeat at position 26"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7c4b2fbfe1b0>"], ["state", "<re._parser.State object at 0x7c4b2fbfdc10>"], ["verbose", "0"], ["nested", "5"], ["first", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 687, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 687, "message": "re.error: nothing to repeat at position 26"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00022359797731041908, "start": 1731127325.8504763, "stop": 1731127325.8507004, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "322ff8365049430fb16035c2adc90614", "node": "<WorkerController gw1>"}
{"nodeid": "tests47_97_3.py::test_string_of_distinct_chars", "location": ["tests47_97_3.py", 17, "test_string_of_distinct_chars"], "keywords": {"test_string_of_distinct_chars": 1, "tests47_97_3.py": 1, "Folder_97": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 9.986304212361574e-05, "start": 1731127325.9032686, "stop": 1731127325.903369, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "322ff8365049430fb16035c2adc90614", "node": "<WorkerController gw1>"}
{"nodeid": "tests47_97_3.py::test_string_of_similar_chars", "location": ["tests47_97_3.py", 3, "test_string_of_similar_chars"], "keywords": {"test_string_of_similar_chars": 1, "tests47_97_3.py": 1, "Folder_97": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 687, "message": "re.error: nothing to repeat at position 26"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_similar_chars():", "        n = max(94, 49)", "        m = min(94 - 28 + 1, 49)", "        s = ''.join('a' for _ in range(n * 2))", ">       assert palindromes_of_specific_lengths(s) == {'a' * i for i in range(38, m + 1)}"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_97/tests47_97_3.py", "lineno": 8, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{38,49}(?=([a-z]{28}|{94})))', s))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_97/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 775, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 862, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        setappend((RANGE, (lo, hi)))", "                    else:", "                        if code1[0] is IN:", "                            code1 = code1[1][0]", "                        setappend(code1)", "    ", "                set = _uniq(set)", "                # XXX: <fl> should move set optimization to compiler!", "                if _len(set) == 1 and set[0][0] is LITERAL:", "                    # optimization", "                    if negate:", "                        subpatternappend((NOT_LITERAL, set[0][1]))", "                    else:", "                        subpatternappend(set[0])", "                else:", "                    if negate:", "                        set.insert(0, (NEGATE, None))", "                    # charmap optimization can't be added here because", "                    # global flags still are not known", "                    subpatternappend((IN, set))", "    ", "            elif this in REPEAT_CHARS:", "                # repeat previous item", "                here = source.tell()", "                if this == \"?\":", "                    min, max = 0, 1", "                elif this == \"*\":", "                    min, max = 0, MAXREPEAT", "    ", "                elif this == \"+\":", "                    min, max = 1, MAXREPEAT", "                elif this == \"{\":", "                    if source.next == \"}\":", "                        subpatternappend((LITERAL, _ord(this)))", "                        continue", "    ", "                    min, max = 0, MAXREPEAT", "                    lo = hi = \"\"", "                    while source.next in DIGITS:", "                        lo += sourceget()", "                    if sourcematch(\",\"):", "                        while source.next in DIGITS:", "                            hi += sourceget()", "                    else:", "                        hi = lo", "                    if not sourcematch(\"}\"):", "                        subpatternappend((LITERAL, _ord(this)))", "                        source.seek(here)", "                        continue", "    ", "                    if lo:", "                        min = int(lo)", "                        if min >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                    if hi:", "                        max = int(hi)", "                        if max >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                        if max < min:", "                            raise source.error(\"min repeat greater than max repeat\",", "                                               source.tell() - here)", "                else:", "                    raise AssertionError(\"unsupported quantifier %r\" % (char,))", "                # figure out which item to repeat", "                if subpattern:", "                    item = subpattern[-1:]", "                else:", "                    item = None", "                if not item or item[0][0] is AT:", ">                   raise source.error(\"nothing to repeat\",", "                                       source.tell() - here + len(this))", "E                   re.error: nothing to repeat at position 26"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x73448c0a8bf0>"], ["state", "<re._parser.State object at 0x73448c0a96d0>"], ["verbose", "0"], ["nested", "5"], ["first", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 687, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_similar_chars():", "        n = max(94, 49)", "        m = min(94 - 28 + 1, 49)", "        s = ''.join('a' for _ in range(n * 2))", ">       assert palindromes_of_specific_lengths(s) == {'a' * i for i in range(38, m + 1)}"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_97/tests47_97_3.py", "lineno": 8, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{38,49}(?=([a-z]{28}|{94})))', s))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_97/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 775, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, sub_verbose, nested + 1)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 862, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        setappend((RANGE, (lo, hi)))", "                    else:", "                        if code1[0] is IN:", "                            code1 = code1[1][0]", "                        setappend(code1)", "    ", "                set = _uniq(set)", "                # XXX: <fl> should move set optimization to compiler!", "                if _len(set) == 1 and set[0][0] is LITERAL:", "                    # optimization", "                    if negate:", "                        subpatternappend((NOT_LITERAL, set[0][1]))", "                    else:", "                        subpatternappend(set[0])", "                else:", "                    if negate:", "                        set.insert(0, (NEGATE, None))", "                    # charmap optimization can't be added here because", "                    # global flags still are not known", "                    subpatternappend((IN, set))", "    ", "            elif this in REPEAT_CHARS:", "                # repeat previous item", "                here = source.tell()", "                if this == \"?\":", "                    min, max = 0, 1", "                elif this == \"*\":", "                    min, max = 0, MAXREPEAT", "    ", "                elif this == \"+\":", "                    min, max = 1, MAXREPEAT", "                elif this == \"{\":", "                    if source.next == \"}\":", "                        subpatternappend((LITERAL, _ord(this)))", "                        continue", "    ", "                    min, max = 0, MAXREPEAT", "                    lo = hi = \"\"", "                    while source.next in DIGITS:", "                        lo += sourceget()", "                    if sourcematch(\",\"):", "                        while source.next in DIGITS:", "                            hi += sourceget()", "                    else:", "                        hi = lo", "                    if not sourcematch(\"}\"):", "                        subpatternappend((LITERAL, _ord(this)))", "                        source.seek(here)", "                        continue", "    ", "                    if lo:", "                        min = int(lo)", "                        if min >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                    if hi:", "                        max = int(hi)", "                        if max >= MAXREPEAT:", "                            raise OverflowError(\"the repetition number is too large\")", "                        if max < min:", "                            raise source.error(\"min repeat greater than max repeat\",", "                                               source.tell() - here)", "                else:", "                    raise AssertionError(\"unsupported quantifier %r\" % (char,))", "                # figure out which item to repeat", "                if subpattern:", "                    item = subpattern[-1:]", "                else:", "                    item = None", "                if not item or item[0][0] is AT:", ">                   raise source.error(\"nothing to repeat\",", "                                       source.tell() - here + len(this))", "E                   re.error: nothing to repeat at position 26"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x73448c0a8bf0>"], ["state", "<re._parser.State object at 0x73448c0a96d0>"], ["verbose", "0"], ["nested", "5"], ["first", "False"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 687, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 687, "message": "re.error: nothing to repeat at position 26"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0002546809846535325, "start": 1731127325.8504772, "stop": 1731127325.8507326, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "322ff8365049430fb16035c2adc90614", "node": "<WorkerController gw0>"}
{"nodeid": "tests47_97_3.py::test_string_of_similar_chars", "location": ["tests47_97_3.py", 3, "test_string_of_similar_chars"], "keywords": {"test_string_of_similar_chars": 1, "tests47_97_3.py": 1, "Folder_97": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00010381708852946758, "start": 1731127325.9185827, "stop": 1731127325.9186876, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "322ff8365049430fb16035c2adc90614", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
