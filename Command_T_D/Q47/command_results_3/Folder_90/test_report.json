{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests47_90_3.py::test_string_of_spaces_and_letters", "location": ["tests47_90_3.py", 27, "test_string_of_spaces_and_letters"], "keywords": {"test_string_of_spaces_and_letters": 1, "tests47_90_3.py": 1, "Folder_90": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.282492101192474e-05, "start": 1731127300.887565, "stop": 1731127300.8876576, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "8eeb26c7d1cc4b04a0c44e6395698876", "node": "<WorkerController gw2>"}
{"nodeid": "tests47_90_3.py::test_string_of_distinct_chars", "location": ["tests47_90_3.py", 17, "test_string_of_distinct_chars"], "keywords": {"test_string_of_distinct_chars": 1, "tests47_90_3.py": 1, "Folder_90": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00013175304047763348, "start": 1731127300.887676, "stop": 1731127300.887808, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "8eeb26c7d1cc4b04a0c44e6395698876", "node": "<WorkerController gw1>"}
{"nodeid": "tests47_90_3.py::test_string_of_similar_chars", "location": ["tests47_90_3.py", 3, "test_string_of_similar_chars"], "keywords": {"test_string_of_similar_chars": 1, "tests47_90_3.py": 1, "Folder_90": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00016009702812880278, "start": 1731127300.8876967, "stop": 1731127300.8878577, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "8eeb26c7d1cc4b04a0c44e6395698876", "node": "<WorkerController gw0>"}
{"nodeid": "tests47_90_3.py::test_string_of_spaces_and_letters", "location": ["tests47_90_3.py", 27, "test_string_of_spaces_and_letters"], "keywords": {"test_string_of_spaces_and_letters": 1, "tests47_90_3.py": 1, "Folder_90": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "re.error: invalid group reference 1 at position 25"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces_and_letters():", "        s = ' a ' * (280 * 3)", ">       assert not palindromes_of_specific_lengths(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_90/tests47_90_3.py", "lineno": 30, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{1,}(?=\\\\w)[a-z]{1,}\\\\1', s[106:280].lower()))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_90/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 544, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}')) from None", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 1 at position 25"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7f3f8dd03890>"], ["escape", "'\\\\1'"], ["state", "<re._parser.State object at 0x7f3f8e30c1d0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces_and_letters():", "        s = ' a ' * (280 * 3)", ">       assert not palindromes_of_specific_lengths(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_90/tests47_90_3.py", "lineno": 30, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{1,}(?=\\\\w)[a-z]{1,}\\\\1', s[106:280].lower()))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_90/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 544, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}')) from None", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 1 at position 25"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7f3f8dd03890>"], ["escape", "'\\\\1'"], ["state", "<re._parser.State object at 0x7f3f8e30c1d0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "re.error: invalid group reference 1 at position 25"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00014773604925721884, "start": 1731127300.8878202, "stop": 1731127300.8879683, "extras": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "8eeb26c7d1cc4b04a0c44e6395698876", "node": "<WorkerController gw2>"}
{"nodeid": "tests47_90_3.py::test_string_of_spaces_and_letters", "location": ["tests47_90_3.py", 27, "test_string_of_spaces_and_letters"], "keywords": {"test_string_of_spaces_and_letters": 1, "tests47_90_3.py": 1, "Folder_90": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00012881902512162924, "start": 1731127300.9237561, "stop": 1731127300.9238858, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "8eeb26c7d1cc4b04a0c44e6395698876", "node": "<WorkerController gw2>"}
{"nodeid": "tests47_90_3.py::test_string_of_similar_chars", "location": ["tests47_90_3.py", 3, "test_string_of_similar_chars"], "keywords": {"test_string_of_similar_chars": 1, "tests47_90_3.py": 1, "Folder_90": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "re.error: invalid group reference 1 at position 25"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_similar_chars():", "        n = max(280, 151)", "        m = min(280 - 106 + 1, 151)", "        s = ''.join('a' for _ in range(n * 2))", ">       assert palindromes_of_specific_lengths(s) == {'a' * i for i in range(136, m + 1)}"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_90/tests47_90_3.py", "lineno": 8, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{1,}(?=\\\\w)[a-z]{1,}\\\\1', s[106:280].lower()))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_90/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 544, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}')) from None", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 1 at position 25"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7c9b5ec6b800>"], ["escape", "'\\\\1'"], ["state", "<re._parser.State object at 0x7c9b5ec6a4e0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_similar_chars():", "        n = max(280, 151)", "        m = min(280 - 106 + 1, 151)", "        s = ''.join('a' for _ in range(n * 2))", ">       assert palindromes_of_specific_lengths(s) == {'a' * i for i in range(136, m + 1)}"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_90/tests47_90_3.py", "lineno": 8, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{1,}(?=\\\\w)[a-z]{1,}\\\\1', s[106:280].lower()))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_90/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 544, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}')) from None", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 1 at position 25"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x7c9b5ec6b800>"], ["escape", "'\\\\1'"], ["state", "<re._parser.State object at 0x7c9b5ec6a4e0>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "re.error: invalid group reference 1 at position 25"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00022577994968742132, "start": 1731127300.888079, "stop": 1731127300.8883052, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "8eeb26c7d1cc4b04a0c44e6395698876", "node": "<WorkerController gw0>"}
{"nodeid": "tests47_90_3.py::test_string_of_similar_chars", "location": ["tests47_90_3.py", 3, "test_string_of_similar_chars"], "keywords": {"test_string_of_similar_chars": 1, "tests47_90_3.py": 1, "Folder_90": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00012048101052641869, "start": 1731127300.924747, "stop": 1731127300.9248683, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "8eeb26c7d1cc4b04a0c44e6395698876", "node": "<WorkerController gw0>"}
{"nodeid": "tests47_90_3.py::test_string_of_distinct_chars", "location": ["tests47_90_3.py", 17, "test_string_of_distinct_chars"], "keywords": {"test_string_of_distinct_chars": 1, "tests47_90_3.py": 1, "Folder_90": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "re.error: invalid group reference 1 at position 25"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_distinct_chars():", "        s = 'abc' * (280 * 3)", ">       assert not palindromes_of_specific_lengths(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_90/tests47_90_3.py", "lineno": 20, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{1,}(?=\\\\w)[a-z]{1,}\\\\1', s[106:280].lower()))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_90/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 544, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}')) from None", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 1 at position 25"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x786ff190f020>"], ["escape", "'\\\\1'"], ["state", "<re._parser.State object at 0x786ff190c710>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_distinct_chars():", "        s = 'abc' * (280 * 3)", ">       assert not palindromes_of_specific_lengths(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_90/tests47_90_3.py", "lineno": 20, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return set(re.findall('[a-z]{1,}(?=\\\\w)[a-z]{1,}\\\\1', s[106:280].lower()))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q47/command_results_3/Folder_90/generated_answer.py", "lineno": 4, "message": "in palindromes_of_specific_lengths"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).findall(string)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 217, "message": "in findall"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    code = _escape(source, this, state)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 544, "message": "in _parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _escape(source, escape, state):", "        # handle escape code in expression", "        code = CATEGORIES.get(escape)", "        if code:", "            return code", "        code = ESCAPES.get(escape)", "        if code:", "            return code", "        try:", "            c = escape[1:2]", "            if c == \"x\":", "                # hexadecimal escape", "                escape += source.getwhile(2, HEXDIGITS)", "                if len(escape) != 4:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"u\" and source.istext:", "                # unicode escape (exactly four digits)", "                escape += source.getwhile(4, HEXDIGITS)", "                if len(escape) != 6:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                return LITERAL, int(escape[2:], 16)", "            elif c == \"U\" and source.istext:", "                # unicode escape (exactly eight digits)", "                escape += source.getwhile(8, HEXDIGITS)", "                if len(escape) != 10:", "                    raise source.error(\"incomplete escape %s\" % escape, len(escape))", "                c = int(escape[2:], 16)", "                chr(c) # raise ValueError for invalid code", "                return LITERAL, c", "            elif c == \"N\" and source.istext:", "                import unicodedata", "                # named unicode escape e.g. \\N{EM DASH}", "                if not source.match('{'):", "                    raise source.error(\"missing {\")", "                charname = source.getuntil('}', 'character name')", "                try:", "                    c = ord(unicodedata.lookup(charname))", "                except (KeyError, TypeError):", "                    raise source.error(\"undefined character name %r\" % charname,", "                                       len(charname) + len(r'\\N{}')) from None", "                return LITERAL, c", "            elif c == \"0\":", "                # octal escape", "                escape += source.getwhile(2, OCTDIGITS)", "                return LITERAL, int(escape[1:], 8)", "            elif c in DIGITS:", "                # octal escape *or* decimal group reference (sigh)", "                if source.next in DIGITS:", "                    escape += source.get()", "                    if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and", "                        source.next in OCTDIGITS):", "                        # got three octal digits; this is an octal escape", "                        escape += source.get()", "                        c = int(escape[1:], 8)", "                        if c > 0o377:", "                            raise source.error('octal escape value %s outside of '", "                                               'range 0-0o377' % escape,", "                                               len(escape))", "                        return LITERAL, c", "                # not an octal escape, so this is a group reference", "                group = int(escape[1:])", "                if group < state.groups:", "                    if not state.checkgroup(group):", "                        raise source.error(\"cannot refer to an open group\",", "                                           len(escape))", "                    state.checklookbehindgroup(group, source)", "                    return GROUPREF, group", ">               raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)", "E               re.error: invalid group reference 1 at position 25"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x786ff190f020>"], ["escape", "'\\\\1'"], ["state", "<re._parser.State object at 0x786ff190c710>"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 440, "message": "re.error: invalid group reference 1 at position 25"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00017349200788885355, "start": 1731127300.8879988, "stop": 1731127300.8881726, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "8eeb26c7d1cc4b04a0c44e6395698876", "node": "<WorkerController gw1>"}
{"nodeid": "tests47_90_3.py::test_string_of_distinct_chars", "location": ["tests47_90_3.py", 17, "test_string_of_distinct_chars"], "keywords": {"test_string_of_distinct_chars": 1, "tests47_90_3.py": 1, "Folder_90": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00010463094804435968, "start": 1731127300.9287968, "stop": 1731127300.928902, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "8eeb26c7d1cc4b04a0c44e6395698876", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
