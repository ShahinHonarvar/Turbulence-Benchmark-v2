{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests21_52_1.py::test_list_of_zeros", "location": ["tests21_52_1.py", 3, "test_list_of_zeros"], "keywords": {"test_list_of_zeros": 1, "tests21_52_1.py": 1, "Folder_52": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00012172898277640343, "start": 1731074675.3238852, "stop": 1731074675.3240075, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "f95ee8084de74a79ae55cc195060d7ef", "node": "<WorkerController gw0>"}
{"nodeid": "tests21_52_1.py::test_sums", "location": ["tests21_52_1.py", 29, "test_sums"], "keywords": {"test_sums": 1, "tests21_52_1.py": 1, "Folder_52": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 8.370098657906055e-05, "start": 1731074675.323789, "stop": 1731074675.3238728, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "f95ee8084de74a79ae55cc195060d7ef", "node": "<WorkerController gw2>"}
{"nodeid": "tests21_52_1.py::test_negate_of_divisors", "location": ["tests21_52_1.py", 16, "test_negate_of_divisors"], "keywords": {"test_negate_of_divisors": 1, "tests21_52_1.py": 1, "Folder_52": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00012502598110586405, "start": 1731074675.3238914, "stop": 1731074675.3240166, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "f95ee8084de74a79ae55cc195060d7ef", "node": "<WorkerController gw1>"}
{"nodeid": "tests21_52_1.py::test_sums", "location": ["tests21_52_1.py", 29, "test_sums"], "keywords": {"test_sums": 1, "tests21_52_1.py": 1, "Folder_52": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q21/command_results_1/Folder_52/generated_answer.py", "lineno": 8, "message": "TypeError: expected string or bytes-like object, got 'list'"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_sums():", "        initial_list = [x for x in range(0, 97 + 1)]", ">       expected_list = all_ints_div_by_num(initial_list)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_1/Folder_52/tests21_52_1.py", "lineno": 32, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_ints_div_by_num(nums):", "        str_list = ['{:d}'.format(x) for x in nums]", "        num_str = '|'.join(str_list)", "        reg_str = '[{:s}]{:d},[{:s}]{:d}'.format(num_str, 42, num_str, 97)", "        reg = re.compile(reg_str)", ">       return [int(x) for x in reg.findall(str_list)]", "E       TypeError: expected string or bytes-like object, got 'list'"], "reprfuncargs": {"args": [["nums", "[0, 1, 2, 3, 4, 5, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_1/Folder_52/generated_answer.py", "lineno": 8, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_sums():", "        initial_list = [x for x in range(0, 97 + 1)]", ">       expected_list = all_ints_div_by_num(initial_list)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_1/Folder_52/tests21_52_1.py", "lineno": 32, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_ints_div_by_num(nums):", "        str_list = ['{:d}'.format(x) for x in nums]", "        num_str = '|'.join(str_list)", "        reg_str = '[{:s}]{:d},[{:s}]{:d}'.format(num_str, 42, num_str, 97)", "        reg = re.compile(reg_str)", ">       return [int(x) for x in reg.findall(str_list)]", "E       TypeError: expected string or bytes-like object, got 'list'"], "reprfuncargs": {"args": [["nums", "[0, 1, 2, 3, 4, 5, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_1/Folder_52/generated_answer.py", "lineno": 8, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q21/command_results_1/Folder_52/generated_answer.py", "lineno": 8, "message": "TypeError: expected string or bytes-like object, got 'list'"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0002681269543245435, "start": 1731074675.32402, "stop": 1731074675.3242884, "extras": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "f95ee8084de74a79ae55cc195060d7ef", "node": "<WorkerController gw2>"}
{"nodeid": "tests21_52_1.py::test_sums", "location": ["tests21_52_1.py", 29, "test_sums"], "keywords": {"test_sums": 1, "tests21_52_1.py": 1, "Folder_52": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 7.471302524209023e-05, "start": 1731074675.3326662, "stop": 1731074675.332741, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "f95ee8084de74a79ae55cc195060d7ef", "node": "<WorkerController gw2>"}
{"nodeid": "tests21_52_1.py::test_list_of_zeros", "location": ["tests21_52_1.py", 3, "test_list_of_zeros"], "keywords": {"test_list_of_zeros": 1, "tests21_52_1.py": 1, "Folder_52": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q21/command_results_1/Folder_52/generated_answer.py", "lineno": 8, "message": "TypeError: expected string or bytes-like object, got 'list'"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_zeros():", "        list_of_zeros = [0 for _ in range(0, 3 * 97 + 1)]", "        expected_list = [0 for _ in range(42, 97 + 1)]", ">       assert all_ints_div_by_num(list_of_zeros) == expected_list"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_1/Folder_52/tests21_52_1.py", "lineno": 7, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_ints_div_by_num(nums):", "        str_list = ['{:d}'.format(x) for x in nums]", "        num_str = '|'.join(str_list)", "        reg_str = '[{:s}]{:d},[{:s}]{:d}'.format(num_str, 42, num_str, 97)", "        reg = re.compile(reg_str)", ">       return [int(x) for x in reg.findall(str_list)]", "E       TypeError: expected string or bytes-like object, got 'list'"], "reprfuncargs": {"args": [["nums", "[0, 0, 0, 0, 0, 0, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_1/Folder_52/generated_answer.py", "lineno": 8, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_zeros():", "        list_of_zeros = [0 for _ in range(0, 3 * 97 + 1)]", "        expected_list = [0 for _ in range(42, 97 + 1)]", ">       assert all_ints_div_by_num(list_of_zeros) == expected_list"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_1/Folder_52/tests21_52_1.py", "lineno": 7, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def all_ints_div_by_num(nums):", "        str_list = ['{:d}'.format(x) for x in nums]", "        num_str = '|'.join(str_list)", "        reg_str = '[{:s}]{:d},[{:s}]{:d}'.format(num_str, 42, num_str, 97)", "        reg = re.compile(reg_str)", ">       return [int(x) for x in reg.findall(str_list)]", "E       TypeError: expected string or bytes-like object, got 'list'"], "reprfuncargs": {"args": [["nums", "[0, 0, 0, 0, 0, 0, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_1/Folder_52/generated_answer.py", "lineno": 8, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q21/command_results_1/Folder_52/generated_answer.py", "lineno": 8, "message": "TypeError: expected string or bytes-like object, got 'list'"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0004959428915753961, "start": 1731074675.3241882, "stop": 1731074675.3246846, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "f95ee8084de74a79ae55cc195060d7ef", "node": "<WorkerController gw0>"}
{"nodeid": "tests21_52_1.py::test_list_of_zeros", "location": ["tests21_52_1.py", 3, "test_list_of_zeros"], "keywords": {"test_list_of_zeros": 1, "tests21_52_1.py": 1, "Folder_52": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 7.718103006482124e-05, "start": 1731074675.3330917, "stop": 1731074675.3331695, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "f95ee8084de74a79ae55cc195060d7ef", "node": "<WorkerController gw0>"}
{"nodeid": "tests21_52_1.py::test_negate_of_divisors", "location": ["tests21_52_1.py", 16, "test_negate_of_divisors"], "keywords": {"test_negate_of_divisors": 1, "tests21_52_1.py": 1, "Folder_52": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 617, "message": "re.error: bad character range |-4 at position 4"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_negate_of_divisors():", "        neg_div = -46", "        neg_div_list = [neg_div for _ in range(0, 97 + 1)]", "        expected_list = [neg_div for _ in range(42, 97 + 1)]", ">       assert all_ints_div_by_num(neg_div_list) == expected_list"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_1/Folder_52/tests21_52_1.py", "lineno": 21, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    reg = re.compile(reg_str)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_1/Folder_52/generated_answer.py", "lineno": 7, "message": "in all_ints_div_by_num"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 228, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", ">                           raise source.error(msg, len(this) + 1 + len(that))", "E                           re.error: bad character range |-4 at position 4"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x744b31e9b3e0>"], ["state", "<re._parser.State object at 0x744b318eeab0>"], ["verbose", "0"], ["nested", "1"], ["first", "True"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 617, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_negate_of_divisors():", "        neg_div = -46", "        neg_div_list = [neg_div for _ in range(0, 97 + 1)]", "        expected_list = [neg_div for _ in range(42, 97 + 1)]", ">       assert all_ints_div_by_num(neg_div_list) == expected_list"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_1/Folder_52/tests21_52_1.py", "lineno": 21, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    reg = re.compile(reg_str)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q21/command_results_1/Folder_52/generated_answer.py", "lineno": 7, "message": "in all_ints_div_by_num"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 228, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _compiler.compile(pattern, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 307, "message": "in _compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parser.parse(p, flags)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_compiler.py", "lineno": 745, "message": "in compile"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 979, "message": "in parse"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    itemsappend(_parse(source, state, verbose, nested + 1,"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 460, "message": "in _parse_sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _parse(source, state, verbose, nested, first=False):", "        # parse a simple pattern", "        subpattern = SubPattern(state)", "    ", "        # precompute constants into local variables", "        subpatternappend = subpattern.append", "        sourceget = source.get", "        sourcematch = source.match", "        _len = len", "        _ord = ord", "    ", "        while True:", "    ", "            this = source.next", "            if this is None:", "                break # end of pattern", "            if this in \"|)\":", "                break # end of subpattern", "            sourceget()", "    ", "            if verbose:", "                # skip whitespace and comments", "                if this in WHITESPACE:", "                    continue", "                if this == \"#\":", "                    while True:", "                        this = sourceget()", "                        if this is None or this == \"\\n\":", "                            break", "                    continue", "    ", "            if this[0] == \"\\\\\":", "                code = _escape(source, this, state)", "                subpatternappend(code)", "    ", "            elif this not in SPECIAL_CHARS:", "                subpatternappend((LITERAL, _ord(this)))", "    ", "            elif this == \"[\":", "                here = source.tell() - 1", "                # character set", "                set = []", "                setappend = set.append", "    ##          if sourcematch(\":\"):", "    ##              pass # handle character classes", "                if source.next == '[':", "                    import warnings", "                    warnings.warn(", "                        'Possible nested set at position %d' % source.tell(),", "                        FutureWarning, stacklevel=nested + 6", "                    )", "                negate = sourcematch(\"^\")", "                # check remaining characters", "                while True:", "                    this = sourceget()", "                    if this is None:", "                        raise source.error(\"unterminated character set\",", "                                           source.tell() - here)", "                    if this == \"]\" and set:", "                        break", "                    elif this[0] == \"\\\\\":", "                        code1 = _class_escape(source, this)", "                    else:", "                        if set and this in '-&~|' and source.next == this:", "                            import warnings", "                            warnings.warn(", "                                'Possible set %s at position %d' % (", "                                    'difference' if this == '-' else", "                                    'intersection' if this == '&' else", "                                    'symmetric difference' if this == '~' else", "                                    'union',", "                                    source.tell() - 1),", "                                FutureWarning, stacklevel=nested + 6", "                            )", "                        code1 = LITERAL, _ord(this)", "                    if sourcematch(\"-\"):", "                        # potential range", "                        that = sourceget()", "                        if that is None:", "                            raise source.error(\"unterminated character set\",", "                                               source.tell() - here)", "                        if that == \"]\":", "                            if code1[0] is IN:", "                                code1 = code1[1][0]", "                            setappend(code1)", "                            setappend((LITERAL, _ord(\"-\")))", "                            break", "                        if that[0] == \"\\\\\":", "                            code2 = _class_escape(source, that)", "                        else:", "                            if that == '-':", "                                import warnings", "                                warnings.warn(", "                                    'Possible set difference at position %d' % (", "                                        source.tell() - 2),", "                                    FutureWarning, stacklevel=nested + 6", "                                )", "                            code2 = LITERAL, _ord(that)", "                        if code1[0] != LITERAL or code2[0] != LITERAL:", "                            msg = \"bad character range %s-%s\" % (this, that)", "                            raise source.error(msg, len(this) + 1 + len(that))", "                        lo = code1[1]", "                        hi = code2[1]", "                        if hi < lo:", "                            msg = \"bad character range %s-%s\" % (this, that)", ">                           raise source.error(msg, len(this) + 1 + len(that))", "E                           re.error: bad character range |-4 at position 4"], "reprfuncargs": {"args": [["source", "<re._parser.Tokenizer object at 0x744b31e9b3e0>"], ["state", "<re._parser.State object at 0x744b318eeab0>"], ["verbose", "0"], ["nested", "1"], ["first", "True"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 617, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 617, "message": "re.error: bad character range |-4 at position 4"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00018261501099914312, "start": 1731074675.3242247, "stop": 1731074675.324408, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "f95ee8084de74a79ae55cc195060d7ef", "node": "<WorkerController gw1>"}
{"nodeid": "tests21_52_1.py::test_negate_of_divisors", "location": ["tests21_52_1.py", 16, "test_negate_of_divisors"], "keywords": {"test_negate_of_divisors": 1, "tests21_52_1.py": 1, "Folder_52": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00011457002256065607, "start": 1731074675.3576484, "stop": 1731074675.357764, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "f95ee8084de74a79ae55cc195060d7ef", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
