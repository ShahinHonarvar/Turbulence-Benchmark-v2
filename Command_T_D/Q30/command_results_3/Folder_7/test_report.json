{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests30_7_3.py::test_compare_length_of_strings", "location": ["tests30_7_3.py", 27, "test_compare_length_of_strings"], "keywords": {"test_compare_length_of_strings": 1, "tests30_7_3.py": 1, "Folder_7": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.307393338531256e-05, "start": 1731096319.1241684, "stop": 1731096319.1242619, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "146a1d2ef2fc444db4f351c0791cf52f", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_7_3.py::test_string_of_length_one", "location": ["tests30_7_3.py", 5, "test_string_of_length_one"], "keywords": {"test_string_of_length_one": 1, "tests30_7_3.py": 1, "Folder_7": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011794199235737324, "start": 1731096319.1242502, "stop": 1731096319.1243687, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "146a1d2ef2fc444db4f351c0791cf52f", "node": "<WorkerController gw0>"}
{"nodeid": "tests30_7_3.py::test_length_of_large_string_of_only_specified_character", "location": ["tests30_7_3.py", 15, "test_length_of_large_string_of_only_specified_character"], "keywords": {"test_length_of_large_string_of_only_specified_character": 1, "tests30_7_3.py": 1, "Folder_7": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00011734501458704472, "start": 1731096319.124271, "stop": 1731096319.1243887, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "146a1d2ef2fc444db4f351c0791cf52f", "node": "<WorkerController gw1>"}
{"nodeid": "tests30_7_3.py::test_length_of_large_string_of_only_specified_character", "location": ["tests30_7_3.py", 15, "test_length_of_large_string_of_only_specified_character"], "keywords": {"test_length_of_large_string_of_only_specified_character": 1, "tests30_7_3.py": 1, "Folder_7": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 1075, "message": "re.error: bad escape \\H at position 2"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_length_of_large_string_of_only_specified_character():", "        s = ' ' * 1000", ">       assert len(insert_before_character(s)) == 2 * len(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_3/Folder_7/tests30_7_3.py", "lineno": 18, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.sub('(.)H', '\\\\1\\\\H', text)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_3/Folder_7/generated_answer.py", "lineno": 4, "message": "in insert_before_character"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).sub(repl, string, count)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 186, "message": "in sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _sre.template(pattern, _parser.parse_template(repl, pattern))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 334, "message": "in _compile_template"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def parse_template(source, pattern):", "        # parse 're' replacement string into list of literals and", "        # group references", "        s = Tokenizer(source)", "        sget = s.get", "        result = []", "        literal = []", "        lappend = literal.append", "        def addliteral():", "            if s.istext:", "                result.append(''.join(literal))", "            else:", "                # The tokenizer implicitly decodes bytes objects as latin-1, we must", "                # therefore re-encode the final representation.", "                result.append(''.join(literal).encode('latin-1'))", "            del literal[:]", "        def addgroup(index, pos):", "            if index > pattern.groups:", "                raise s.error(\"invalid group reference %d\" % index, pos)", "            addliteral()", "            result.append(index)", "        groupindex = pattern.groupindex", "        while True:", "            this = sget()", "            if this is None:", "                break # end of replacement string", "            if this[0] == \"\\\\\":", "                # group", "                c = this[1]", "                if c == \"g\":", "                    if not s.match(\"<\"):", "                        raise s.error(\"missing <\")", "                    name = s.getuntil(\">\", \"group name\")", "                    if not (name.isdecimal() and name.isascii()):", "                        s.checkgroupname(name, 1)", "                        try:", "                            index = groupindex[name]", "                        except KeyError:", "                            raise IndexError(\"unknown group name %r\" % name) from None", "                    else:", "                        index = int(name)", "                        if index >= MAXGROUPS:", "                            raise s.error(\"invalid group reference %d\" % index,", "                                          len(name) + 1)", "                        if not (name.isdecimal() and name.isascii()):", "                            import warnings", "                            warnings.warn(", "                                \"bad character in group name %s at position %d\" %", "                                (repr(name) if s.istext else ascii(name),", "                                 s.tell() - len(name) - 1),", "                                DeprecationWarning, stacklevel=5", "                            )", "                    addgroup(index, len(name) + 1)", "                elif c == \"0\":", "                    if s.next in OCTDIGITS:", "                        this += sget()", "                        if s.next in OCTDIGITS:", "                            this += sget()", "                    lappend(chr(int(this[1:], 8) & 0xff))", "                elif c in DIGITS:", "                    isoctal = False", "                    if s.next in DIGITS:", "                        this += sget()", "                        if (c in OCTDIGITS and this[2] in OCTDIGITS and", "                            s.next in OCTDIGITS):", "                            this += sget()", "                            isoctal = True", "                            c = int(this[1:], 8)", "                            if c > 0o377:", "                                raise s.error('octal escape value %s outside of '", "                                              'range 0-0o377' % this, len(this))", "                            lappend(chr(c))", "                    if not isoctal:", "                        addgroup(int(this[1:]), len(this) - 1)", "                else:", "                    try:", "                        this = chr(ESCAPES[this][1])", "                    except KeyError:", "                        if c in ASCIILETTERS:", ">                           raise s.error('bad escape %s' % this, len(this)) from None", "E                           re.error: bad escape \\H at position 2"], "reprfuncargs": {"args": [["source", "'\\\\1\\\\H'"], ["pattern", "re.compile('(.)H')"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 1075, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_length_of_large_string_of_only_specified_character():", "        s = ' ' * 1000", ">       assert len(insert_before_character(s)) == 2 * len(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_3/Folder_7/tests30_7_3.py", "lineno": 18, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.sub('(.)H', '\\\\1\\\\H', text)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_3/Folder_7/generated_answer.py", "lineno": 4, "message": "in insert_before_character"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).sub(repl, string, count)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 186, "message": "in sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _sre.template(pattern, _parser.parse_template(repl, pattern))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 334, "message": "in _compile_template"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def parse_template(source, pattern):", "        # parse 're' replacement string into list of literals and", "        # group references", "        s = Tokenizer(source)", "        sget = s.get", "        result = []", "        literal = []", "        lappend = literal.append", "        def addliteral():", "            if s.istext:", "                result.append(''.join(literal))", "            else:", "                # The tokenizer implicitly decodes bytes objects as latin-1, we must", "                # therefore re-encode the final representation.", "                result.append(''.join(literal).encode('latin-1'))", "            del literal[:]", "        def addgroup(index, pos):", "            if index > pattern.groups:", "                raise s.error(\"invalid group reference %d\" % index, pos)", "            addliteral()", "            result.append(index)", "        groupindex = pattern.groupindex", "        while True:", "            this = sget()", "            if this is None:", "                break # end of replacement string", "            if this[0] == \"\\\\\":", "                # group", "                c = this[1]", "                if c == \"g\":", "                    if not s.match(\"<\"):", "                        raise s.error(\"missing <\")", "                    name = s.getuntil(\">\", \"group name\")", "                    if not (name.isdecimal() and name.isascii()):", "                        s.checkgroupname(name, 1)", "                        try:", "                            index = groupindex[name]", "                        except KeyError:", "                            raise IndexError(\"unknown group name %r\" % name) from None", "                    else:", "                        index = int(name)", "                        if index >= MAXGROUPS:", "                            raise s.error(\"invalid group reference %d\" % index,", "                                          len(name) + 1)", "                        if not (name.isdecimal() and name.isascii()):", "                            import warnings", "                            warnings.warn(", "                                \"bad character in group name %s at position %d\" %", "                                (repr(name) if s.istext else ascii(name),", "                                 s.tell() - len(name) - 1),", "                                DeprecationWarning, stacklevel=5", "                            )", "                    addgroup(index, len(name) + 1)", "                elif c == \"0\":", "                    if s.next in OCTDIGITS:", "                        this += sget()", "                        if s.next in OCTDIGITS:", "                            this += sget()", "                    lappend(chr(int(this[1:], 8) & 0xff))", "                elif c in DIGITS:", "                    isoctal = False", "                    if s.next in DIGITS:", "                        this += sget()", "                        if (c in OCTDIGITS and this[2] in OCTDIGITS and", "                            s.next in OCTDIGITS):", "                            this += sget()", "                            isoctal = True", "                            c = int(this[1:], 8)", "                            if c > 0o377:", "                                raise s.error('octal escape value %s outside of '", "                                              'range 0-0o377' % this, len(this))", "                            lappend(chr(c))", "                    if not isoctal:", "                        addgroup(int(this[1:]), len(this) - 1)", "                else:", "                    try:", "                        this = chr(ESCAPES[this][1])", "                    except KeyError:", "                        if c in ASCIILETTERS:", ">                           raise s.error('bad escape %s' % this, len(this)) from None", "E                           re.error: bad escape \\H at position 2"], "reprfuncargs": {"args": [["source", "'\\\\1\\\\H'"], ["pattern", "re.compile('(.)H')"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 1075, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 1075, "message": "re.error: bad escape \\H at position 2"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00017913291230797768, "start": 1731096319.1245706, "stop": 1731096319.1247501, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "146a1d2ef2fc444db4f351c0791cf52f", "node": "<WorkerController gw1>"}
{"nodeid": "tests30_7_3.py::test_length_of_large_string_of_only_specified_character", "location": ["tests30_7_3.py", 15, "test_length_of_large_string_of_only_specified_character"], "keywords": {"test_length_of_large_string_of_only_specified_character": 1, "tests30_7_3.py": 1, "Folder_7": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00011963595170527697, "start": 1731096319.1453364, "stop": 1731096319.1454566, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "146a1d2ef2fc444db4f351c0791cf52f", "node": "<WorkerController gw1>"}
{"nodeid": "tests30_7_3.py::test_compare_length_of_strings", "location": ["tests30_7_3.py", 27, "test_compare_length_of_strings"], "keywords": {"test_compare_length_of_strings": 1, "tests30_7_3.py": 1, "Folder_7": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 1075, "message": "re.error: bad escape \\H at position 2"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_compare_length_of_strings():", "        s = ''.join(random.sample(string.ascii_letters + string.digits, k=20))", "        s = s + ' '", ">       returned_string = insert_before_character(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_3/Folder_7/tests30_7_3.py", "lineno": 31, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.sub('(.)H', '\\\\1\\\\H', text)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_3/Folder_7/generated_answer.py", "lineno": 4, "message": "in insert_before_character"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).sub(repl, string, count)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 186, "message": "in sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _sre.template(pattern, _parser.parse_template(repl, pattern))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 334, "message": "in _compile_template"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def parse_template(source, pattern):", "        # parse 're' replacement string into list of literals and", "        # group references", "        s = Tokenizer(source)", "        sget = s.get", "        result = []", "        literal = []", "        lappend = literal.append", "        def addliteral():", "            if s.istext:", "                result.append(''.join(literal))", "            else:", "                # The tokenizer implicitly decodes bytes objects as latin-1, we must", "                # therefore re-encode the final representation.", "                result.append(''.join(literal).encode('latin-1'))", "            del literal[:]", "        def addgroup(index, pos):", "            if index > pattern.groups:", "                raise s.error(\"invalid group reference %d\" % index, pos)", "            addliteral()", "            result.append(index)", "        groupindex = pattern.groupindex", "        while True:", "            this = sget()", "            if this is None:", "                break # end of replacement string", "            if this[0] == \"\\\\\":", "                # group", "                c = this[1]", "                if c == \"g\":", "                    if not s.match(\"<\"):", "                        raise s.error(\"missing <\")", "                    name = s.getuntil(\">\", \"group name\")", "                    if not (name.isdecimal() and name.isascii()):", "                        s.checkgroupname(name, 1)", "                        try:", "                            index = groupindex[name]", "                        except KeyError:", "                            raise IndexError(\"unknown group name %r\" % name) from None", "                    else:", "                        index = int(name)", "                        if index >= MAXGROUPS:", "                            raise s.error(\"invalid group reference %d\" % index,", "                                          len(name) + 1)", "                        if not (name.isdecimal() and name.isascii()):", "                            import warnings", "                            warnings.warn(", "                                \"bad character in group name %s at position %d\" %", "                                (repr(name) if s.istext else ascii(name),", "                                 s.tell() - len(name) - 1),", "                                DeprecationWarning, stacklevel=5", "                            )", "                    addgroup(index, len(name) + 1)", "                elif c == \"0\":", "                    if s.next in OCTDIGITS:", "                        this += sget()", "                        if s.next in OCTDIGITS:", "                            this += sget()", "                    lappend(chr(int(this[1:], 8) & 0xff))", "                elif c in DIGITS:", "                    isoctal = False", "                    if s.next in DIGITS:", "                        this += sget()", "                        if (c in OCTDIGITS and this[2] in OCTDIGITS and", "                            s.next in OCTDIGITS):", "                            this += sget()", "                            isoctal = True", "                            c = int(this[1:], 8)", "                            if c > 0o377:", "                                raise s.error('octal escape value %s outside of '", "                                              'range 0-0o377' % this, len(this))", "                            lappend(chr(c))", "                    if not isoctal:", "                        addgroup(int(this[1:]), len(this) - 1)", "                else:", "                    try:", "                        this = chr(ESCAPES[this][1])", "                    except KeyError:", "                        if c in ASCIILETTERS:", ">                           raise s.error('bad escape %s' % this, len(this)) from None", "E                           re.error: bad escape \\H at position 2"], "reprfuncargs": {"args": [["source", "'\\\\1\\\\H'"], ["pattern", "re.compile('(.)H')"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 1075, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_compare_length_of_strings():", "        s = ''.join(random.sample(string.ascii_letters + string.digits, k=20))", "        s = s + ' '", ">       returned_string = insert_before_character(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_3/Folder_7/tests30_7_3.py", "lineno": 31, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.sub('(.)H', '\\\\1\\\\H', text)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_3/Folder_7/generated_answer.py", "lineno": 4, "message": "in insert_before_character"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).sub(repl, string, count)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 186, "message": "in sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _sre.template(pattern, _parser.parse_template(repl, pattern))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 334, "message": "in _compile_template"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def parse_template(source, pattern):", "        # parse 're' replacement string into list of literals and", "        # group references", "        s = Tokenizer(source)", "        sget = s.get", "        result = []", "        literal = []", "        lappend = literal.append", "        def addliteral():", "            if s.istext:", "                result.append(''.join(literal))", "            else:", "                # The tokenizer implicitly decodes bytes objects as latin-1, we must", "                # therefore re-encode the final representation.", "                result.append(''.join(literal).encode('latin-1'))", "            del literal[:]", "        def addgroup(index, pos):", "            if index > pattern.groups:", "                raise s.error(\"invalid group reference %d\" % index, pos)", "            addliteral()", "            result.append(index)", "        groupindex = pattern.groupindex", "        while True:", "            this = sget()", "            if this is None:", "                break # end of replacement string", "            if this[0] == \"\\\\\":", "                # group", "                c = this[1]", "                if c == \"g\":", "                    if not s.match(\"<\"):", "                        raise s.error(\"missing <\")", "                    name = s.getuntil(\">\", \"group name\")", "                    if not (name.isdecimal() and name.isascii()):", "                        s.checkgroupname(name, 1)", "                        try:", "                            index = groupindex[name]", "                        except KeyError:", "                            raise IndexError(\"unknown group name %r\" % name) from None", "                    else:", "                        index = int(name)", "                        if index >= MAXGROUPS:", "                            raise s.error(\"invalid group reference %d\" % index,", "                                          len(name) + 1)", "                        if not (name.isdecimal() and name.isascii()):", "                            import warnings", "                            warnings.warn(", "                                \"bad character in group name %s at position %d\" %", "                                (repr(name) if s.istext else ascii(name),", "                                 s.tell() - len(name) - 1),", "                                DeprecationWarning, stacklevel=5", "                            )", "                    addgroup(index, len(name) + 1)", "                elif c == \"0\":", "                    if s.next in OCTDIGITS:", "                        this += sget()", "                        if s.next in OCTDIGITS:", "                            this += sget()", "                    lappend(chr(int(this[1:], 8) & 0xff))", "                elif c in DIGITS:", "                    isoctal = False", "                    if s.next in DIGITS:", "                        this += sget()", "                        if (c in OCTDIGITS and this[2] in OCTDIGITS and", "                            s.next in OCTDIGITS):", "                            this += sget()", "                            isoctal = True", "                            c = int(this[1:], 8)", "                            if c > 0o377:", "                                raise s.error('octal escape value %s outside of '", "                                              'range 0-0o377' % this, len(this))", "                            lappend(chr(c))", "                    if not isoctal:", "                        addgroup(int(this[1:]), len(this) - 1)", "                else:", "                    try:", "                        this = chr(ESCAPES[this][1])", "                    except KeyError:", "                        if c in ASCIILETTERS:", ">                           raise s.error('bad escape %s' % this, len(this)) from None", "E                           re.error: bad escape \\H at position 2"], "reprfuncargs": {"args": [["source", "'\\\\1\\\\H'"], ["pattern", "re.compile('(.)H')"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 1075, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 1075, "message": "re.error: bad escape \\H at position 2"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00017338001634925604, "start": 1731096319.1244135, "stop": 1731096319.1245873, "extras": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "146a1d2ef2fc444db4f351c0791cf52f", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_7_3.py::test_compare_length_of_strings", "location": ["tests30_7_3.py", 27, "test_compare_length_of_strings"], "keywords": {"test_compare_length_of_strings": 1, "tests30_7_3.py": 1, "Folder_7": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00012105598580092192, "start": 1731096319.1453354, "stop": 1731096319.1454575, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "146a1d2ef2fc444db4f351c0791cf52f", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_7_3.py::test_string_of_length_one", "location": ["tests30_7_3.py", 5, "test_string_of_length_one"], "keywords": {"test_string_of_length_one": 1, "tests30_7_3.py": 1, "Folder_7": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 1075, "message": "re.error: bad escape \\H at position 2"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_length_one():", "        s = ' '", ">       assert insert_before_character(s) == 'H' + ' '"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_3/Folder_7/tests30_7_3.py", "lineno": 8, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.sub('(.)H', '\\\\1\\\\H', text)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_3/Folder_7/generated_answer.py", "lineno": 4, "message": "in insert_before_character"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).sub(repl, string, count)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 186, "message": "in sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _sre.template(pattern, _parser.parse_template(repl, pattern))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 334, "message": "in _compile_template"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def parse_template(source, pattern):", "        # parse 're' replacement string into list of literals and", "        # group references", "        s = Tokenizer(source)", "        sget = s.get", "        result = []", "        literal = []", "        lappend = literal.append", "        def addliteral():", "            if s.istext:", "                result.append(''.join(literal))", "            else:", "                # The tokenizer implicitly decodes bytes objects as latin-1, we must", "                # therefore re-encode the final representation.", "                result.append(''.join(literal).encode('latin-1'))", "            del literal[:]", "        def addgroup(index, pos):", "            if index > pattern.groups:", "                raise s.error(\"invalid group reference %d\" % index, pos)", "            addliteral()", "            result.append(index)", "        groupindex = pattern.groupindex", "        while True:", "            this = sget()", "            if this is None:", "                break # end of replacement string", "            if this[0] == \"\\\\\":", "                # group", "                c = this[1]", "                if c == \"g\":", "                    if not s.match(\"<\"):", "                        raise s.error(\"missing <\")", "                    name = s.getuntil(\">\", \"group name\")", "                    if not (name.isdecimal() and name.isascii()):", "                        s.checkgroupname(name, 1)", "                        try:", "                            index = groupindex[name]", "                        except KeyError:", "                            raise IndexError(\"unknown group name %r\" % name) from None", "                    else:", "                        index = int(name)", "                        if index >= MAXGROUPS:", "                            raise s.error(\"invalid group reference %d\" % index,", "                                          len(name) + 1)", "                        if not (name.isdecimal() and name.isascii()):", "                            import warnings", "                            warnings.warn(", "                                \"bad character in group name %s at position %d\" %", "                                (repr(name) if s.istext else ascii(name),", "                                 s.tell() - len(name) - 1),", "                                DeprecationWarning, stacklevel=5", "                            )", "                    addgroup(index, len(name) + 1)", "                elif c == \"0\":", "                    if s.next in OCTDIGITS:", "                        this += sget()", "                        if s.next in OCTDIGITS:", "                            this += sget()", "                    lappend(chr(int(this[1:], 8) & 0xff))", "                elif c in DIGITS:", "                    isoctal = False", "                    if s.next in DIGITS:", "                        this += sget()", "                        if (c in OCTDIGITS and this[2] in OCTDIGITS and", "                            s.next in OCTDIGITS):", "                            this += sget()", "                            isoctal = True", "                            c = int(this[1:], 8)", "                            if c > 0o377:", "                                raise s.error('octal escape value %s outside of '", "                                              'range 0-0o377' % this, len(this))", "                            lappend(chr(c))", "                    if not isoctal:", "                        addgroup(int(this[1:]), len(this) - 1)", "                else:", "                    try:", "                        this = chr(ESCAPES[this][1])", "                    except KeyError:", "                        if c in ASCIILETTERS:", ">                           raise s.error('bad escape %s' % this, len(this)) from None", "E                           re.error: bad escape \\H at position 2"], "reprfuncargs": {"args": [["source", "'\\\\1\\\\H'"], ["pattern", "re.compile('(.)H')"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 1075, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_length_one():", "        s = ' '", ">       assert insert_before_character(s) == 'H' + ' '"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_3/Folder_7/tests30_7_3.py", "lineno": 8, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    return re.sub('(.)H', '\\\\1\\\\H', text)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_3/Folder_7/generated_answer.py", "lineno": 4, "message": "in insert_before_character"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _compile(pattern, flags).sub(repl, string, count)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 186, "message": "in sub"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return _sre.template(pattern, _parser.parse_template(repl, pattern))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/__init__.py", "lineno": 334, "message": "in _compile_template"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def parse_template(source, pattern):", "        # parse 're' replacement string into list of literals and", "        # group references", "        s = Tokenizer(source)", "        sget = s.get", "        result = []", "        literal = []", "        lappend = literal.append", "        def addliteral():", "            if s.istext:", "                result.append(''.join(literal))", "            else:", "                # The tokenizer implicitly decodes bytes objects as latin-1, we must", "                # therefore re-encode the final representation.", "                result.append(''.join(literal).encode('latin-1'))", "            del literal[:]", "        def addgroup(index, pos):", "            if index > pattern.groups:", "                raise s.error(\"invalid group reference %d\" % index, pos)", "            addliteral()", "            result.append(index)", "        groupindex = pattern.groupindex", "        while True:", "            this = sget()", "            if this is None:", "                break # end of replacement string", "            if this[0] == \"\\\\\":", "                # group", "                c = this[1]", "                if c == \"g\":", "                    if not s.match(\"<\"):", "                        raise s.error(\"missing <\")", "                    name = s.getuntil(\">\", \"group name\")", "                    if not (name.isdecimal() and name.isascii()):", "                        s.checkgroupname(name, 1)", "                        try:", "                            index = groupindex[name]", "                        except KeyError:", "                            raise IndexError(\"unknown group name %r\" % name) from None", "                    else:", "                        index = int(name)", "                        if index >= MAXGROUPS:", "                            raise s.error(\"invalid group reference %d\" % index,", "                                          len(name) + 1)", "                        if not (name.isdecimal() and name.isascii()):", "                            import warnings", "                            warnings.warn(", "                                \"bad character in group name %s at position %d\" %", "                                (repr(name) if s.istext else ascii(name),", "                                 s.tell() - len(name) - 1),", "                                DeprecationWarning, stacklevel=5", "                            )", "                    addgroup(index, len(name) + 1)", "                elif c == \"0\":", "                    if s.next in OCTDIGITS:", "                        this += sget()", "                        if s.next in OCTDIGITS:", "                            this += sget()", "                    lappend(chr(int(this[1:], 8) & 0xff))", "                elif c in DIGITS:", "                    isoctal = False", "                    if s.next in DIGITS:", "                        this += sget()", "                        if (c in OCTDIGITS and this[2] in OCTDIGITS and", "                            s.next in OCTDIGITS):", "                            this += sget()", "                            isoctal = True", "                            c = int(this[1:], 8)", "                            if c > 0o377:", "                                raise s.error('octal escape value %s outside of '", "                                              'range 0-0o377' % this, len(this))", "                            lappend(chr(c))", "                    if not isoctal:", "                        addgroup(int(this[1:]), len(this) - 1)", "                else:", "                    try:", "                        this = chr(ESCAPES[this][1])", "                    except KeyError:", "                        if c in ASCIILETTERS:", ">                           raise s.error('bad escape %s' % this, len(this)) from None", "E                           re.error: bad escape \\H at position 2"], "reprfuncargs": {"args": [["source", "'\\\\1\\\\H'"], ["pattern", "re.compile('(.)H')"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 1075, "message": "error"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/re/_parser.py", "lineno": 1075, "message": "re.error: bad escape \\H at position 2"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00017706002108752728, "start": 1731096319.1245484, "stop": 1731096319.124726, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "146a1d2ef2fc444db4f351c0791cf52f", "node": "<WorkerController gw0>"}
{"nodeid": "tests30_7_3.py::test_string_of_length_one", "location": ["tests30_7_3.py", 5, "test_string_of_length_one"], "keywords": {"test_string_of_length_one": 1, "tests30_7_3.py": 1, "Folder_7": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00016727193724364042, "start": 1731096319.150317, "stop": 1731096319.1504855, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "146a1d2ef2fc444db4f351c0791cf52f", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
