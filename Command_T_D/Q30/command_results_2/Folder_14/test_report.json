{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests30_14_2.py::test_string_of_length_one", "location": ["tests30_14_2.py", 5, "test_string_of_length_one"], "keywords": {"test_string_of_length_one": 1, "tests30_14_2.py": 1, "Folder_14": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001605340512469411, "start": 1731095705.1911485, "stop": 1731095705.1913095, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "7f983f20c6b74f4bac12ef193e959e47", "node": "<WorkerController gw0>"}
{"nodeid": "tests30_14_2.py::test_length_of_large_string_of_only_specified_character", "location": ["tests30_14_2.py", 15, "test_length_of_large_string_of_only_specified_character"], "keywords": {"test_length_of_large_string_of_only_specified_character": 1, "tests30_14_2.py": 1, "Folder_14": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00014967401511967182, "start": 1731095705.1910744, "stop": 1731095705.1912246, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "7f983f20c6b74f4bac12ef193e959e47", "node": "<WorkerController gw1>"}
{"nodeid": "tests30_14_2.py::test_compare_length_of_strings", "location": ["tests30_14_2.py", 27, "test_compare_length_of_strings"], "keywords": {"test_compare_length_of_strings": 1, "tests30_14_2.py": 1, "Folder_14": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00012872600927948952, "start": 1731095705.191053, "stop": 1731095705.1911821, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "7f983f20c6b74f4bac12ef193e959e47", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_14_2.py::test_compare_length_of_strings", "location": ["tests30_14_2.py", 27, "test_compare_length_of_strings"], "keywords": {"test_compare_length_of_strings": 1, "tests30_14_2.py": 1, "Folder_14": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.00022709998302161694, "start": 1731095705.1913986, "stop": 1731095705.191626, "extras": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "7f983f20c6b74f4bac12ef193e959e47", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_14_2.py::test_compare_length_of_strings", "location": ["tests30_14_2.py", 27, "test_compare_length_of_strings"], "keywords": {"test_compare_length_of_strings": 1, "tests30_14_2.py": 1, "Folder_14": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 8.715398143976927e-05, "start": 1731095705.1919515, "stop": 1731095705.1920395, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "7f983f20c6b74f4bac12ef193e959e47", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_14_2.py::test_length_of_result", "location": ["tests30_14_2.py", 34, "test_length_of_result"], "keywords": {"test_length_of_result": 1, "tests30_14_2.py": 1, "Folder_14": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.668793063610792e-05, "start": 1731095705.1938653, "stop": 1731095705.1939623, "$report_type": "TestReport", "item_index": 5, "worker_id": "gw2", "testrun_uid": "7f983f20c6b74f4bac12ef193e959e47", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_14_2.py::test_length_of_large_string_of_only_specified_character", "location": ["tests30_14_2.py", 15, "test_length_of_large_string_of_only_specified_character"], "keywords": {"test_length_of_large_string_of_only_specified_character": 1, "tests30_14_2.py": 1, "Folder_14": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q30/command_results_2/Folder_14/tests30_14_2.py", "lineno": 18, "message": "AssertionError: assert 3000 == (2 * 1000)\n +  where 3000 = lenn +    whereinsert_before_character('                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ')\n +  and   1000 = len}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_length_of_large_string_of_only_specified_character():", "        s = ' ' * 1000", ">       assert len(insert_before_character(s)) == 2 * len(s)", "E       AssertionError: assert 3000 == (2 * 1000)", "E        +  where 3000 = lenwhereinsert_before_characterand   1000 = lenreprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_2/Folder_14/tests30_14_2.py", "lineno": 18, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_length_of_large_string_of_only_specified_character():", "        s = ' ' * 1000", ">       assert len(insert_before_character(s)) == 2 * len(s)", "E       AssertionError: assert 3000 == (2 * 1000)", "E        +  where 3000 = lenwhereinsert_before_characterand   1000 = lenreprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_2/Folder_14/tests30_14_2.py", "lineno": 18, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q30/command_results_2/Folder_14/tests30_14_2.py", "lineno": 18, "message": "AssertionError: assert 3000 == (2 * 1000)\n +  where 3000 = lenn +    whereinsert_before_charactern +  and   1000 = len}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0005474169738590717, "start": 1731095705.1914456, "stop": 1731095705.1919932, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "7f983f20c6b74f4bac12ef193e959e47", "node": "<WorkerController gw1>"}
{"nodeid": "tests30_14_2.py::test_length_of_large_string_of_only_specified_character", "location": ["tests30_14_2.py", 15, "test_length_of_large_string_of_only_specified_character"], "keywords": {"test_length_of_large_string_of_only_specified_character": 1, "tests30_14_2.py": 1, "Folder_14": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0001045420067384839, "start": 1731095705.2010877, "stop": 1731095705.2011929, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "7f983f20c6b74f4bac12ef193e959e47", "node": "<WorkerController gw1>"}
{"nodeid": "tests30_14_2.py::test_string_of_length_one", "location": ["tests30_14_2.py", 5, "test_string_of_length_one"], "keywords": {"test_string_of_length_one": 1, "tests30_14_2.py": 1, "Folder_14": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q30/command_results_2/Folder_14/tests30_14_2.py", "lineno": 8, "message": "AssertionError: assert ' \\\\ ' == '  '\n  Strings contain only whitespace, escaping them using repr()\n  - '  '\n  + ' \\\\ '\n  ?   ++"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_length_one():", "        s = ' '", ">       assert insert_before_character(s) == ' ' + ' '", "E       AssertionError: assert ' \\\\ ' == '  '", "E         Strings contain only whitespace, escaping them using repr()", "E         - '  '", "E         + ' \\\\ '", "E         ?   ++"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_2/Folder_14/tests30_14_2.py", "lineno": 8, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_length_one():", "        s = ' '", ">       assert insert_before_character(s) == ' ' + ' '", "E       AssertionError: assert ' \\\\ ' == '  '", "E         Strings contain only whitespace, escaping them using repr()", "E         - '  '", "E         + ' \\\\ '", "E         ?   ++"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_2/Folder_14/tests30_14_2.py", "lineno": 8, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q30/command_results_2/Folder_14/tests30_14_2.py", "lineno": 8, "message": "AssertionError: assert ' \\\\ ' == '  '\n  Strings contain only whitespace, escaping them using repr()\n  - '  '\n  + ' \\\\ '\n  ?   ++"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00046160200145095587, "start": 1731095705.191555, "stop": 1731095705.192017, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "7f983f20c6b74f4bac12ef193e959e47", "node": "<WorkerController gw0>"}
{"nodeid": "tests30_14_2.py::test_string_of_length_one", "location": ["tests30_14_2.py", 5, "test_string_of_length_one"], "keywords": {"test_string_of_length_one": 1, "tests30_14_2.py": 1, "Folder_14": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00016823492478579283, "start": 1731095705.2027125, "stop": 1731095705.2028813, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "7f983f20c6b74f4bac12ef193e959e47", "node": "<WorkerController gw0>"}
{"nodeid": "tests30_14_2.py::test_length_of_result", "location": ["tests30_14_2.py", 34, "test_length_of_result"], "keywords": {"test_length_of_result": 1, "tests30_14_2.py": 1, "Folder_14": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q30/command_results_2/Folder_14/tests30_14_2.py", "lineno": 40, "message": "AssertionError: assert 23 == (21 + 1)\n +  where 23 = len('Fz3oa52SmJQ0lXdgnrfh \\\\ ')\n +  and   21 = len('Fz3oa52SmJQ0lXdgnrfh ')"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_length_of_result():", "        s = ''.join(random.sample(string.ascii_letters + string.digits, k=20))", "        s = s + ' '", "        returned_string = insert_before_character(s)", "        count = s.count(' ')", ">       assert len(returned_string) == len(s) + count", "E       AssertionError: assert 23 == (21 + 1)", "E        +  where 23 = len('Fz3oa52SmJQ0lXdgnrfh \\\\ ')", "E        +  and   21 = len('Fz3oa52SmJQ0lXdgnrfh ')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_2/Folder_14/tests30_14_2.py", "lineno": 40, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_length_of_result():", "        s = ''.join(random.sample(string.ascii_letters + string.digits, k=20))", "        s = s + ' '", "        returned_string = insert_before_character(s)", "        count = s.count(' ')", ">       assert len(returned_string) == len(s) + count", "E       AssertionError: assert 23 == (21 + 1)", "E        +  where 23 = len('Fz3oa52SmJQ0lXdgnrfh \\\\ ')", "E        +  and   21 = len('Fz3oa52SmJQ0lXdgnrfh ')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/command_results_2/Folder_14/tests30_14_2.py", "lineno": 40, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q30/command_results_2/Folder_14/tests30_14_2.py", "lineno": 40, "message": "AssertionError: assert 23 == (21 + 1)\n +  where 23 = len('Fz3oa52SmJQ0lXdgnrfh \\\\ ')\n +  and   21 = len('Fz3oa52SmJQ0lXdgnrfh ')"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00025977299083024263, "start": 1731095705.1940713, "stop": 1731095705.1943314, "extras": [], "$report_type": "TestReport", "item_index": 5, "worker_id": "gw2", "testrun_uid": "7f983f20c6b74f4bac12ef193e959e47", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_14_2.py::test_length_of_result", "location": ["tests30_14_2.py", 34, "test_length_of_result"], "keywords": {"test_length_of_result": 1, "tests30_14_2.py": 1, "Folder_14": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00011332402937114239, "start": 1731095705.2046304, "stop": 1731095705.204744, "$report_type": "TestReport", "item_index": 5, "worker_id": "gw2", "testrun_uid": "7f983f20c6b74f4bac12ef193e959e47", "node": "<WorkerController gw2>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
