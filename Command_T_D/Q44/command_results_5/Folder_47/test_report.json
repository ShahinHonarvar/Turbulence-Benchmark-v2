{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests44_47_5.py::test_list_of_primes", "location": ["tests44_47_5.py", 3, "test_list_of_primes"], "keywords": {"test_list_of_primes": 1, "tests44_47_5.py": 1, "Folder_47": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00013831991236656904, "start": 1731124451.3368092, "stop": 1731124451.3369477, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "1d82663794544c0b87b2635387b760d8", "node": "<WorkerController gw0>"}
{"nodeid": "tests44_47_5.py::test_list_of_non_prime_nums", "location": ["tests44_47_5.py", 14, "test_list_of_non_prime_nums"], "keywords": {"test_list_of_non_prime_nums": 1, "tests44_47_5.py": 1, "Folder_47": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00019112403970211744, "start": 1731124451.3367064, "stop": 1731124451.3368979, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "1d82663794544c0b87b2635387b760d8", "node": "<WorkerController gw2>"}
{"nodeid": "tests44_47_5.py::test_list_of_ones", "location": ["tests44_47_5.py", 9, "test_list_of_ones"], "keywords": {"test_list_of_ones": 1, "tests44_47_5.py": 1, "Folder_47": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00026417290791869164, "start": 1731124451.3369534, "stop": 1731124451.337218, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "1d82663794544c0b87b2635387b760d8", "node": "<WorkerController gw1>"}
{"nodeid": "tests44_47_5.py::test_list_of_ones", "location": ["tests44_47_5.py", 9, "test_list_of_ones"], "keywords": {"test_list_of_ones": 1, "tests44_47_5.py": 1, "Folder_47": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q44/command_results_5/Folder_47/tests44_47_5.py", "lineno": 12, "message": "assert {(1, 1)} == set()\n  Extra items in the left set:\n  (1, 1)\n  Full diff:\n  - set()\n  + {(1, 1)}"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_ones():", "        list_of_ones = [1 if i % 2 == 0 else 1 for i in range(88 + 100)]", ">       assert composite_nums_between_indices(list_of_ones) == set()", "E       assert {(1, 1)} == set()", "E         Extra items in the left set:", "E         (1, 1)", "E         Full diff:", "E         - set()", "E         + {(1, 1)}"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q44/command_results_5/Folder_47/tests44_47_5.py", "lineno": 12, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_ones():", "        list_of_ones = [1 if i % 2 == 0 else 1 for i in range(88 + 100)]", ">       assert composite_nums_between_indices(list_of_ones) == set()", "E       assert {(1, 1)} == set()", "E         Extra items in the left set:", "E         (1, 1)", "E         Full diff:", "E         - set()", "E         + {(1, 1)}"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q44/command_results_5/Folder_47/tests44_47_5.py", "lineno": 12, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q44/command_results_5/Folder_47/tests44_47_5.py", "lineno": 12, "message": "assert {(1, 1)} == set()\n  Extra items in the left set:\n  (1, 1)\n  Full diff:\n  - set()\n  + {(1, 1)}"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.002815149025991559, "start": 1731124451.337478, "stop": 1731124451.3402936, "extras": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "1d82663794544c0b87b2635387b760d8", "node": "<WorkerController gw1>"}
{"nodeid": "tests44_47_5.py::test_list_of_ones", "location": ["tests44_47_5.py", 9, "test_list_of_ones"], "keywords": {"test_list_of_ones": 1, "tests44_47_5.py": 1, "Folder_47": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00011797400657087564, "start": 1731124451.3516276, "stop": 1731124451.3517466, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw1", "testrun_uid": "1d82663794544c0b87b2635387b760d8", "node": "<WorkerController gw1>"}
{"nodeid": "tests44_47_5.py::test_list_of_primes", "location": ["tests44_47_5.py", 3, "test_list_of_primes"], "keywords": {"test_list_of_primes": 1, "tests44_47_5.py": 1, "Folder_47": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q44/command_results_5/Folder_47/tests44_47_5.py", "lineno": 7, "message": "assert {(2, 2)} == set()\n  Extra items in the left set:\n  (2, 2)\n  Full diff:\n  - set()\n  + {(2, 2)}"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_primes():", "        for n in [2, 3, 5, 7, 11, 13, 17]:", "            list_of_primes = [n for _ in range(88 * 10)]", ">           assert composite_nums_between_indices(list_of_primes) == set()", "E           assert {(2, 2)} == set()", "E             Extra items in the left set:", "E             (2, 2)", "E             Full diff:", "E             - set()", "E             + {(2, 2)}"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q44/command_results_5/Folder_47/tests44_47_5.py", "lineno": 7, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_primes():", "        for n in [2, 3, 5, 7, 11, 13, 17]:", "            list_of_primes = [n for _ in range(88 * 10)]", ">           assert composite_nums_between_indices(list_of_primes) == set()", "E           assert {(2, 2)} == set()", "E             Extra items in the left set:", "E             (2, 2)", "E             Full diff:", "E             - set()", "E             + {(2, 2)}"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q44/command_results_5/Folder_47/tests44_47_5.py", "lineno": 7, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Command_T_D/Q44/command_results_5/Folder_47/tests44_47_5.py", "lineno": 7, "message": "assert {(2, 2)} == set()\n  Extra items in the left set:\n  (2, 2)\n  Full diff:\n  - set()\n  + {(2, 2)}"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.03780547308269888, "start": 1731124451.3371542, "stop": 1731124451.3749604, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "1d82663794544c0b87b2635387b760d8", "node": "<WorkerController gw0>"}
{"nodeid": "tests44_47_5.py::test_list_of_primes", "location": ["tests44_47_5.py", 3, "test_list_of_primes"], "keywords": {"test_list_of_primes": 1, "tests44_47_5.py": 1, "Folder_47": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00010375597048550844, "start": 1731124451.3860826, "stop": 1731124451.3861868, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "1d82663794544c0b87b2635387b760d8", "node": "<WorkerController gw0>"}
{"nodeid": "tests44_47_5.py::test_list_of_non_prime_nums", "location": ["tests44_47_5.py", 14, "test_list_of_non_prime_nums"], "keywords": {"test_list_of_non_prime_nums": 1, "tests44_47_5.py": 1, "Folder_47": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/difflib.py", "lineno": 937, "message": "Failed: Timeout >7.0s"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_non_prime_nums():", "        for n in range(2,10):", "            list_of_non_prime_nums = [n*i for i in range(2, (88 + 1) * 10)]", "            expected_result = list_of_non_prime_nums[75:88 + 1]", ">           assert composite_nums_between_indices(list_of_non_prime_nums) == set(expected_result)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q44/command_results_5/Folder_47/tests44_47_5.py", "lineno": 19, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    custom = util._reprcompare(ops[i], each_obj[i], each_obj[i + 1])"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/rewrite.py", "lineno": 499, "message": "in _call_reprcompare"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    hook_result = ihook.pytest_assertrepr_compare("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/__init__.py", "lineno": 141, "message": "in callbinrepr"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/pluggy/_hooks.py", "lineno": 265, "message": "in __call__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/pluggy/_manager.py", "lineno": 80, "message": "in _hookexec"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return util.assertrepr_compare(config=config, op=op, left=left, right=right)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/__init__.py", "lineno": 181, "message": "in pytest_assertrepr_compare"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    explanation = _compare_eq_any(left, right, verbose)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/util.py", "lineno": 192, "message": "in assertrepr_compare"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    expl = _compare_eq_iterable(left, right, verbose)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/util.py", "lineno": 241, "message": "in _compare_eq_any"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    explanation.extend("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/util.py", "lineno": 332, "message": "in _compare_eq_iterable"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    explanation.extend("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/util.py", "lineno": 332, "message": "in <genexpr>"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    yield from g"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/difflib.py", "lineno": 872, "message": "in compare"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _fancy_replace(self, a, alo, ahi, b, blo, bhi):", "        r\"\"\"", "        When replacing one block of lines with another, search the blocks", "        for *similar* lines; the best-matching pair (if any) is used as a", "        synch point, and intraline difference marking is done on the", "        similar pair. Lots of work, but often worth it.", "    ", "        Example:", "    ", "        >>> d = Differ()", "        >>> results = d._fancy_replace(['abcDefghiJkl\\n'], 0, 1,", "        ...                            ['abcdefGhijkl\\n'], 0, 1)", "        >>> print(''.join(results), end=\"\")", "        - abcDefghiJkl", "        ?    ^  ^  ^", "        + abcdefGhijkl", "        ?    ^  ^  ^", "        \"\"\"", "    ", "        # don't synch up unless the lines have a similarity score of at", "        # least cutoff; best_ratio tracks the best score seen so far", "        best_ratio, cutoff = 0.74, 0.75", "        cruncher = SequenceMatcher(self.charjunk)", "        eqi, eqj = None, None   # 1st indices of equal lines (if any)", "    ", "        # search for the pair that matches best without being identical", "        # (identical lines must be junk lines, & we don't want to synch up", "        # on junk -- unless we have to)", "        for j in range(blo, bhi):", "            bj = b[j]", "            cruncher.set_seq2(bj)", "            for i in range(alo, ahi):", "                ai = a[i]", "                if ai == bj:", "                    if eqi is None:", "                        eqi, eqj = i, j", "                    continue", "                cruncher.set_seq1(ai)", "                # computing similarity is expensive, so use the quick", "                # upper bounds first -- have seen this speed up messy", "                # compares by a factor of 3.", "                # note that ratio() is only expensive to compute the first", "                # time it's called on a sequence pair; the expensive part", "                # of the computation is cached by cruncher", ">               if cruncher.real_quick_ratio() > best_ratio and \\", "                      cruncher.quick_ratio() > best_ratio and \\", "                      cruncher.ratio() > best_ratio:", "E                     Failed: Timeout >7.0s"], "reprfuncargs": {"args": [["self", "<difflib.Differ object at 0x7f12cf7e0d70>"], ["a", "['{', ' 154,', ' 156,', ' 158,', ' 160,', ' 162,', ...]"], ["alo", "1"], ["ahi", "15"], ["b", "['{', ' (4,', '  6),', ' (4,', '  8),', ' (4,', ...]"], ["blo", "1"], ["bhi", "1069769"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/difflib.py", "lineno": 937, "message": "Failed"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_non_prime_nums():", "        for n in range(2,10):", "            list_of_non_prime_nums = [n*i for i in range(2, (88 + 1) * 10)]", "            expected_result = list_of_non_prime_nums[75:88 + 1]", ">           assert composite_nums_between_indices(list_of_non_prime_nums) == set(expected_result)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q44/command_results_5/Folder_47/tests44_47_5.py", "lineno": 19, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    custom = util._reprcompare(ops[i], each_obj[i], each_obj[i + 1])"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/rewrite.py", "lineno": 499, "message": "in _call_reprcompare"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    hook_result = ihook.pytest_assertrepr_compare("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/__init__.py", "lineno": 141, "message": "in callbinrepr"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/pluggy/_hooks.py", "lineno": 265, "message": "in __call__"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/pluggy/_manager.py", "lineno": 80, "message": "in _hookexec"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    return util.assertrepr_compare(config=config, op=op, left=left, right=right)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/__init__.py", "lineno": 181, "message": "in pytest_assertrepr_compare"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    explanation = _compare_eq_any(left, right, verbose)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/util.py", "lineno": 192, "message": "in assertrepr_compare"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    expl = _compare_eq_iterable(left, right, verbose)"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/util.py", "lineno": 241, "message": "in _compare_eq_any"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    explanation.extend("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/util.py", "lineno": 332, "message": "in _compare_eq_iterable"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    explanation.extend("], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/assertion/util.py", "lineno": 332, "message": "in <genexpr>"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    yield from g"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/difflib.py", "lineno": 872, "message": "in compare"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def _fancy_replace(self, a, alo, ahi, b, blo, bhi):", "        r\"\"\"", "        When replacing one block of lines with another, search the blocks", "        for *similar* lines; the best-matching pair (if any) is used as a", "        synch point, and intraline difference marking is done on the", "        similar pair. Lots of work, but often worth it.", "    ", "        Example:", "    ", "        >>> d = Differ()", "        >>> results = d._fancy_replace(['abcDefghiJkl\\n'], 0, 1,", "        ...                            ['abcdefGhijkl\\n'], 0, 1)", "        >>> print(''.join(results), end=\"\")", "        - abcDefghiJkl", "        ?    ^  ^  ^", "        + abcdefGhijkl", "        ?    ^  ^  ^", "        \"\"\"", "    ", "        # don't synch up unless the lines have a similarity score of at", "        # least cutoff; best_ratio tracks the best score seen so far", "        best_ratio, cutoff = 0.74, 0.75", "        cruncher = SequenceMatcher(self.charjunk)", "        eqi, eqj = None, None   # 1st indices of equal lines (if any)", "    ", "        # search for the pair that matches best without being identical", "        # (identical lines must be junk lines, & we don't want to synch up", "        # on junk -- unless we have to)", "        for j in range(blo, bhi):", "            bj = b[j]", "            cruncher.set_seq2(bj)", "            for i in range(alo, ahi):", "                ai = a[i]", "                if ai == bj:", "                    if eqi is None:", "                        eqi, eqj = i, j", "                    continue", "                cruncher.set_seq1(ai)", "                # computing similarity is expensive, so use the quick", "                # upper bounds first -- have seen this speed up messy", "                # compares by a factor of 3.", "                # note that ratio() is only expensive to compute the first", "                # time it's called on a sequence pair; the expensive part", "                # of the computation is cached by cruncher", ">               if cruncher.real_quick_ratio() > best_ratio and \\", "                      cruncher.quick_ratio() > best_ratio and \\", "                      cruncher.ratio() > best_ratio:", "E                     Failed: Timeout >7.0s"], "reprfuncargs": {"args": [["self", "<difflib.Differ object at 0x7f12cf7e0d70>"], ["a", "['{', ' 154,', ' 156,', ' 158,', ' 160,', ' 162,', ...]"], ["alo", "1"], ["ahi", "15"], ["b", "['{', ' (4,', '  6),', ' (4,', '  8),', ' (4,', ...]"], ["blo", "1"], ["bhi", "1069769"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/difflib.py", "lineno": 937, "message": "Failed"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/difflib.py", "lineno": 937, "message": "Failed: Timeout >7.0s"}, null]]}, "when": "call", "user_properties": [], "sections": [["Captured stdout call", "~~~~~~~~~~~~~~~~~~~~~ Stack of <unknown> (139718777898560) ~~~~~~~~~~~~~~~~~~~~~\n  File \"/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/execnet/gateway_base.py\", line 411, in _perform_spawn\n    reply.run()\n  File \"/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/execnet/gateway_base.py\", line 341, in run\n    self._result = func(*args, **kwargs)\n  File \"/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/execnet/gateway_base.py\", line 1160, in _thread_receiver\n    msg = Message.from_io(io)\n  File \"/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/execnet/gateway_base.py\", line 567, in from_io\n    header = io.read(9)  # type 1, channel 4, payload 4\n  File \"/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/execnet/gateway_base.py\", line 534, in read\n    data = self._read(numbytes - len(buf))\n"]], "duration": 6.999819727032445, "start": 1731124451.3370783, "stop": 1731124458.3368988, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "1d82663794544c0b87b2635387b760d8", "node": "<WorkerController gw2>"}
{"nodeid": "tests44_47_5.py::test_list_of_non_prime_nums", "location": ["tests44_47_5.py", 14, "test_list_of_non_prime_nums"], "keywords": {"test_list_of_non_prime_nums": 1, "tests44_47_5.py": 1, "Folder_47": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [["Captured stdout call", "~~~~~~~~~~~~~~~~~~~~~ Stack of <unknown> (139718777898560) ~~~~~~~~~~~~~~~~~~~~~\n  File \"/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/execnet/gateway_base.py\", line 411, in _perform_spawn\n    reply.run()\n  File \"/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/execnet/gateway_base.py\", line 341, in run\n    self._result = func(*args, **kwargs)\n  File \"/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/execnet/gateway_base.py\", line 1160, in _thread_receiver\n    msg = Message.from_io(io)\n  File \"/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/execnet/gateway_base.py\", line 567, in from_io\n    header = io.read(9)  # type 1, channel 4, payload 4\n  File \"/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/execnet/gateway_base.py\", line 534, in read\n    data = self._read(numbytes - len(buf))\n"]], "duration": 0.00012238696217536926, "start": 1731124458.3820627, "stop": 1731124458.382186, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "1d82663794544c0b87b2635387b760d8", "node": "<WorkerController gw2>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
