{
  "parameter(s)": [
    34
  ],
  "test_string_of_spaces_and_letters": [
    "passed",
    "",
    0.00016
  ],
  "test_string_of_punctuations": [
    "passed",
    "",
    0.00013
  ],
  "test_string_of_punctuations_and_letters": [
    "passed",
    "",
    0.00012
  ],
  "test_string_of_many_punctuations_and_letters": [
    "passed",
    "",
    0.00012
  ],
  "test_string_of_many_punctuations_and_letters_and_spaces": [
    "passed",
    "",
    0.00012
  ],
  "test_string_of_many_chars": [
    "failed",
    "AssertionError: assert not {('abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcde', 'f')}\n +  where {('abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcde', 'f')} = palindrome_of_length_at_least_n('abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef')",
    0.00055
  ],
  "test_string_of_similar_chars_of_length_34": [
    "failed",
    "AssertionError: assert {('aaaaaaaaaa...aaaaaa', 'a')} == {'aaaaaaaaaaa...aaaaaaaaaaaa'}\n  Extra items in the left set:\n  ('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'a')\n  Extra items in the right set:\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n  Full diff:\n  - {'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'}\n  + {('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'a')}\n  ?  +                                  ++++  +",
    0.00113
  ],
  "test_length_of_palindrome": [
    "failed",
    "AssertionError: assert 34 <= 2\n +  where 2 = len(('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'a'))",
    0.00028
  ]
}