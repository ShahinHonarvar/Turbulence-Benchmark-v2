text='```python\nimport numpy as np\n\n\ndef submatrix_with_particular_sum(matrix: np.ndarray) -> list[np.ndarray]:\n    if not isinstance(matrix, np.ndarray):\n        raise TypeError("Input must be a numpy ndarray.")\n    if matrix.ndim != 2:\n        raise ValueError("Input must be a two-dimensional matrix.")\n    if not np.issubdtype(matrix.dtype, np.integer):\n        raise TypeError("Input matrix must contain only integers.")\n\n    target_sum = -128\n    num_rows, num_cols = matrix.shape\n    submatrices = []\n\n    for i in range(num_rows):\n        for j in range(num_cols):\n            for h in range(i, num_rows):\n                for w in range(j, num_cols):\n                    submatrix = matrix[i : h + 1, j : w + 1]\n                    if submatrix.sum() == target_sum:\n                        submatrices.append(submatrix)\n\n    return submatrices\n```' generation_id='c734ab6a-f13d-4ace-9566-ce59593ffa3e' citations=None documents=None is_search_required=None search_queries=None search_results=None finish_reason='COMPLETE' tool_calls=None chat_history=[Message_User(role='USER', message="<Write a function called 'submatrix_with_particular_sum' that takes one argument which is a two-dimensional numpy matrix of integers. The function should return the list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals -128. If no such submatrix is found, the function should return an empty list.>", tool_calls=None), Message_Chatbot(role='CHATBOT', message='```python\nimport numpy as np\n\n\ndef submatrix_with_particular_sum(matrix: np.ndarray) -> list[np.ndarray]:\n    if not isinstance(matrix, np.ndarray):\n        raise TypeError("Input must be a numpy ndarray.")\n    if matrix.ndim != 2:\n        raise ValueError("Input must be a two-dimensional matrix.")\n    if not np.issubdtype(matrix.dtype, np.integer):\n        raise TypeError("Input matrix must contain only integers.")\n\n    target_sum = -128\n    num_rows, num_cols = matrix.shape\n    submatrices = []\n\n    for i in range(num_rows):\n        for j in range(num_cols):\n            for h in range(i, num_rows):\n                for w in range(j, num_cols):\n                    submatrix = matrix[i : h + 1, j : w + 1]\n                    if submatrix.sum() == target_sum:\n                        submatrices.append(submatrix)\n\n    return submatrices\n```', tool_calls=None)] prompt=None meta=ApiMeta(api_version=ApiMetaApiVersion(version='1', is_deprecated=None, is_experimental=None), billed_units=ApiMetaBilledUnits(input_tokens=127.0, output_tokens=221.0, search_units=None, classifications=None), tokens=ApiMetaTokens(input_tokens=286.0, output_tokens=221.0), warnings=None) response_id='2e67867b-0340-483d-827c-39f0a5cfe00c'