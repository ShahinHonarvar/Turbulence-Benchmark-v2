{
  "parameter(s)": [
    96
  ],
  "test_matrix_of_one_integer": [
    "passed",
    "",
    0.00185
  ],
  "test_matrix_of_having_96_integers": [
    "failed",
    "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[ -70,  -65],\\n        [ -15,  -81],\\n        [  49,   49],\\n        [  53,   93],\\n        [  58,  -28],\\n        [  14,   11],\\n        [  14,  -71],\\n        [  80,  -46],\\n        [ -73,  -83],\\n        [ -57,   80],\\n        [  -1,   95],\\n        [ -44,  -80],\\n        [  -9,  -81],\\n        [ -44,   21],\\n        [   4,  -49],\\n        [ -75,   93],\\n        [  81,   23],\\n        [   3, -100],\\n        [  60,  -96],\\n        [ -92,  -19],\\n        [ -96,  -70],\\n        [ -59,    9],\\n        [  37,   90],\\n        [  16,   14],\\n        [  -6,   83],\\n        [  23,  -12],\\n        [  36,   84],\\n        [ -43,   73],\\n        [  13,   44],\\n        [  25,   13],\\n        [ 100,   47],\\n        [  76,   11],\\n        [  61,   30],\\n        [ -52,   17],\\n        [ -67,   84],\\n        [  56,   99],\\n        [ -92,  -74],\\n        [ -29,   64],\\n        [ -88,  -72],\\n        [ -17,   76],\\n        [ -92,   59],\\n        [ -52,   27],\\n        [ -19,   30],\\n        [ -48,  -29],\\n        [ -84,  -40],\\n        [ -81,  -28],\\n        [  81,   58],\\n        [  -2,   18]]))",
    0.00328
  ],
  "test_vertical_matrix": [
    "failed",
    "assert 0 == 193",
    0.00532
  ],
  "test_horizontal_matrix": [
    "failed",
    "assert 0 == 193",
    0.00045
  ]
}