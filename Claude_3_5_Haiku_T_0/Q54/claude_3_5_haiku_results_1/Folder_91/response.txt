Message(id='msg_01WQn9fUPKss2m9PL4LjiFcp', content=[TextBlock(text="Here's the Python implementation for the specified function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_right_truncatable_prime(nums):\n    x = nums[0]\n    result = []\n    \n    for num in range(x - 1, 1, -1):\n        if is_prime(num):\n            truncatable = True\n            truncated = num\n            \n            while truncated > 9:\n                truncated //= 10\n                if not is_prime(truncated):\n                    truncatable = False\n                    break\n            \n            if truncatable:\n                result.append(num)\n    \n    return result\n```\n\nThis implementation does the following:\n\n1. The `is_prime` helper function checks if a given number is prime by testing divisibility up to the square root of the number.\n\n2. The `all_right_truncatable_prime` function takes a tuple of positive integers as input, with the first element being the upper limit `x`.\n\n3. It iterates through numbers from `x - 1` down to 2 in descending order.\n\n4. For each number, it first checks if the number itself is prime.\n\n5. If the number is prime, it then checks if the number remains prime when digits are successively removed from the right.\n\n6. If a number passes both prime checks, it is added to the result list.\n\n7. The function returns the list of right-truncatable prime numbers sorted in descending order.\n\n8. If no right-truncatable prime numbers are found, an empty list is returned.\n\nThe function handles the requirements by checking primality at each truncation step and building a list of right-truncatable prime numbers less than the given input.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=172, output_tokens=441))