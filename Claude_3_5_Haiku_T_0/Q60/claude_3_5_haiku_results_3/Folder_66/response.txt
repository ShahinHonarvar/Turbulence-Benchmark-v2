Message(id='msg_01JcXvMLWkUVMSaZRE1fsSwG', content=[TextBlock(text="Here's the Python implementation:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[25]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if '0' in str(num):\n            continue\n        \n        is_truncatable = True\n        temp_num = num\n        \n        while temp_num > 9:\n            temp_num //= 10\n            if not is_prime(temp_num):\n                is_truncatable = False\n                break\n        \n        if not is_prime(temp_num):\n            is_truncatable = False\n        \n        if is_truncatable:\n            temp_num = num\n            while temp_num > 9:\n                temp_num %= 10**(len(str(temp_num))-1)\n                if not is_prime(temp_num):\n                    is_truncatable = False\n                    break\n        \n        if is_truncatable and is_prime(num):\n            result.append(num)\n    \n    return result\n```\n\nThis implementation does the following:\n\n1. The `is_prime` helper function checks if a given number is prime.\n\n2. The `all_left_right_truncatable_prime` function takes a tuple of numbers and uses the number at index 25 as the upper limit.\n\n3. It iterates through numbers from x down to 12 (since single-digit primes are trivially truncatable).\n\n4. It skips numbers containing 0.\n\n5. For each number, it checks if it remains prime when digits are successively removed from the left and right.\n\n6. If a number passes all checks and is prime, it is added to the result list.\n\n7. The result list is returned in descending order.\n\nThe function handles the requirements of finding left-and-right-truncatable prime numbers less than or equal to the specified number, with the additional constraint of not containing 0.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=516))