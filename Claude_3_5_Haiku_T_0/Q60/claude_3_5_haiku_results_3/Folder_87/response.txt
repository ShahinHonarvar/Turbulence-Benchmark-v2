Message(id='msg_01VMoKcc8HxrwxPiUDtDgfJx', content=[TextBlock(text="Here's the Python implementation for the specified function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[39]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if '0' in str(num):\n            continue\n        \n        is_truncatable = True\n        temp_num = num\n        \n        while temp_num > 9:\n            temp_num //= 10\n            if not is_prime(temp_num):\n                is_truncatable = False\n                break\n        \n        if not is_prime(temp_num):\n            is_truncatable = False\n        \n        if is_truncatable:\n            temp_num = num\n            while temp_num > 9:\n                temp_num %= 10**(len(str(temp_num)) - 1)\n                if not is_prime(temp_num):\n                    is_truncatable = False\n                    break\n        \n        if is_truncatable and is_prime(num):\n            result.append(num)\n    \n    return result\n```\n\nThis implementation follows the requirements:\n\n1. The function `all_left_right_truncatable_prime` takes a tuple of positive integers as input.\n2. It uses the integer at index 39 as the upper limit `x`.\n3. It finds all left-and-right-truncatable prime numbers less than or equal to `x`.\n4. The `is_prime` helper function checks if a number is prime.\n5. The main function checks each number from `x` down to 12:\n   - Skips numbers containing 0\n   - Checks if the number remains prime when digits are removed from left and right\n   - Adds the number to the result list if it meets the criteria\n6. The result is sorted in descending order by default (due to the reverse iteration)\n7. Returns an empty list if no such numbers are found\n\nThe function handles the requirements of left-and-right truncatable primes by systematically checking the number and its truncated versions for primality.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=544))