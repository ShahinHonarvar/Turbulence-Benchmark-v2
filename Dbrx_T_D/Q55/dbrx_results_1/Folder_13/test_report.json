{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1277, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1277, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1277, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1277, "_consider_importhook"]}
{"pytest_version": "8.3.3", "$report_type": "SessionStart"}
{"nodeid": "tests55_13_1.py::test_list_of_single_number", "location": ["tests55_13_1.py", 5, "test_list_of_single_number"], "keywords": {"test_list_of_single_number": 1, "tests55_13_1.py": 1, "Folder_13": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 8.115824311971664e-05, "start": 1738498368.6121843, "stop": 1738498368.6122658, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "acfef194c3774c248ff3200364194bbc", "node": "<WorkerController gw0>"}
{"nodeid": "tests55_13_1.py::test_list_of_single_number", "location": ["tests55_13_1.py", 5, "test_list_of_single_number"], "keywords": {"test_list_of_single_number": 1, "tests55_13_1.py": 1, "Folder_13": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 8.424557745456696e-05, "start": 1738498368.6123788, "stop": 1738498368.6124635, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "acfef194c3774c248ff3200364194bbc", "node": "<WorkerController gw0>"}
{"nodeid": "tests55_13_1.py::test_list_of_single_number", "location": ["tests55_13_1.py", 5, "test_list_of_single_number"], "keywords": {"test_list_of_single_number": 1, "tests55_13_1.py": 1, "Folder_13": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 5.067698657512665e-05, "start": 1738498368.612662, "stop": 1738498368.6127129, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "acfef194c3774c248ff3200364194bbc", "node": "<WorkerController gw0>"}
{"nodeid": "tests55_13_1.py::test_presence_of_duplicates_in_result", "location": ["tests55_13_1.py", 9, "test_presence_of_duplicates_in_result"], "keywords": {"test_presence_of_duplicates_in_result": 1, "tests55_13_1.py": 1, "Folder_13": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 5.474500358104706e-05, "start": 1738498368.6137266, "stop": 1738498368.6137815, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "acfef194c3774c248ff3200364194bbc", "node": "<WorkerController gw0>"}
{"nodeid": "tests55_13_1.py::test_presence_of_duplicates_in_result", "location": ["tests55_13_1.py", 9, "test_presence_of_duplicates_in_result"], "keywords": {"test_presence_of_duplicates_in_result": 1, "tests55_13_1.py": 1, "Folder_13": 1, "": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Dbrx_T_D/Q55/dbrx_results_1/Folder_13/tests55_13_1.py", "lineno": 21, "message": "assert (0 == 3)\n +  where 0 = <built-in method count of list object at 0x73232c358900>([54])\n +    where <built-in method count of list object at 0x73232c358900> = [[1, 54], [54, 1], [1, 54], [54, 1], [1, 54], [54, 1]].count"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_presence_of_duplicates_in_result():", "        input_list = [1, 54, 1, 54, 1, 54]", "        result = lists_with_product_equal_n(input_list)", "        if 54 == 0:", "            assert result.count([0]) == 3 and result.count([1, 0]) == 3 and result.count([0, 1]) == 3 and result.count(", "            [1, 0, 1]) == 3 and result.count([0, 1, 0]) == 3 and result.count([1, 0, 1, 0]) == 3 and result.count(", "            [0, 1, 0, 1]) == 3 and result.count([0, 1, 0, 1, 0]) == 3 and result.count(", "            [1, 0, 1, 0, 1]) == 3 and result.count([1, 0, 1, 0, 1, 0]) == 3 and result.count([0, 1, 0, 1, 0, 1]) == 3", "        elif 54 == 1:", "            assert result.count([54]) == 6 and result.count([1, 54]) == 6 and result.count([54, 1]) == 6 and result.count([1, 54, 1]) == 6", "        else:", ">           assert result.count([54]) == 3 and result.count([1, 54]) == 3 and result.count([54, 1]) == 3 and result.count([1, 54, 1]) == 3", "E           assert (0 == 3)", "E            +  where 0 = <built-in method count of list object at 0x73232c358900>([54])", "E            +    where <built-in method count of list object at 0x73232c358900> = [[1, 54], [54, 1], [1, 54], [54, 1], [1, 54], [54, 1]].count"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q55/dbrx_results_1/Folder_13/tests55_13_1.py", "lineno": 21, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_presence_of_duplicates_in_result():", "        input_list = [1, 54, 1, 54, 1, 54]", "        result = lists_with_product_equal_n(input_list)", "        if 54 == 0:", "            assert result.count([0]) == 3 and result.count([1, 0]) == 3 and result.count([0, 1]) == 3 and result.count(", "            [1, 0, 1]) == 3 and result.count([0, 1, 0]) == 3 and result.count([1, 0, 1, 0]) == 3 and result.count(", "            [0, 1, 0, 1]) == 3 and result.count([0, 1, 0, 1, 0]) == 3 and result.count(", "            [1, 0, 1, 0, 1]) == 3 and result.count([1, 0, 1, 0, 1, 0]) == 3 and result.count([0, 1, 0, 1, 0, 1]) == 3", "        elif 54 == 1:", "            assert result.count([54]) == 6 and result.count([1, 54]) == 6 and result.count([54, 1]) == 6 and result.count([1, 54, 1]) == 6", "        else:", ">           assert result.count([54]) == 3 and result.count([1, 54]) == 3 and result.count([54, 1]) == 3 and result.count([1, 54, 1]) == 3", "E           assert (0 == 3)", "E            +  where 0 = <built-in method count of list object at 0x73232c358900>([54])", "E            +    where <built-in method count of list object at 0x73232c358900> = [[1, 54], [54, 1], [1, 54], [54, 1], [1, 54], [54, 1]].count"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q55/dbrx_results_1/Folder_13/tests55_13_1.py", "lineno": 21, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Dbrx_T_D/Q55/dbrx_results_1/Folder_13/tests55_13_1.py", "lineno": 21, "message": "assert (0 == 3)\n +  where 0 = <built-in method count of list object at 0x73232c358900>([54])\n +    where <built-in method count of list object at 0x73232c358900> = [[1, 54], [54, 1], [1, 54], [54, 1], [1, 54], [54, 1]].count"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.000339689664542675, "start": 1738498368.6138492, "stop": 1738498368.6141891, "extras": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "acfef194c3774c248ff3200364194bbc", "node": "<WorkerController gw0>"}
{"nodeid": "tests55_13_1.py::test_presence_of_duplicates_in_result", "location": ["tests55_13_1.py", 9, "test_presence_of_duplicates_in_result"], "keywords": {"test_presence_of_duplicates_in_result": 1, "tests55_13_1.py": 1, "Folder_13": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 6.624031811952591e-05, "start": 1738498368.6225052, "stop": 1738498368.6225717, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "acfef194c3774c248ff3200364194bbc", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
