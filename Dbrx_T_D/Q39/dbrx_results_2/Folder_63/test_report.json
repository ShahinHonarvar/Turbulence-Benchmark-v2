{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1277, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1277, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1277, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1277, "_consider_importhook"]}
{"pytest_version": "8.3.3", "$report_type": "SessionStart"}
{"nodeid": "tests39_63_2.py::test_strings_of_size_equal_to_44", "location": ["tests39_63_2.py", 5, "test_strings_of_size_equal_to_44"], "keywords": {"test_strings_of_size_equal_to_44": 1, "tests39_63_2.py": 1, "Folder_63": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 7.927604019641876e-05, "start": 1738487783.0257425, "stop": 1738487783.025822, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "d9419db3e7f34b649838c972e13138d0", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_63_2.py::test_strings_of_size_equal_to_44", "location": ["tests39_63_2.py", 5, "test_strings_of_size_equal_to_44"], "keywords": {"test_strings_of_size_equal_to_44": 1, "tests39_63_2.py": 1, "Folder_63": 1, "": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/json/__init__.py", "lineno": 359, "message": "TypeError: JSONDecoder.__init__() got an unexpected keyword argument 'key'"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_strings_of_size_equal_to_44():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=44))", "        if 'ascending' == 'ascending':", ">           assert return_n_greatest_chars(s) == sorted(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/dbrx_results_2/Folder_63/tests39_63_2.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    sorted_chars = json.loads(json.dumps(list(s)), key=ord)[-44:]"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q39/dbrx_results_2/Folder_63/generated_answer.py", "lineno": 4, "message": "in return_n_greatest_chars"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def loads(s, *, cls=None, object_hook=None, parse_float=None,", "            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):", "        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance", "        containing a JSON document) to a Python object.", "    ", "        ``object_hook`` is an optional function that will be called with the", "        result of any object literal decode (a ``dict``). The return value of", "        ``object_hook`` will be used instead of the ``dict``. This feature", "        can be used to implement custom decoders (e.g. JSON-RPC class hinting).", "    ", "        ``object_pairs_hook`` is an optional function that will be called with the", "        result of any object literal decoded with an ordered list of pairs.  The", "        return value of ``object_pairs_hook`` will be used instead of the ``dict``.", "        This feature can be used to implement custom decoders.  If ``object_hook``", "        is also defined, the ``object_pairs_hook`` takes priority.", "    ", "        ``parse_float``, if specified, will be called with the string", "        of every JSON float to be decoded. By default this is equivalent to", "        float(num_str). This can be used to use another datatype or parser", "        for JSON floats (e.g. decimal.Decimal).", "    ", "        ``parse_int``, if specified, will be called with the string", "        of every JSON int to be decoded. By default this is equivalent to", "        int(num_str). This can be used to use another datatype or parser", "        for JSON integers (e.g. float).", "    ", "        ``parse_constant``, if specified, will be called with one of the", "        following strings: -Infinity, Infinity, NaN.", "        This can be used to raise an exception if invalid JSON numbers", "        are encountered.", "    ", "        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``", "        kwarg; otherwise ``JSONDecoder`` is used.", "        \"\"\"", "        if isinstance(s, str):", "            if s.startswith('\\ufeff'):", "                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",", "                                      s, 0)", "        else:", "            if not isinstance(s, (bytes, bytearray)):", "                raise TypeError(f'the JSON object must be str, bytes or bytearray, '", "                                f'not {s.__class__.__name__}')", "            s = s.decode(detect_encoding(s), 'surrogatepass')", "    ", "        if (cls is None and object_hook is None and", "                parse_int is None and parse_float is None and", "                parse_constant is None and object_pairs_hook is None and not kw):", "            return _default_decoder.decode(s)", "        if cls is None:", "            cls = JSONDecoder", "        if object_hook is not None:", "            kw['object_hook'] = object_hook", "        if object_pairs_hook is not None:", "            kw['object_pairs_hook'] = object_pairs_hook", "        if parse_float is not None:", "            kw['parse_float'] = parse_float", "        if parse_int is not None:", "            kw['parse_int'] = parse_int", "        if parse_constant is not None:", "            kw['parse_constant'] = parse_constant", ">       return cls(**kw).decode(s)", "E       TypeError: JSONDecoder.__init__() got an unexpected keyword argument 'key'"], "reprfuncargs": {"args": [["s", "'[\".\", \"W\", \"a\", \"y\", \"@\", \"{\", \"E\", \"o\", \"t\", \"l\", \"3\", \"O\", \"F\", \"g\", \"J\", \")\", \";\", \"e\", \"1\", \">\", \"p\", \"&\", \"2\", \"c\", \"D\", \"R\", \"w\", \"r\", \"v\", \"m\", \"!\", \"k\", \"i\", \"4\", \"Y\", \"0\", \"Z\", \"?\", \"*\", \" \", \"%\", \"9\", \"M\", \"=\"]'"], ["cls", "<class 'json.decoder.JSONDecoder'>"], ["object_hook", "None"], ["parse_float", "None"], ["parse_int", "None"], ["parse_constant", "None"], ["object_pairs_hook", "None"], ["kw", "{'key': <built-in function ord>}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/json/__init__.py", "lineno": 359, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_strings_of_size_equal_to_44():", "        selection_range = string.ascii_letters + string.digits + ' ' + \"!#$%&()*+,-./:;<=>?@[]^_{|}~\"", "        s = ''.join(random.sample(selection_range, k=44))", "        if 'ascending' == 'ascending':", ">           assert return_n_greatest_chars(s) == sorted(s)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q39/dbrx_results_2/Folder_63/tests39_63_2.py", "lineno": 10, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    sorted_chars = json.loads(json.dumps(list(s)), key=ord)[-44:]"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q39/dbrx_results_2/Folder_63/generated_answer.py", "lineno": 4, "message": "in return_n_greatest_chars"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    def loads(s, *, cls=None, object_hook=None, parse_float=None,", "            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):", "        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance", "        containing a JSON document) to a Python object.", "    ", "        ``object_hook`` is an optional function that will be called with the", "        result of any object literal decode (a ``dict``). The return value of", "        ``object_hook`` will be used instead of the ``dict``. This feature", "        can be used to implement custom decoders (e.g. JSON-RPC class hinting).", "    ", "        ``object_pairs_hook`` is an optional function that will be called with the", "        result of any object literal decoded with an ordered list of pairs.  The", "        return value of ``object_pairs_hook`` will be used instead of the ``dict``.", "        This feature can be used to implement custom decoders.  If ``object_hook``", "        is also defined, the ``object_pairs_hook`` takes priority.", "    ", "        ``parse_float``, if specified, will be called with the string", "        of every JSON float to be decoded. By default this is equivalent to", "        float(num_str). This can be used to use another datatype or parser", "        for JSON floats (e.g. decimal.Decimal).", "    ", "        ``parse_int``, if specified, will be called with the string", "        of every JSON int to be decoded. By default this is equivalent to", "        int(num_str). This can be used to use another datatype or parser", "        for JSON integers (e.g. float).", "    ", "        ``parse_constant``, if specified, will be called with one of the", "        following strings: -Infinity, Infinity, NaN.", "        This can be used to raise an exception if invalid JSON numbers", "        are encountered.", "    ", "        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``", "        kwarg; otherwise ``JSONDecoder`` is used.", "        \"\"\"", "        if isinstance(s, str):", "            if s.startswith('\\ufeff'):", "                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",", "                                      s, 0)", "        else:", "            if not isinstance(s, (bytes, bytearray)):", "                raise TypeError(f'the JSON object must be str, bytes or bytearray, '", "                                f'not {s.__class__.__name__}')", "            s = s.decode(detect_encoding(s), 'surrogatepass')", "    ", "        if (cls is None and object_hook is None and", "                parse_int is None and parse_float is None and", "                parse_constant is None and object_pairs_hook is None and not kw):", "            return _default_decoder.decode(s)", "        if cls is None:", "            cls = JSONDecoder", "        if object_hook is not None:", "            kw['object_hook'] = object_hook", "        if object_pairs_hook is not None:", "            kw['object_pairs_hook'] = object_pairs_hook", "        if parse_float is not None:", "            kw['parse_float'] = parse_float", "        if parse_int is not None:", "            kw['parse_int'] = parse_int", "        if parse_constant is not None:", "            kw['parse_constant'] = parse_constant", ">       return cls(**kw).decode(s)", "E       TypeError: JSONDecoder.__init__() got an unexpected keyword argument 'key'"], "reprfuncargs": {"args": [["s", "'[\".\", \"W\", \"a\", \"y\", \"@\", \"{\", \"E\", \"o\", \"t\", \"l\", \"3\", \"O\", \"F\", \"g\", \"J\", \")\", \";\", \"e\", \"1\", \">\", \"p\", \"&\", \"2\", \"c\", \"D\", \"R\", \"w\", \"r\", \"v\", \"m\", \"!\", \"k\", \"i\", \"4\", \"Y\", \"0\", \"Z\", \"?\", \"*\", \" \", \"%\", \"9\", \"M\", \"=\"]'"], ["cls", "<class 'json.decoder.JSONDecoder'>"], ["object_hook", "None"], ["parse_float", "None"], ["parse_int", "None"], ["parse_constant", "None"], ["object_pairs_hook", "None"], ["kw", "{'key': <built-in function ord>}"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/json/__init__.py", "lineno": 359, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/json/__init__.py", "lineno": 359, "message": "TypeError: JSONDecoder.__init__() got an unexpected keyword argument 'key'"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00012604612857103348, "start": 1738487783.0259607, "stop": 1738487783.0260873, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "d9419db3e7f34b649838c972e13138d0", "node": "<WorkerController gw0>"}
{"nodeid": "tests39_63_2.py::test_strings_of_size_equal_to_44", "location": ["tests39_63_2.py", 5, "test_strings_of_size_equal_to_44"], "keywords": {"test_strings_of_size_equal_to_44": 1, "tests39_63_2.py": 1, "Folder_63": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 7.159728556871414e-05, "start": 1738487783.035424, "stop": 1738487783.0354965, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "d9419db3e7f34b649838c972e13138d0", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
