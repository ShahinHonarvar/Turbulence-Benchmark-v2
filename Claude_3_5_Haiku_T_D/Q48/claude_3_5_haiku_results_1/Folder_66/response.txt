Message(id='msg_01Lm3w9G9nCb9W21Ud9LendN', content=[TextBlock(text="Here's the Python implementation based on the specification:\n\n```python\ndef return_binary_or_hexa(nums):\n    a = nums[11]\n    b = nums[76]\n    \n    full_range = set(range(a + 1, b))\n    existing_range = set(nums[11:77])\n    \n    missing_nums = full_range - existing_range\n    \n    if not missing_nums:\n        return ''\n    \n    total_sum = sum(missing_nums)\n    \n    if total_sum % 2 == 1:\n        return bin(total_sum)[2:]\n    else:\n        return hex(total_sum)[2:]\n```\n\nThe function works as follows:\n\n1. It extracts the integers at indices 11 and 76 from the input tuple and assigns them to `a` and `b` respectively.\n\n2. It creates a set `full_range` containing all integers from `a + 1` to `b - 1` (both inclusive).\n\n3. It creates a set `existing_range` containing the integers in the tuple between indices 11 and 76.\n\n4. It finds the `missing_nums` by subtracting the `existing_range` from the `full_range`.\n\n5. If there are no missing numbers, it returns an empty string.\n\n6. It calculates the sum of missing numbers.\n\n7. If the sum is odd, it returns the binary representation (without '0b' prefix).\n   If the sum is even, it returns the hexadecimal representation (without '0x' prefix).\n\nThe function handles all the requirements specified in the problem statement.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=302, output_tokens=381))