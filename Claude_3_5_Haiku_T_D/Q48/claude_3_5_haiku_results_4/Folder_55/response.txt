Message(id='msg_012P1ngdqP1nsEV9CmUGk2qV', content=[TextBlock(text="Here's a Python implementation of the specified function:\n\n```python\ndef return_binary_or_hexa(tup):\n    a = tup[10]\n    b = tup[12]\n    \n    range_set = set(range(a + 1, b))\n    tuple_subset = set(tup[10:13])\n    \n    missing_nums = range_set - tuple_subset\n    \n    if not missing_nums:\n        return ''\n    \n    total_sum = sum(missing_nums)\n    \n    if total_sum % 2 == 1:\n        return bin(total_sum)[2:]\n    else:\n        return hex(total_sum)[2:]\n```\n\nThis implementation follows the requirements precisely:\n\n1. It extracts the integers at indices 10 and 12 from the input tuple.\n2. It creates a set of all integers from a + 1 to b - 1 (both inclusive).\n3. It creates a set of the integers in the tuple from indices 10 to 12.\n4. It finds the missing numbers by set subtraction.\n5. If there are no missing numbers, it returns an empty string.\n6. Otherwise, it calculates the sum of missing numbers.\n7. If the sum is odd, it returns the binary representation without the '0b' prefix.\n8. If the sum is even, it returns the hexadecimal representation without the '0x' prefix.\n\nThe `bin()` and `hex()` functions automatically slice off the leading '0b' and '0x' prefixes, ensuring the representation starts with the most significant digit.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=302, output_tokens=376))