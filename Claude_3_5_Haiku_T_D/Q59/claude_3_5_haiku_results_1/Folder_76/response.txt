Message(id='msg_01UvD5LGoZWNVJFufRqmxGgE', content=[TextBlock(text="Here's the implementation of the `all_left_truncatable_prime` function based on the specification:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_left_truncatable_prime(num):\n    while num > 0:\n        if not is_prime(num):\n            return False\n        num //= 10\n    return True\n\ndef all_left_truncatable_prime(numbers):\n    x = numbers[370]\n    left_truncatable_primes = []\n    \n    for num in range(x - 1, 1, -1):\n        str_num = str(num)\n        if '0' not in str_num and is_left_truncatable_prime(num):\n            left_truncatable_primes.append(num)\n    \n    return sorted(left_truncatable_primes, reverse=True)\n```\n\nThis implementation does the following:\n\n1. The `is_prime` function checks if a given number is prime by testing divisibility up to its square root.\n\n2. The `is_left_truncatable_prime` function checks if a number is left-truncatable prime by successively removing digits from the left and checking if each resulting number is prime.\n\n3. The `all_left_truncatable_prime` function:\n   - Takes the number at index 370 of the input tuple as x\n   - Iterates through numbers less than x in descending order\n   - Checks if the number contains no 0 and is a left-truncatable prime\n   - Adds qualifying numbers to a list\n   - Returns the list sorted in descending order\n\nThe function will return a list of all left-truncatable prime numbers less than x, sorted from largest to smallest.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=162, output_tokens=444))