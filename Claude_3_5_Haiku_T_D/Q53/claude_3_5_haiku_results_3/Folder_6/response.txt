Message(id='msg_01X67RrVo6mYs5mDBFCCVggc', content=[TextBlock(text="Here's the Python implementation of the function:\n\n```python\ndef palindrome_of_length_at_least_n(s):\n    def is_palindrome(substr):\n        return substr.lower() == substr.lower()[::-1] and substr.isalpha()\n\n    palindromes = set()\n    s = s.lower()\n    \n    for i in range(len(s)):\n        for j in range(i + 22, len(s) + 1):\n            substr = s[i:j]\n            if is_palindrome(substr):\n                palindromes.add(substr)\n    \n    return palindromes\n```\n\nThis function does the following:\n\n1. It defines an inner helper function `is_palindrome` that checks if a substring is a palindrome by:\n   - Converting the substring to lowercase\n   - Checking if the substring reads the same forwards and backwards\n   - Ensuring the substring contains only alphabetic characters\n\n2. It creates an empty set `palindromes` to store unique palindromes.\n\n3. It converts the input string to lowercase to perform case-insensitive matching.\n\n4. It uses nested loops to generate all possible substrings of length 22 or greater.\n\n5. For each substring, it checks if it's a palindrome using the `is_palindrome` function.\n\n6. If a substring is a palindrome, it's added to the `palindromes` set.\n\n7. Finally, it returns the set of palindromes.\n\nThis implementation ensures that only palindromes composed of English letters, with a length of at least 22 characters, are returned in a case-insensitive manner.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=161, output_tokens=380))