Message(id='msg_017KtGrfYjZaxtG2oHtn5xKi', content=[TextBlock(text='```python\nimport numpy as np\n\ndef submatrix_with_n_numbers(matrix):\n    rows, cols = matrix.shape\n    count = 0\n    \n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(cols):\n                for c2 in range(c1, cols):\n                    submatrix = matrix[r1:r2+1, c1:c2+1]\n                    if submatrix.size == 9 and len(np.unique(submatrix)) == 9:\n                        count += 1\n    \n    return count\n```\n\nThis implementation does the following:\n\n1. The function takes a two-dimensional numpy matrix as input.\n\n2. It uses nested loops to generate all possible submatrices of the input matrix.\n\n3. For each submatrix:\n   - It checks if the submatrix size is exactly 9 elements\n   - It checks if the submatrix contains 9 unique integers using `np.unique()`\n\n4. It increments a counter for each valid submatrix found.\n\n5. Finally, it returns the total count of submatrices containing 9 unique integers.\n\nThe function handles different sizes of input matrices and returns 0 if no valid submatrices are found.\n\nKey points:\n- Uses `matrix.shape` to get rows and columns\n- Uses array slicing `matrix[r1:r2+1, c1:c2+1]` to extract submatrices\n- Uses `submatrix.size` to check total elements\n- Uses `np.unique()` to count distinct integers', type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=131, output_tokens=388))