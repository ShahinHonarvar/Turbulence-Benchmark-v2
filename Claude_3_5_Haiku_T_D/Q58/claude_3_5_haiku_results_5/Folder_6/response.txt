Message(id='msg_012rmESQrYYSV8fA66jvYy6M', content=[TextBlock(text="```python\nimport numpy as np\n\ndef submatrix_with_n_numbers(matrix):\n    rows, cols = matrix.shape\n    count = 0\n    \n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(cols):\n                for c2 in range(c1, cols):\n                    submatrix = matrix[r1:r2+1, c1:c2+1]\n                    if submatrix.size == 122:\n                        count += 1\n    \n    return count\n```\n\nThis implementation does the following:\n\n1. It takes a numpy matrix as input.\n2. It gets the number of rows and columns of the matrix.\n3. It uses nested loops to iterate through all possible submatrices of the matrix.\n4. For each submatrix, it checks if the number of elements in the submatrix is exactly 122.\n5. If a submatrix with 122 elements is found, it increments the count.\n6. Finally, it returns the total count of submatrices with 122 elements.\n\nThe function uses numpy's advanced slicing to extract submatrices efficiently. The `.size` attribute gives the total number of elements in the submatrix, which is compared to 122.\n\nThe time complexity of this solution is O(n^4), where n is the larger dimension of the matrix, as it uses four nested loops to generate all possible submatrices.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=131, output_tokens=346))