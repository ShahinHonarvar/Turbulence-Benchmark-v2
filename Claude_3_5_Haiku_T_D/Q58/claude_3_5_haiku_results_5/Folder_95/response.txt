Message(id='msg_01GdnX8fa3UusSk4SiFeXf3z', content=[TextBlock(text="Here's the Python implementation of the function based on the specification:\n\n```python\nimport numpy as np\n\ndef submatrix_with_n_numbers(matrix):\n    rows, cols = matrix.shape\n    count = 0\n    \n    for row_start in range(rows):\n        for row_end in range(row_start, rows):\n            for col_start in range(cols):\n                for col_end in range(col_start, cols):\n                    submatrix = matrix[row_start:row_end+1, col_start:col_end+1]\n                    if submatrix.size == 87:\n                        count += 1\n    \n    return count\n```\n\nThis function does the following:\n\n1. It takes a two-dimensional NumPy matrix as input.\n2. It uses nested loops to iterate through all possible submatrices of the given matrix.\n3. For each submatrix, it checks if the total number of elements is exactly 87.\n4. If a submatrix with 87 elements is found, it increments the count.\n5. Finally, it returns the total count of submatrices with 87 elements.\n\nThe function works as follows:\n- `rows` and `cols` store the dimensions of the input matrix.\n- The outer two loops define the start and end rows of the submatrix.\n- The inner two loops define the start and end columns of the submatrix.\n- `matrix[row_start:row_end+1, col_start:col_end+1]` extracts the submatrix.\n- `submatrix.size` gives the total number of elements in the submatrix.\n- If the size is 87, the count is incremented.\n- If no submatrix with 87 elements is found, the function returns 0.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=131, output_tokens=423))