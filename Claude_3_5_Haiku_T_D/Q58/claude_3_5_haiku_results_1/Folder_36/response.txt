Message(id='msg_01AEu5RiFg2RAZNmRE4auAUv', content=[TextBlock(text='```python\nimport numpy as np\n\ndef submatrix_with_n_numbers(matrix):\n    rows, cols = matrix.shape\n    count = 0\n    \n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(cols):\n                for c2 in range(c1, cols):\n                    submatrix = matrix[r1:r2+1, c1:c2+1]\n                    if np.size(submatrix) == 131:\n                        count += 1\n    \n    return count\n```\n\nThis solution does the following:\n\n1. Takes a numpy matrix as input\n2. Uses nested loops to generate all possible submatrices\n3. Checks if the size of each submatrix is exactly 131 elements\n4. Increments a counter for each valid submatrix\n5. Returns the total count of submatrices with 131 numbers\n6. Returns 0 if no such submatrix is found\n\nThe function:\n- Uses `matrix.shape` to get matrix dimensions\n- Uses nested range loops to generate all possible start and end row/column coordinates\n- Extracts submatrix using numpy slicing\n- Uses `np.size()` to check total number of elements\n- Tracks count of valid submatrices\n- Efficiently handles different matrix sizes and configurations', type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=131, output_tokens=323))