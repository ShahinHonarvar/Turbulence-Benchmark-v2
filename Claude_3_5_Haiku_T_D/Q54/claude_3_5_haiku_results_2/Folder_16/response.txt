Message(id='msg_0123Pctoq54CxAUbjcxDLJdB', content=[TextBlock(text="Here's the Python implementation:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_right_truncatable_prime(prime_tuple):\n    x = prime_tuple[792]\n    right_truncatable_primes = []\n\n    for num in range(2, x):\n        current = num\n        is_right_truncatable = True\n        \n        while current > 0:\n            if not is_prime(current):\n                is_right_truncatable = False\n                break\n            current //= 10\n        \n        if is_right_truncatable and is_prime(num):\n            right_truncatable_primes.append(num)\n\n    return sorted(right_truncatable_primes)\n```\n\nThis implementation does the following:\n\n1. The `is_prime` helper function checks whether a number is prime by testing divisibility up to its square root.\n\n2. The `all_right_truncatable_prime` function:\n   - Takes the value at index 792 of the input tuple as x\n   - Initializes an empty list for right-truncatable primes\n   - Iterates through numbers from 2 to x-1\n   - For each number, checks if it remains prime when digits are successively removed from the right\n   - Adds numbers that satisfy the condition to the list\n   - Returns the sorted list of right-truncatable primes\n\nThe function handles the constraints by checking primality at each truncation step and ensuring the original number is also prime.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=171, output_tokens=391))