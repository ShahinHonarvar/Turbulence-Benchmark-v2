Message(id='msg_01SFEJsc76kNkqeJoEgkMPLa', content=[TextBlock(text="Here's the Python implementation for the specified function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_right_truncatable_prime(tup):\n    x = tup[46]\n    right_truncatable_primes = []\n    \n    for num in range(x - 1, 1, -1):\n        str_num = str(num)\n        is_right_truncatable = True\n        \n        for i in range(len(str_num)):\n            truncated_num = int(str_num[:len(str_num)-i])\n            if not is_prime(truncated_num):\n                is_right_truncatable = False\n                break\n        \n        if is_right_truncatable and is_prime(num):\n            right_truncatable_primes.append(num)\n    \n    return sorted(right_truncatable_primes, reverse=True)\n```\n\nThis implementation does the following:\n\n1. `is_prime(n)` is a helper function that checks if a given number is prime.\n\n2. `all_right_truncatable_prime(tup)` takes a tuple as input and retrieves the number at index 46.\n\n3. It iterates through numbers less than x in descending order.\n\n4. For each number, it checks if it is a right-truncatable prime by:\n   - Converting the number to a string\n   - Successively removing the rightmost digits\n   - Checking if each truncated number is prime\n   - Checking if the original number is prime\n\n5. If a number passes all these checks, it is added to the `right_truncatable_primes` list.\n\n6. Finally, it returns the list of right-truncatable primes sorted in descending order.\n\nThe function handles cases where no right-truncatable primes are found by returning an empty list.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=172, output_tokens=476))