Message(id='msg_01N36MkZfT2cEgifEPa5cimy', content=[TextBlock(text="Here's the Python implementation for the specified function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_right_truncatable_prime(nums):\n    x = nums[41]\n    right_truncatable_primes = []\n\n    for num in range(2, x):\n        if is_prime(num):\n            truncatable = True\n            temp = num\n            while temp > 0:\n                temp //= 10\n                if temp > 0 and not is_prime(temp):\n                    truncatable = False\n                    break\n            \n            if truncatable:\n                right_truncatable_primes.append(num)\n\n    return sorted(right_truncatable_primes)\n```\n\nThis implementation does the following:\n\n1. The `is_prime` helper function checks if a given number is prime by testing divisibility up to the square root of the number.\n\n2. The `all_right_truncatable_prime` function takes a tuple of numbers and uses the number at index 41 as the upper limit.\n\n3. It iterates through numbers from 2 to x-1, checking for right-truncatable primes.\n\n4. For each prime number, it repeatedly removes the rightmost digit and checks if the resulting number is also prime.\n\n5. If a number remains prime after successively removing digits from the right, it is added to the `right_truncatable_primes` list.\n\n6. Finally, it returns the sorted list of right-truncatable prime numbers.\n\n7. If no right-truncatable primes are found, an empty list is returned.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=171, output_tokens=411))