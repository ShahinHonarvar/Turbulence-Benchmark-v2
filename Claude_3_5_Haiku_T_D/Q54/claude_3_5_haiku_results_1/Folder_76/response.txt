Message(id='msg_015oDLV7dZvJ4z2J1bkErmTi', content=[TextBlock(text="Here's the Python implementation:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_right_truncatable_prime(nums):\n    x = nums[370]\n    result = []\n    \n    for num in range(x - 1, 1, -1):\n        current = num\n        is_right_truncatable = True\n        \n        while current > 0:\n            if not is_prime(current):\n                is_right_truncatable = False\n                break\n            current //= 10\n        \n        if is_right_truncatable and current == 0:\n            result.append(num)\n    \n    return result\n```\n\nThis implementation does the following:\n\n1. `is_prime(n)` is a helper function that checks if a number is prime by testing divisibility up to the square root of the number.\n\n2. `all_right_truncatable_prime(nums)` is the main function that takes a tuple of numbers as input.\n\n3. It extracts the number at index 370 as the upper limit `x`.\n\n4. It iterates through numbers from `x - 1` down to 2 in descending order.\n\n5. For each number, it checks if it is a right-truncatable prime:\n   - It tries to remove digits from right to left\n   - If at any point the number becomes non-prime, it's not a right-truncatable prime\n   - If the number remains prime after removing all digits and reaches 0, it's added to the result\n\n6. The function returns the list of right-truncatable primes less than `x`, sorted in descending order.\n\n7. If no right-truncatable primes are found, an empty list is returned.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=172, output_tokens=444))