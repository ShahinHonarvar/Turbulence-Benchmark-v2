Message(id='msg_01VWuBtUuLnRSSVsvtuA5RKA', content=[TextBlock(text="Here's the Python implementation:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_right_truncatable_prime(num_tuple):\n    x = num_tuple[0]\n    right_truncatable_primes = []\n    \n    for n in range(x - 1, 1, -1):\n        truncatable = True\n        current = n\n        \n        while current > 0:\n            if not is_prime(current):\n                truncatable = False\n                break\n            current //= 10\n        \n        if truncatable:\n            right_truncatable_primes.append(n)\n    \n    return right_truncatable_primes\n```\n\nThis solution does the following:\n\n1. The `is_prime()` helper function checks if a given number is prime by testing divisibility from 2 to the square root of the number.\n\n2. The `all_right_truncatable_prime()` function:\n   - Takes the first element of the input tuple as `x`\n   - Searches for right-truncatable prime numbers from `x-1` down to 2\n   - For each number, it repeatedly removes the rightmost digit and checks if each truncated version is prime\n   - If a number remains prime after all truncations, it is added to the `right_truncatable_primes` list\n   - The list is returned in descending order by default\n\nThe function handles cases where no right-truncatable primes exist by returning an empty list.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=172, output_tokens=390))