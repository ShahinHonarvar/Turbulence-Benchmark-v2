Message(id='msg_019s6YZmCzc6RFjSUTtBHjzH', content=[TextBlock(text="Here's the implementation of the `palindromes_of_specific_lengths` function:\n\n```python\ndef palindromes_of_specific_lengths(s):\n    def is_palindrome(word):\n        return word == word[::-1]\n    \n    def is_alphabetic(word):\n        return word.isalpha()\n    \n    result = set()\n    s = s.lower()\n    \n    for length in range(10, 37):\n        for start in range(24, 98 - length + 1):\n            substring = s[start:start + length]\n            if is_palindrome(substring) and is_alphabetic(substring):\n                result.add(substring)\n    \n    return result\n```\n\nThis implementation works as follows:\n\n1. The `is_palindrome` helper function checks if a word is a palindrome by comparing it with its reverse.\n\n2. The `is_alphabetic` helper function checks if a word consists only of alphabetic characters.\n\n3. The function converts the input string to lowercase to perform case-insensitive matching.\n\n4. It iterates through palindrome lengths from 10 to 36 (inclusive).\n\n5. For each length, it checks all possible substrings within the specified range (index 24 to 97) of the given length.\n\n6. If a substring is a palindrome and consists only of alphabetic characters, it is added to the result set.\n\n7. Finally, it returns the set of palindromes that meet all the specified criteria.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=207, output_tokens=350))