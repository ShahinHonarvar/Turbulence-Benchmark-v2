Message(id='msg_016GfDBpuunAhH8FrXKxdMFW', content=[TextBlock(text="Here's the Python implementation for the specified requirements:\n\n```python\ndef palindromes_of_specific_lengths(text):\n    text = text.lower()\n    result = set()\n    \n    if len(text) <= 122:\n        return result\n    \n    substring = text[12:123]\n    \n    for length in range(12, 221):\n        for start in range(len(substring) - length + 1):\n            candidate = substring[start:start+length]\n            \n            if all(char.isalpha() for char in candidate):\n                if candidate == candidate[::-1]:\n                    result.add(candidate)\n    \n    return result\n```\n\nThis implementation does the following:\n\n1. Convert the input text to lowercase to ensure case-insensitive palindrome search.\n\n2. Check if the text is shorter than 122 characters, and return an empty set if so.\n\n3. Extract the substring from index 12 to 122 (inclusive).\n\n4. Iterate through palindrome lengths from 12 to 220.\n\n5. For each length, generate all possible substrings of that length within the specified substring.\n\n6. Check if each candidate substring consists only of alphabetic characters.\n\n7. Check if the candidate is a palindrome by comparing it with its reversed version.\n\n8. Add palindromes meeting all criteria to the result set.\n\n9. Return the set of palindromes.\n\nThe function handles the specified requirements of substring range, length constraints, and character type detection.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=207, output_tokens=346))