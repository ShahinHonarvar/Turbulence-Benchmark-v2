Message(id='msg_01PhsTzo7yWYD5hf8Wtapge9', content=[TextBlock(text="Here's the Python implementation that meets the specified requirements:\n\n```python\ndef palindromes_of_specific_lengths(s):\n    result = set()\n    s = s.lower()\n    max_index = min(len(s), 301)\n    \n    for start in range(max_index):\n        for end in range(start + 49, min(max_index, start + 61)):\n            substring = s[start:end + 1]\n            if substring == substring[::-1] and substring.isalpha():\n                result.add(substring)\n    \n    return result\n```\n\nThis function does the following:\n\n1. It converts the input string to lowercase to perform a case-insensitive search.\n\n2. It determines the maximum index to search (either the length of the string or 301, whichever is smaller).\n\n3. It uses nested loops to generate all possible substrings:\n   - The outer loop iterates through possible start indices\n   - The inner loop iterates through possible end indices, constrained to create palindromes between 50 and 60 characters long\n\n4. For each substring, it checks two conditions:\n   - The substring is equal to its reverse (indicating a palindrome)\n   - The substring consists only of alphabetic characters using `isalpha()`\n\n5. If a substring meets both conditions, it is added to the result set.\n\n6. Finally, it returns the set of palindromes found.\n\nThe function will return an empty set if no palindromes meeting the specified conditions are found.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=207, output_tokens=352))