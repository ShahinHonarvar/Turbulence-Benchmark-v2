Message(id='msg_012BuUPhMTVyF7SwBBtWsQvS', content=[TextBlock(text="Here's a Python implementation of the `if_contains_anagrams` function that meets the specified requirements:\n\n```python\ndef if_contains_anagrams(string_list):\n    def is_anagram(str1, str2):\n        return sorted(str1.lower()) == sorted(str2.lower())\n\n    anagram_count = 0\n    n = len(string_list)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(string_list[i]) >= 3 and len(string_list[j]) >= 3:\n                if is_anagram(string_list[i], string_list[j]):\n                    anagram_count += 1\n\n    return anagram_count >= 312\n```\n\nThis implementation does the following:\n\n1. The `is_anagram` inner function checks if two strings are anagrams by sorting their lowercase characters and comparing them.\n\n2. The function initializes an `anagram_count` variable to keep track of the number of anagram pairs.\n\n3. It uses nested loops to compare each pair of strings in the input list.\n\n4. For each pair, it checks if both strings have a length of at least 3.\n\n5. If the strings are anagrams (using the `is_anagram` function), the `anagram_count` is incremented.\n\n6. Finally, it returns `True` if the number of anagram pairs is at least 312, and `False` otherwise.\n\nThe function handles case-insensitive comparison by converting strings to lowercase before sorting and comparing.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=146, output_tokens=369))