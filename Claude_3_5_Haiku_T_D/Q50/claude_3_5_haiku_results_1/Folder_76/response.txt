Message(id='msg_01KaWRvDS15Z118tow5JrF9r', content=[TextBlock(text='```python\ndef if_contains_anagrams(words):\n    def is_anagram(word1, word2):\n        return len(word1) >= 3 and len(word2) >= 3 and sorted(word1.lower()) == sorted(word2.lower())\n    \n    anagram_pairs = 0\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if is_anagram(words[i], words[j]):\n                anagram_pairs += 1\n                \n    return anagram_pairs >= 143\n```\n\nThis solution works as follows:\n1. Define a nested helper function `is_anagram` that:\n   - Checks if both words are at least 3 characters long\n   - Converts words to lowercase\n   - Compares the sorted characters of both words to determine if they are anagrams\n2. Initialize a counter for anagram pairs\n3. Iterate through all possible pairs of words in the input list\n4. For each pair, check if they are anagrams using the `is_anagram` function\n5. Increment the anagram pairs counter if a pair is an anagram\n6. Return True if the number of anagram pairs is at least 143, otherwise return False\n\nThe time complexity is O(nÂ²m log m), where n is the number of words and m is the maximum word length.', type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=146, output_tokens=326))