Message(id='msg_016q1xfujtS5gi15LbNWqVta', content=[TextBlock(text="Here's the Python implementation based on the specification:\n\n```python\ndef find_second_smallest_num(numbers):\n    if not numbers or len(numbers) < 52:\n        return None\n    \n    subset = numbers[22:51]\n    \n    if len(subset) < 2:\n        return None\n    \n    sorted_subset = sorted(set(subset))\n    \n    return sorted_subset[1] if len(sorted_subset) >= 2 else None\n```\n\nThis implementation does the following:\n\n1. First, it checks if the input list is empty or has fewer than 52 elements (to ensure we can access indices 22-50). If so, it returns None.\n\n2. It extracts a subset of the list from index 22 to index 50 (inclusive) using list slicing.\n\n3. It checks if the subset has at least 2 elements. If not, it returns None.\n\n4. It creates a sorted list of unique elements from the subset using `sorted(set(subset))`.\n\n5. If the sorted unique subset has at least 2 elements, it returns the second element (index 1). Otherwise, it returns None.\n\nThe function handles various edge cases and meets the requirements of finding the second smallest number in the specified index range.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=122, output_tokens=292))