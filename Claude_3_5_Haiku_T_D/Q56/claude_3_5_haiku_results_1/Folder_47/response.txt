Message(id='msg_01QZufKt36V8szBe59WLwb7c', content=[TextBlock(text="Here's the Python implementation based on the specification:\n\n```python\ndef all_substring_of_size_n(s):\n    if len(s) < 91:\n        return []\n    \n    result = set()\n    \n    for i in range(len(s) - 90):\n        substring = s[i:i+91]\n        if len(set(substring)) == 91:\n            result.add(substring)\n    \n    return list(result)\n```\n\nThis implementation does the following:\n\n1. First, it checks if the length of the input string is less than 91. If so, it immediately returns an empty list since no 91-character substrings are possible.\n\n2. It creates an empty set called `result` to store unique substrings.\n\n3. It iterates through the string, creating substrings of length 91 starting at each index.\n\n4. For each substring, it checks if the substring contains 91 unique characters using `len(set(substring)) == 91`.\n\n5. If a substring has 91 unique characters, it is added to the `result` set.\n\n6. Finally, it converts the set to a list and returns it.\n\nThe function ensures that:\n- Only substrings of exact length 91 are considered\n- Only substrings with no duplicate characters are included\n- Duplicate substrings are automatically removed due to the use of a set\n- The order of the returned list does not matter\n- An empty list is returned if no valid substrings exist", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=145, output_tokens=348))