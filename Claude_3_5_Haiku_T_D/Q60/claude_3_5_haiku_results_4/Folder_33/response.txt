Message(id='msg_014MKrAnGuQx6swyqetMcJAa', content=[TextBlock(text="Here's the implementation of the function based on the specification:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[945]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if '0' in str(num):\n            continue\n        \n        is_truncatable = True\n        \n        str_num = str(num)\n        for i in range(len(str_num)):\n            left = int(str_num[i:])\n            right = int(str_num[:len(str_num)-i])\n            \n            if not (is_prime(left) and is_prime(right)):\n                is_truncatable = False\n                break\n        \n        if is_truncatable and is_prime(num):\n            result.append(num)\n    \n    return result\n```\n\nThis implementation does the following:\n\n1. The `is_prime` helper function checks if a number is prime by testing divisibility up to its square root.\n\n2. In `all_left_right_truncatable_prime`:\n   - Get the value of x from the 945th index of the input tuple\n   - Initialize an empty result list\n   - Iterate from x down to 12 (smallest possible truncatable prime)\n   - Skip numbers containing 0\n   - Check if the number is left-and-right truncatable\n     - Successively remove left and right digits\n     - Verify each truncated number is prime\n   - If the number and all its truncations are prime, add to result\n   - Return the result list sorted in descending order (default behavior of the iteration)\n\nThe function meets the specification by finding all left-and-right-truncatable primes less than or equal to x, returning them in descending order.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=474))