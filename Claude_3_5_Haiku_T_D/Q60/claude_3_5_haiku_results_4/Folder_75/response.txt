Message(id='msg_01PdgMxier8F1hGAUjXGXNaj', content=[TextBlock(text="Here's the Python implementation based on the specification:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_left_right_truncatable_prime(tuple_input):\n    x = tuple_input[41]\n    result = []\n    \n    for num in range(2, x + 1):\n        if '0' in str(num):\n            continue\n        \n        is_truncatable = True\n        \n        # Check right truncation\n        temp_num = num\n        while temp_num > 0:\n            if not is_prime(temp_num):\n                is_truncatable = False\n                break\n            temp_num //= 10\n        \n        # Check left truncation\n        if is_truncatable:\n            temp_str = str(num)\n            while len(temp_str) > 0:\n                if not is_prime(int(temp_str)):\n                    is_truncatable = False\n                    break\n                temp_str = temp_str[1:]\n        \n        if is_truncatable:\n            result.append(num)\n    \n    return sorted(result)\n```\n\nThis implementation does the following:\n\n1. The `is_prime` function checks if a number is prime by testing divisibility up to the square root of the number.\n\n2. The `all_left_right_truncatable_prime` function takes a tuple as input and uses the value at index 41 as the upper bound.\n\n3. It iterates through numbers from 2 to x, skipping numbers that contain 0.\n\n4. For each number, it first checks right truncation by repeatedly removing the rightmost digit and checking primality.\n\n5. Then it checks left truncation by repeatedly removing the leftmost digit and checking primality.\n\n6. If a number passes both right and left truncation tests, it is added to the result list.\n\n7. Finally, the function returns the sorted list of left-and-right-truncatable primes.\n\nThe function will return an empty list if no such primes exist in the specified range.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=210, output_tokens=519))