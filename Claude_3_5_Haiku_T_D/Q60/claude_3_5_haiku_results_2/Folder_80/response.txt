Message(id='msg_01RYv8GoGcwFkXZvArRH8kAw', content=[TextBlock(text="Here's the implementation of the `all_left_right_truncatable_prime` function according to the specification:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_left_right_truncatable_prime(n):\n    str_n = str(n)\n    if '0' in str_n:\n        return False\n    \n    while len(str_n) > 1:\n        if not is_prime(int(str_n)):\n            return False\n        str_n = str_n[1:-1]\n    \n    return is_prime(int(str_n))\n\ndef all_left_right_truncatable_prime(numbers):\n    x = numbers[14]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if is_left_right_truncatable_prime(num):\n            result.append(num)\n    \n    return result\n```\n\nThis implementation follows the requirements:\n\n1. The function `is_prime(n)` checks if a number is prime by testing divisibility up to its square root.\n\n2. The function `is_left_right_truncatable_prime(n)` checks if a number is a left-and-right-truncatable prime by:\n   - Checking if the number contains no 0\n   - Recursively removing the leftmost and rightmost digits\n   - Checking if each truncated number is prime\n   - Ensuring the final one- or two-digit number is prime\n\n3. The `all_left_right_truncatable_prime(numbers)` function:\n   - Takes the number at index 14 of the input tuple\n   - Searches for left-and-right-truncatable primes from x down to 11\n   - Returns a list of these primes in descending order\n   - Returns an empty list if no such primes exist\n\nThe function handles the requirements of finding left-and-right-truncatable primes less than or equal to x, with the result sorted in descending order.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=514))