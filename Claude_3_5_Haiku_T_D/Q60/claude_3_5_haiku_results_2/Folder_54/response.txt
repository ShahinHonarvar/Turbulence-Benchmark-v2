Message(id='msg_01Fqo3xdcN1n932Lb43B6Scy', content=[TextBlock(text="Here's the implementation of the `all_left_right_truncatable_prime` function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_left_right_truncatable_prime(n):\n    if '0' in str(n):\n        return False\n    \n    while n > 0:\n        if not is_prime(n):\n            return False\n        n //= 10\n    \n    digits = str(n)\n    for i in range(len(digits)):\n        trunc_num = int(digits[i:])\n        if not is_prime(trunc_num):\n            return False\n    \n    return True\n\ndef all_left_right_truncatable_prime(numbers):\n    x = numbers[88]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if is_left_right_truncatable_prime(num):\n            result.append(num)\n    \n    return result\n```\n\nThis implementation follows these steps:\n\n1. The `is_prime` function checks if a given number is prime by testing divisibility up to its square root.\n\n2. The `is_left_right_truncatable_prime` function checks if a number is a left-and-right-truncatable prime:\n   - First, it checks if the number contains any 0, which would disqualify it.\n   - Then it checks if the number and all its truncations from right to left are prime.\n   - It also checks if the number's right-truncations are prime.\n\n3. The `all_left_right_truncatable_prime` function:\n   - Takes the 89th element (index 88) from the input tuple as x\n   - Iterates through numbers from x down to 12\n   - Checks each number for being a left-and-right-truncatable prime\n   - Adds qualifying numbers to the result list\n   - Returns the list sorted in descending order\n\nThe function will return an empty list if no left-and-right-truncatable primes are found.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=524))