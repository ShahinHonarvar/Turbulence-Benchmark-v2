Message(id='msg_01DfuDm21PWpEP6jxcht9aN9', content=[TextBlock(text="Here's the Python implementation:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[30]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if '0' in str(num):\n            continue\n        \n        is_truncatable = True\n        \n        # Check left truncation\n        for i in range(len(str(num))):\n            trunc_num = int(str(num)[i:])\n            if not is_prime(trunc_num):\n                is_truncatable = False\n                break\n        \n        # Check right truncation\n        if is_truncatable:\n            for i in range(len(str(num))):\n                trunc_num = int(str(num)[:len(str(num))-i])\n                if not is_prime(trunc_num):\n                    is_truncatable = False\n                    break\n        \n        if is_truncatable:\n            result.append(num)\n    \n    return sorted(result, reverse=True)\n```\n\nThis implementation does the following:\n\n1. The `is_prime` helper function checks if a number is prime by testing divisibility up to the square root of the number.\n\n2. The `all_left_right_truncatable_prime` function:\n   - Takes the number at index 30 from the input tuple as the upper limit\n   - Iterates backwards from that limit down to 11\n   - Skips numbers containing 0\n   - Checks left truncation by successively removing leading digits and checking primality\n   - Checks right truncation by successively removing trailing digits and checking primality\n   - Adds numbers that pass both checks to the result list\n\n3. Returns the list of truncatable primes in descending order\n\nThe function handles the specific requirements of checking left and right truncation while maintaining primality at each stage.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=501))