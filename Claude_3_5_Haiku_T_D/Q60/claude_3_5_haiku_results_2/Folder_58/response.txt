Message(id='msg_01QpATf7pTqHcq7mya2scCtT', content=[TextBlock(text="Here's a Python implementation of the function based on the specification:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_left_right_truncatable_prime(n_tuple):\n    x = n_tuple[975]\n    result = []\n\n    def is_truncatable_prime(num):\n        str_num = str(num)\n        if '0' in str_num:\n            return False\n\n        while len(str_num) > 0:\n            if not is_prime(int(str_num)):\n                return False\n            str_num = str_num[1:]\n\n        str_num = str(num)\n        while len(str_num) > 0:\n            if not is_prime(int(str_num)):\n                return False\n            str_num = str_num[:-1]\n\n        return True\n\n    for num in range(x, 11, -1):\n        if is_prime(num) and is_truncatable_prime(num):\n            result.append(num)\n\n    return result\n```\n\nThis implementation does the following:\n\n1. `is_prime(n)` is a helper function that checks if a number is prime.\n\n2. The main function `all_left_right_truncatable_prime` takes a tuple as input and gets the value at index 975.\n\n3. `is_truncatable_prime(num)` checks if a number is both left and right truncatable:\n   - First, it checks if the number contains any 0\n   - It checks if all left-truncated versions of the number are prime\n   - Then it checks if all right-truncated versions of the number are prime\n\n4. The function iterates from x down to 11 (smallest 2-digit prime), checking for left-right truncatable primes.\n\n5. It returns the list of such primes in descending order.\n\nThe function will return an empty list if no left-and-right-truncatable primes are found less than or equal to x.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=510))