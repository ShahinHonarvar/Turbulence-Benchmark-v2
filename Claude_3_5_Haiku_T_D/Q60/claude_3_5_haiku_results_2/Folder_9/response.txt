Message(id='msg_01EyWX15XEHLxQnBE97cBhtk', content=[TextBlock(text="Here's the Python implementation:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[29]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if '0' in str(num):\n            continue\n        \n        is_truncatable = True\n        \n        # Check left and right truncation\n        str_num = str(num)\n        for i in range(len(str_num)):\n            left_trunc = int(str_num[i:])\n            right_trunc = int(str_num[:len(str_num)-i])\n            \n            if not (is_prime(left_trunc) and is_prime(right_trunc)):\n                is_truncatable = False\n                break\n        \n        if is_truncatable and is_prime(num):\n            result.append(num)\n    \n    return result\n```\n\nThis implementation does the following:\n\n1. `is_prime(n)` is a helper function that checks whether a number is prime.\n\n2. `all_left_right_truncatable_prime(nums)` takes a tuple of positive integers.\n\n3. It uses `x = nums[29]` to get the upper limit, searching for truncatable primes from `x` down to 12.\n\n4. It skips numbers containing 0 using `'0' in str(num)`.\n\n5. For each number, it checks left and right truncation by successively removing leading/trailing digits.\n\n6. A number is only added to the result if it passes left/right truncation checks and is prime itself.\n\n7. The result is returned in descending order.\n\n8. If no left-and-right-truncatable prime is found, an empty list is returned.\n\nThe function handles the check for both left and right truncation while ensuring the number is prime at each step.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=497))