Message(id='msg_01219yjFoHurL2QJX9PyHZC3', content=[TextBlock(text="Here's the implementation of the function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_left_right_truncatable_prime(num):\n    if '0' in str(num):\n        return False\n    \n    while num > 0:\n        if not is_prime(num):\n            return False\n        num //= 10\n    \n    original_num = str(num)\n    while len(original_num) > 0:\n        if not is_prime(int(original_num)):\n            return False\n        original_num = original_num[1:]\n    \n    return True\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[10]\n    truncatable_primes = []\n    \n    for num in range(x, 11, -1):\n        if is_left_right_truncatable_prime(num):\n            truncatable_primes.append(num)\n    \n    return truncatable_primes\n```\n\nThis implementation follows the specified requirements:\n\n1. The function `is_prime(n)` checks whether a given number is prime by testing divisibility up to the square root of the number.\n\n2. The function `is_left_right_truncatable_prime(num)` checks if a number is a left-and-right-truncatable prime by:\n   - Checking if the number contains no zero\n   - Checking if the number and all its truncated versions (from left and right) are prime\n\n3. The main function `all_left_right_truncatable_prime(nums)` takes a tuple of positive integers, uses the integer at index 10 as the upper limit, and returns a sorted list of left-and-right-truncatable prime numbers in descending order.\n\n4. If no left-and-right-truncatable prime number exists, an empty list is returned.\n\n5. The function checks numbers from `x` down to 11 (the smallest possible left-and-right-truncatable prime).\n\nThe implementation handles all the specified conditions efficiently.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=520))