Message(id='msg_01LxMEhdHvHVYnTVWSRQ8Lht', content=[TextBlock(text="Here's the Python implementation of the function based on the specification:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_left_right_truncatable_prime(num):\n    str_num = str(num)\n    \n    while len(str_num) > 1:\n        if not is_prime(int(str_num)):\n            return False\n        str_num = str_num[1:-1]\n    \n    return is_prime(int(str_num))\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[55]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if '0' not in str(num) and is_left_right_truncatable_prime(num):\n            result.append(num)\n    \n    return result\n```\n\nThis implementation follows the specification precisely:\n\n1. `is_prime()` checks if a number is prime by testing divisibility.\n\n2. `is_left_right_truncatable_prime()` checks if a number meets the left-right truncatable prime criteria by successively removing leftmost and rightmost digits and checking primality.\n\n3. `all_left_right_truncatable_prime()` takes a tuple of positive integers, uses the number at index 55 as the upper limit, and returns a sorted descending list of all left-and-right-truncatable primes less than or equal to that number.\n\nThe function handles all the specified requirements, including avoiding numbers with 0 and ensuring prime status at each truncation step.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=413))