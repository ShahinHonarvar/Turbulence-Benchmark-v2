Message(id='msg_01TwvCUuFze52zhE3YPN36uq', content=[TextBlock(text="Here's the implementation of the `all_left_right_truncatable_prime` function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_left_right_truncatable_prime(n):\n    if '0' in str(n):\n        return False\n    \n    while n > 9:\n        n_str = str(n)\n        left = int(n_str[1:])\n        right = int(n_str[:-1])\n        \n        if not (is_prime(left) and is_prime(right)):\n            return False\n        \n        n = left\n    \n    return is_prime(n)\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[8]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if is_prime(num) and is_left_right_truncatable_prime(num):\n            result.append(num)\n    \n    return result\n```\n\nThis implementation follows the specified requirements:\n\n1. The function `all_left_right_truncatable_prime` takes a tuple of positive integers as input.\n2. The integer at index 8 is used as the upper bound for searching left-and-right-truncatable prime numbers.\n3. The `is_prime` helper function checks if a number is prime.\n4. The `is_left_right_truncatable_prime` helper function checks if a number is a left-and-right-truncatable prime by:\n   - Checking that the number contains no 0\n   - Repeatedly removing the leftmost and rightmost digits and checking primality\n   - Stopping when a single or two-digit prime is reached\n5. The main function iterates from x down to 12, checking each number for being a left-and-right-truncatable prime.\n6. The result is returned in descending order.\n7. If no such prime is found, an empty list is returned.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=506))