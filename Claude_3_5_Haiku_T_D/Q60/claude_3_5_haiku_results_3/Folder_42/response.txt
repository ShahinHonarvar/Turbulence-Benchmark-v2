Message(id='msg_01WLYrQfhkvaWBSBEuYBFBaL', content=[TextBlock(text="Here's the implementation of the `all_left_right_truncatable_prime` function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_left_right_truncatable_prime(n):\n    if '0' in str(n):\n        return False\n    \n    while n > 0:\n        if not is_prime(n):\n            return False\n        n //= 10\n    \n    original = str(n)\n    while len(original) > 0:\n        if not is_prime(int(original)):\n            return False\n        original = original[1:]\n    \n    return True\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[64]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if is_left_right_truncatable_prime(num):\n            result.append(num)\n    \n    return result\n```\n\nThis implementation does the following:\n\n1. `is_prime(n)` is a helper function that checks if a given number is prime by testing divisibility up to the square root of the number.\n\n2. `is_left_right_truncatable_prime(n)` checks if a number is a left-and-right-truncatable prime:\n   - It first checks if the number contains any 0, which would disqualify it.\n   - It then checks if the number and all its truncations (by removing digits from the right) are prime.\n   - It also checks if the original number with digits removed from the left are prime.\n\n3. `all_left_right_truncatable_prime(nums)` takes the tuple of numbers and uses the 65th element (index 64) as the upper limit.\n   - It iterates from x down to 12 (the smallest possible left-and-right-truncatable prime).\n   - It checks each number and adds those that are left-and-right-truncatable primes to the result list.\n   - The result is returned in descending order.\n\nIf no such primes are found, an empty list is returned.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=537))