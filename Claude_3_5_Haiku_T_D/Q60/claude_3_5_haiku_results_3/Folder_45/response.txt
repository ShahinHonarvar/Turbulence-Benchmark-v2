Message(id='msg_01TupvD3GzMKxXViiUrDkuqx', content=[TextBlock(text="Here's the Python implementation for the specified function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[61]\n    result = []\n    \n    for num in range(2, x + 1):\n        if '0' in str(num):\n            continue\n        \n        is_truncatable = True\n        temp_num = num\n        \n        while temp_num > 9:\n            temp_num //= 10\n            if not is_prime(temp_num):\n                is_truncatable = False\n                break\n        \n        temp_num = num\n        digits = len(str(temp_num))\n        \n        while digits > 1:\n            temp_num %= 10**(digits-1)\n            if not is_prime(temp_num):\n                is_truncatable = False\n                break\n            digits -= 1\n        \n        if is_truncatable and is_prime(num):\n            result.append(num)\n    \n    return sorted(result)\n```\n\nThis implementation follows the requirements:\n\n1. The function `all_left_right_truncatable_prime` takes a tuple of positive integers as input.\n2. `x` is selected as the integer at index 61 of the input tuple.\n3. The `is_prime` helper function checks if a number is prime.\n4. The main function iterates through numbers from 2 to `x`.\n5. It checks for each number:\n   - Does not contain 0\n   - Remains prime when removing digits from left to right\n   - Remains prime when removing digits from right to left\n6. It returns a sorted list of left-and-right-truncatable prime numbers.\n7. If no such numbers exist, it returns an empty list.\n\nThe function efficiently checks each number's truncatable prime property while avoiding unnecessary computations.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=210, output_tokens=490))