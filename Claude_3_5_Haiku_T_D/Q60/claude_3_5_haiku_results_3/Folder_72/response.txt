Message(id='msg_01JLuRrREpe6Qgxpjmvj3SaD', content=[TextBlock(text="Here's the implementation of the `all_left_right_truncatable_prime` function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_truncatable_prime(n):\n    if '0' in str(n):\n        return False\n    \n    for i in range(1, len(str(n))):\n        left_trunc = int(str(n)[i:])\n        right_trunc = int(str(n)[:len(str(n))-i])\n        \n        if not is_prime(left_trunc) or not is_prime(right_trunc):\n            return False\n    \n    return is_prime(n)\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[31]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if is_truncatable_prime(num):\n            result.append(num)\n    \n    return result\n```\n\nThis implementation does the following:\n\n1. The `is_prime` function checks if a given number is prime by testing divisibility up to its square root.\n\n2. The `is_truncatable_prime` function checks if a number is a left-and-right-truncatable prime:\n   - First, it checks if the number contains any 0, which would make it invalid.\n   - Then, it checks all possible left and right truncations of the number.\n   - For each truncation, it checks if the resulting number is prime.\n   - Finally, it checks if the original number is prime.\n\n3. The `all_left_right_truncatable_prime` function:\n   - Takes the input tuple and selects the value at index 31 as the upper limit.\n   - Iterates from the upper limit down to 12 (the smallest multi-digit left-and-right-truncatable prime).\n   - Checks each number for being a left-and-right-truncatable prime.\n   - Adds qualifying numbers to the result list.\n   - Returns the list sorted in descending order.\n\nThe function handles the requirements of finding left-and-right-truncatable primes less than or equal to the specified number, ensuring that the returned list is sorted in descending order.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=569))