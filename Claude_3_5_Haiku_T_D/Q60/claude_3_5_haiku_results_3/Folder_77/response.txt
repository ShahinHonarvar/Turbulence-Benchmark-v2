Message(id='msg_015wmHJ5dtg3LgFeU9A22mYy', content=[TextBlock(text="Here's the Python implementation:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_left_right_truncatable_prime(numbers):\n    x = numbers[767]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if '0' in str(num):\n            continue\n        \n        if not is_prime(num):\n            continue\n        \n        is_truncatable = True\n        \n        num_str = str(num)\n        for length in range(1, len(num_str)):\n            left_truncated = int(num_str[length:])\n            right_truncated = int(num_str[:-length])\n            \n            if not is_prime(left_truncated) or not is_prime(right_truncated):\n                is_truncatable = False\n                break\n        \n        if is_truncatable:\n            result.append(num)\n    \n    return result\n```\n\nThis function does the following:\n\n1. It defines a helper function `is_prime(n)` to check if a number is prime.\n\n2. In the `all_left_right_truncatable_prime` function, it first retrieves the value at index 767 from the input tuple.\n\n3. It initializes an empty list `result` to store the truncatable prime numbers.\n\n4. It iterates through numbers from `x` down to 12 in descending order.\n\n5. For each number, it first checks:\n   - If the number contains a 0, skip it\n   - If the number is not prime, skip it\n\n6. It then checks if the number is left-and-right truncatable by:\n   - Progressively removing leading and trailing digits\n   - Checking if each truncated number remains prime\n   - If any truncation results in a non-prime, mark the number as not truncatable\n\n7. If a number passes all checks, it is added to the result list.\n\n8. Finally, it returns the list of left-and-right truncatable prime numbers in descending order.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=526))