Message(id='msg_01D6gPxbnp3cRhz6vzVjQ49y', content=[TextBlock(text="Here's the implementation of the `all_left_right_truncatable_prime` function based on the specification:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_left_right_truncatable_prime(n):\n    if '0' in str(n):\n        return False\n    \n    while n > 0:\n        if not is_prime(n):\n            return False\n        n //= 10\n    \n    temp = int(str(n)[1:]) if len(str(n)) > 1 else n\n    while temp > 0:\n        if not is_prime(temp):\n            return False\n        temp //= 10\n    \n    return True\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[767]\n    truncatable_primes = []\n    \n    for num in range(x, 11, -1):\n        if is_left_right_truncatable_prime(num):\n            truncatable_primes.append(num)\n    \n    return truncatable_primes\n```\n\nThis implementation follows the specified requirements:\n\n1. The function `is_prime(n)` checks if a number is prime using trial division.\n\n2. The function `is_left_right_truncatable_prime(n)` checks if a number is a left-and-right-truncatable prime:\n   - It first checks if the number contains 0, which would make it invalid.\n   - It then checks if the number and all its truncated versions (by removing digits from both left and right) are prime.\n\n3. The main function `all_left_right_truncatable_prime(nums)`:\n   - Takes a tuple of positive integers as input.\n   - Uses the integer at index 767 as the upper limit.\n   - Iterates through numbers from x down to 11.\n   - Checks each number if it's a left-and-right-truncatable prime.\n   - Collects such primes in a list.\n   - Returns the list sorted in descending order.\n\n4. If no left-and-right-truncatable prime is found, it returns an empty list.\n\nThe function handles the requirements of checking primality, truncatability, and returning the list in descending order.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=573))