Message(id='msg_014kTeH5s1ad3cZirkSuCaow', content=[TextBlock(text="Here's the implementation of the `all_left_right_truncatable_prime` function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_left_right_truncatable_prime(n):\n    if '0' in str(n):\n        return False\n    \n    while n > 0:\n        if not is_prime(n):\n            return False\n        n //= 10\n    \n    orig_num = str(n)\n    while len(orig_num) > 1:\n        orig_num = orig_num[1:]\n        if not is_prime(int(orig_num)):\n            return False\n    \n    return True\n\ndef all_left_right_truncatable_prime(tup):\n    x = tup[81]\n    result = []\n    \n    for num in range(x, 1, -1):\n        if is_left_right_truncatable_prime(num):\n            result.append(num)\n    \n    return result\n```\n\nThis implementation does the following:\n\n1. `is_prime(n)` checks if a number is prime by testing divisibility up to its square root.\n\n2. `is_left_right_truncatable_prime(n)` checks if a number is left-and-right-truncatable prime:\n   - Checks if the number contains any 0\n   - Removes digits from right to left, checking primality\n   - Removes digits from left to right, checking primality\n\n3. `all_left_right_truncatable_prime(tup)`:\n   - Gets the number at index 81 from the input tuple\n   - Searches for left-and-right-truncatable primes from x down to 2\n   - Returns the list in descending order\n\nThe function will return a list of all left-and-right-truncatable prime numbers less than or equal to x, sorted in descending order.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=491))