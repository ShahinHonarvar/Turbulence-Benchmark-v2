Message(id='msg_018vya8hmQvuei24RBC1GLeK', content=[TextBlock(text="Here's the Python implementation for the specified requirements:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_left_right_truncatable_prime(tuple_input):\n    x = tuple_input[758]\n    result = []\n    \n    for num in range(2, x + 1):\n        if '0' in str(num):\n            continue\n        \n        is_truncatable = True\n        \n        # Check left truncation\n        str_num = str(num)\n        while len(str_num) > 1:\n            str_num = str_num[1:]\n            if not is_prime(int(str_num)):\n                is_truncatable = False\n                break\n        \n        # Reset for right truncation if left truncation passed\n        if is_truncatable:\n            str_num = str(num)\n            while len(str_num) > 1:\n                str_num = str_num[:-1]\n                if not is_prime(int(str_num)):\n                    is_truncatable = False\n                    break\n        \n        if is_truncatable and is_prime(num):\n            result.append(num)\n    \n    return sorted(result)\n```\n\nThis implementation follows these key steps:\n\n1. Define an `is_prime` helper function to check if a number is prime.\n\n2. The main function `all_left_right_truncatable_prime` takes a tuple as input and uses the value at index 758 as the upper limit.\n\n3. It iterates through numbers from 2 to x (inclusive).\n\n4. Skip numbers containing 0.\n\n5. Check left truncation: Successively remove leftmost digits and check if each resulting number is prime.\n\n6. If left truncation passes, check right truncation: Successively remove rightmost digits and check if each resulting number is prime.\n\n7. If a number passes both left and right truncation checks and is prime itself, add it to the result list.\n\n8. Return the sorted list of left-and-right-truncatable prime numbers.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=210, output_tokens=527))