Message(id='msg_01UJ7jBhNrBMZLynsy8vrtxY', content=[TextBlock(text="Here's the implementation of the function `all_left_right_truncatable_prime`:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_left_right_truncatable_prime(n):\n    if '0' in str(n):\n        return False\n    \n    while n > 9:\n        n_str = str(n)\n        n_str_left = n_str[1:]\n        n_str_right = n_str[:-1]\n        \n        if not (is_prime(int(n_str_left)) and is_prime(int(n_str_right))):\n            return False\n        \n        n = int(n_str_left)\n    \n    return is_prime(n)\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[429]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if is_prime(num) and is_left_right_truncatable_prime(num):\n            result.append(num)\n    \n    return result\n```\n\nThis solution involves three functions:\n\n1. `is_prime(n)`: Checks if a number is prime.\n2. `is_left_right_truncatable_prime(n)`: Checks if a number is a left-and-right-truncatable prime.\n3. `all_left_right_truncatable_prime(nums)`: Returns a sorted list of left-and-right-truncatable primes less than or equal to the 429th index of the input tuple.\n\nThe implementation checks each number from x down to 12, verifying if it is both prime and left-and-right-truncatable. The result is returned in descending order.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=457))