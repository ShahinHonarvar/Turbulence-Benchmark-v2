Message(id='msg_01V1cjS7pbauPgwiPbGBtSsS', content=[TextBlock(text="Here's the Python implementation based on the specification:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[39]\n    result = []\n    \n    for num in range(x, 11, -1):\n        if '0' in str(num):\n            continue\n        \n        is_truncatable = True\n        temp_num = num\n        \n        while temp_num > 9:\n            temp_num //= 10\n            if not is_prime(temp_num):\n                is_truncatable = False\n                break\n        \n        if not is_prime(temp_num):\n            is_truncatable = False\n        \n        if is_truncatable:\n            temp_num = num\n            while temp_num > 9:\n                temp_num %= 10**(len(str(temp_num)) - 1)\n                if not is_prime(temp_num):\n                    is_truncatable = False\n                    break\n        \n        if is_truncatable and is_prime(num):\n            result.append(num)\n    \n    return result\n```\n\nThis implementation follows the specifications:\n\n1. The function `all_left_right_truncatable_prime` takes a tuple of positive integers as input.\n2. It uses the integer at index 39 as the upper limit `x`.\n3. It returns a sorted list of left-and-right-truncatable prime numbers less than or equal to `x`.\n4. A left-and-right-truncatable prime number:\n   - Contains no 0\n   - Remains prime when digits are removed from left and right sides\n   - Reduces to a one- or two-digit prime\n5. The list is sorted in descending order\n6. Returns an empty list if no such prime numbers exist\n7. Includes a helper function `is_prime` to check primality\n\nThe code works by systematically checking each number from `x` down to 12, ensuring all truncation conditions are met.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=522))