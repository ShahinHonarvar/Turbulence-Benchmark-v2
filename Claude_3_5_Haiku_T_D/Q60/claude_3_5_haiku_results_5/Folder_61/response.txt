Message(id='msg_01KRusScuteAhCnKsvqWiFT4', content=[TextBlock(text="Here's the Python implementation of the specified function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_left_right_truncatable_prime(nums):\n    x = nums[3]\n    truncatable_primes = []\n    \n    for num in range(x, 11, -1):\n        if '0' in str(num):\n            continue\n        \n        is_left_right_truncatable = True\n        \n        for length in range(len(str(num)), 0, -1):\n            left_trunc = int(str(num)[length-1:])\n            right_trunc = int(str(num)[:length])\n            \n            curr = left_trunc\n            while curr > 10:\n                if not is_prime(curr):\n                    is_left_right_truncatable = False\n                    break\n                curr //= 10\n            \n            curr = right_trunc\n            while curr > 10:\n                if not is_prime(curr):\n                    is_left_right_truncatable = False\n                    break\n                curr //= 10\n            \n            if not is_left_right_truncatable:\n                break\n        \n        if is_left_right_truncatable and is_prime(num) and is_prime(int(str(num)[0])) and is_prime(int(str(num)[-1])):\n            truncatable_primes.append(num)\n    \n    return sorted(truncatable_primes, reverse=True)\n```", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=211, output_tokens=409))