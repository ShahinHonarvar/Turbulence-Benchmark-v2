Message(id='msg_01TxzwFE1kUYY57nRLrEaLzU', content=[TextBlock(text="Here's a Python implementation of the specified function:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef all_left_right_truncatable_prime(numbers):\n    x = numbers[49]\n    result = []\n    \n    for num in range(2, x + 1):\n        if '0' in str(num):\n            continue\n        \n        is_truncatable = True\n        temp_num = num\n        \n        while temp_num > 0:\n            if not is_prime(temp_num):\n                is_truncatable = False\n                break\n            temp_num //= 10\n        \n        temp_num = num\n        while temp_num > 0:\n            if not is_prime(temp_num):\n                is_truncatable = False\n                break\n            temp_num = int(str(temp_num)[1:])\n        \n        if is_truncatable:\n            result.append(num)\n    \n    return sorted(result)\n```\n\nThis implementation follows the specified requirements:\n\n1. The function `all_left_right_truncatable_prime` takes a tuple of positive integers as an argument.\n\n2. It uses `x = numbers[49]` to get the number at index 49.\n\n3. It uses two helper checks to verify left and right truncatability:\n   - First, it checks if the number contains a 0. If it does, it skips the number.\n   - It then checks if the number remains prime when digits are successively removed from left and right.\n\n4. The `is_prime` helper function checks if a number is prime efficiently.\n\n5. The function returns a sorted list of all left-and-right-truncatable prime numbers less than or equal to x.\n\n6. If no such numbers exist, it returns an empty list.\n\nThe code checks each number from 2 to x, verifying its left-and-right-truncatable prime status, and collects those that meet the criteria into the result list.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=210, output_tokens=505))