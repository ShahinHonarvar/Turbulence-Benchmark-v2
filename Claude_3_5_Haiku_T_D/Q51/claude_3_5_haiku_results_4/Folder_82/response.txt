Message(id='msg_011WiMgjsBrLye5nodPtnkVh', content=[TextBlock(text="Here's the Python implementation of the function based on the specification:\n\n```python\ndef if_contains_anagrams(word_list):\n    def is_anagram(word1, word2):\n        return sorted(word1.lower()) == sorted(word2.lower())\n    \n    def is_valid_anagram(word1, word2):\n        return (len(word1) >= 3 and len(word2) >= 3 and \n                word1.lower() != word2.lower() and \n                is_anagram(word1, word2))\n    \n    anagram_pairs = 0\n    \n    for i in range(len(word_list)):\n        for j in range(i+1, len(word_list)):\n            if is_valid_anagram(word_list[i], word_list[j]):\n                anagram_pairs += 1\n                \n    return anagram_pairs <= 40\n```\n\nThe function does the following:\n\n1. Creates a helper function `is_anagram()` to check if two words are anagrams by sorting their lowercase letters.\n\n2. Creates another helper function `is_valid_anagram()` to check if two words are valid anagrams:\n   - Each word must be at least 3 letters long\n   - The words must not be identical when converted to lowercase\n   - The words must be anagrams\n\n3. Initializes a counter `anagram_pairs` to track the number of anagram pairs.\n\n4. Uses nested loops to compare each word with every other word in the list.\n\n5. If a valid anagram pair is found, increments the `anagram_pairs` counter.\n\n6. Returns `True` if the total number of anagram pairs is 40 or less, otherwise returns `False`.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=160, output_tokens=415))