Message(id='msg_01G5t2hyb8j6QY58yXZpBasJ', content=[TextBlock(text="Here's a Python implementation of the specified function:\n\n```python\ndef if_contains_anagrams(strings):\n    def is_anagram(s1, s2):\n        return len(s1) == len(s2) and sorted(s1.lower()) == sorted(s2.lower())\n    \n    anagram_pairs = 0\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if len(strings[i]) >= 3 and len(strings[j]) >= 3:\n                if is_anagram(strings[i], strings[j]):\n                    anagram_pairs += 1\n                    if anagram_pairs > 392:\n                        return False\n    \n    return True\n```\n\nThis implementation does the following:\n\n1. Define a nested function `is_anagram(s1, s2)` that checks if two strings are anagrams by:\n   - Ensuring they have the same length\n   - Comparing their sorted lowercase characters\n\n2. Initialize a counter `anagram_pairs` to track the number of anagram pairs\n\n3. Use nested loops to compare each pair of strings in the input list\n\n4. For each pair of strings:\n   - Check if both strings are at least 3 characters long\n   - Check if they are anagrams using the `is_anagram()` function\n   - If they are anagrams, increment the `anagram_pairs` counter\n   - If the number of anagram pairs exceeds 392, immediately return `False`\n\n5. If the total number of anagram pairs is 392 or less, return `True`\n\nThe function handles all the specified requirements: case-insensitive comparison, checking for anagrams of at least 3 characters, and limiting the number of anagram pairs to 392.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=160, output_tokens=423))