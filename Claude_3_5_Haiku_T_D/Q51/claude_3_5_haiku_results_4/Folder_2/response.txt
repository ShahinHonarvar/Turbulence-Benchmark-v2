Message(id='msg_01G4X5sjdi7Htfe8AbiHdrsM', content=[TextBlock(text="Here's the Python implementation of the specified function:\n\n```python\ndef if_contains_anagrams(words):\n    def is_anagram(s1, s2):\n        return sorted(s1.lower()) == sorted(s2.lower())\n\n    valid_words = [word for word in words if len(word) >= 3]\n    anagram_pairs = 0\n\n    for i in range(len(valid_words)):\n        for j in range(i+1, len(valid_words)):\n            if is_anagram(valid_words[i], valid_words[j]):\n                anagram_pairs += 1\n                if anagram_pairs > 81:\n                    return False\n\n    return True\n```\n\nThis implementation does the following:\n\n1. Define an inner helper function `is_anagram` that checks if two strings are anagrams in a case-insensitive manner by sorting their lowercase letters and comparing them.\n\n2. Filter the input list to keep only words with length 3 or more using a list comprehension.\n\n3. Iterate through all possible pairs of words in the filtered list.\n\n4. For each pair, check if they are anagrams using the `is_anagram` function.\n\n5. If an anagram pair is found, increment the `anagram_pairs` counter.\n\n6. If the number of anagram pairs exceeds 81, immediately return `False`.\n\n7. If all pairs are checked and the number of anagram pairs is 81 or fewer, return `True`.\n\nThe function will return `True` if the list contains at most 81 anagram pairs of words with at least 3 letters, and `False` otherwise.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=160, output_tokens=385))