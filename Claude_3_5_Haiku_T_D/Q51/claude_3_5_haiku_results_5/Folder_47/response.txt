Message(id='msg_015ANTo5WxD7DUmZthk37zqA', content=[TextBlock(text="Here's the Python implementation of the specified function:\n\n```python\ndef if_contains_anagrams(words):\n    def is_anagram(word1, word2):\n        word1 = ''.join(sorted(word1.lower()))\n        word2 = ''.join(sorted(word2.lower()))\n        return word1 == word2\n\n    def is_valid_anagram(word1, word2):\n        return len(word1) >= 3 and len(word2) >= 3 and is_anagram(word1, word2)\n\n    anagram_count = 0\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if is_valid_anagram(words[i], words[j]):\n                anagram_count += 1\n                if anagram_count > 366:\n                    return False\n\n    return True\n```\n\nThis implementation does the following:\n\n1. The `is_anagram` helper function checks if two words are anagrams by sorting their lowercase letters and comparing them.\n\n2. The `is_valid_anagram` helper function checks if two words are valid anagrams by ensuring their length is at least 3 and they are anagrams.\n\n3. The main function `if_contains_anagrams` iterates through the list of words and checks each pair of words.\n\n4. If a valid anagram pair is found, the `anagram_count` is incremented.\n\n5. If the `anagram_count` exceeds 366, the function returns `False`.\n\n6. If the function completes the iteration without exceeding 366 anagram pairs, it returns `True`.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=160, output_tokens=395))