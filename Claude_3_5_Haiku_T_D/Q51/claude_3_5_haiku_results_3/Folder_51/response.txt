Message(id='msg_01XLQ597Ei3pEcqojsGBmMe3', content=[TextBlock(text="Here's the implementation of the function according to the specification:\n\n```python\ndef if_contains_anagrams(lst):\n    def is_anagram(s1, s2):\n        return sorted(s1.lower()) == sorted(s2.lower())\n    \n    def is_valid_anagram_pair(s1, s2):\n        return (len(s1) >= 3 and len(s2) >= 3 and \n                s1.lower() != s2.lower() and \n                is_anagram(s1, s2))\n    \n    anagram_count = 0\n    n = len(lst)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if is_valid_anagram_pair(lst[i], lst[j]):\n                anagram_count += 1\n                \n                if anagram_count > 116:\n                    return False\n    \n    return True\n```\n\nThis implementation does the following:\n\n1. Define a nested function `is_anagram` that checks if two strings are anagrams by sorting their lowercase letters.\n\n2. Define a nested function `is_valid_anagram_pair` that checks if a pair of strings:\n   - Are both at least 3 characters long\n   - Are not the same string (case-insensitive)\n   - Are anagrams of each other\n\n3. Iterate through all possible pairs of strings in the input list.\n\n4. Count the number of valid anagram pairs.\n\n5. If the number of anagram pairs exceeds 116, return `False`.\n\n6. If the total count of anagram pairs is less than or equal to 116, return `True`.\n\nThe function handles case-insensitive comparison and only considers anagrams of strings with a length of at least 3.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=160, output_tokens=428))