Message(id='msg_01PR4tsjFRwW6CBTHPLRVv9c', content=[TextBlock(text="Here's the implementation of the function based on the specification:\n\n```python\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix):\n    rows, cols = matrix.shape\n    valid_submatrices = []\n    \n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(cols):\n                for c2 in range(c1, cols):\n                    submatrix = matrix[r1:r2+1, c1:c2+1]\n                    if np.sum(submatrix) == 93:\n                        valid_submatrices.append((r1, c1, r2, c2))\n    \n    return valid_submatrices\n```\n\nThis implementation does the following:\n\n1. The function takes a two-dimensional NumPy matrix as input.\n2. It uses nested loops to generate all possible submatrices by selecting different starting and ending rows and columns.\n3. For each submatrix, it calculates the sum using `np.sum()`.\n4. If the sum of the submatrix is exactly 93, it stores the coordinates of the submatrix (top-left and bottom-right corners) in the `valid_submatrices` list.\n5. After checking all possible submatrices, it returns the list of valid submatrices.\n6. If no submatrix with a sum of 93 is found, an empty list is returned.\n\nThe coordinates of each submatrix are stored as a tuple `(r1, c1, r2, c2)`, where `(r1, c1)` represents the top-left corner and `(r2, c2)` represents the bottom-right corner of the submatrix.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=140, output_tokens=416))