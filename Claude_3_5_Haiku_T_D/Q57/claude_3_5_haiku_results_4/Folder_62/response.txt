Message(id='msg_01JXcvcVumMKkfCfZn9Ht7y8', content=[TextBlock(text="Here's the Python implementation:\n\n```python\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix):\n    rows, cols = matrix.shape\n    result = []\n\n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(cols):\n                for c2 in range(c1, cols):\n                    submatrix = matrix[r1:r2+1, c1:c2+1]\n                    if np.sum(submatrix) == 394:\n                        result.append(submatrix.tolist())\n\n    return result\n```\n\nThis implementation does the following:\n\n1. It uses nested loops to generate all possible submatrices by selecting different starting and ending rows and columns.\n\n2. For each submatrix, it checks if the sum of its elements is exactly 394.\n\n3. If a submatrix with a sum of 394 is found, it is converted to a list and added to the result list.\n\n4. The function returns the list of all submatrices with a sum of 394, or an empty list if no such submatrices are found.\n\n5. The function assumes the input is a numpy matrix, and it uses numpy's slicing and sum functionalities.\n\nThe time complexity is O(rows^2 * cols^2), as it generates all possible submatrices.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=140, output_tokens=327))