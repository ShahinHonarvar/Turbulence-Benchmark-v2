Message(id='msg_01DcUsaK5gqCK9SAJfvEyUom', content=[TextBlock(text="```python\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix):\n    rows, cols = matrix.shape\n    result = []\n    \n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(cols):\n                for c2 in range(c1, cols):\n                    submatrix = matrix[r1:r2+1, c1:c2+1]\n                    if np.sum(submatrix) == 95:\n                        result.append(submatrix)\n    \n    return result\n```\n\nThis implementation does the following:\n\n1. It takes a numpy matrix as input\n2. Uses nested loops to generate all possible submatrices\n3. Checks each submatrix to see if its sum is exactly 95\n4. If a submatrix with sum 95 is found, it is added to the result list\n5. Returns the list of all submatrices with sum 95, or an empty list if no such submatrices exist\n\nKey points:\n- Uses numpy's `shape` attribute to get matrix dimensions\n- Generates submatrices using slice notation\n- Uses `np.sum()` to calculate submatrix sum\n- Checks sum against the specific value of 95\n- Covers all possible rectangular submatrices by varying start and end row/column indices\n\nThe time complexity is O(m²n²), where m and n are the matrix dimensions.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=140, output_tokens=347))