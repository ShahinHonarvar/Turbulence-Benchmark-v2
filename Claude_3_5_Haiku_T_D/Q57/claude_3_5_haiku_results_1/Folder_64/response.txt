Message(id='msg_01AGmedsYSErzsfkx8vCm4Ey', content=[TextBlock(text="```python\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix):\n    rows, cols = matrix.shape\n    result = []\n    \n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(cols):\n                for c2 in range(c1, cols):\n                    submatrix = matrix[r1:r2+1, c1:c2+1]\n                    if np.sum(submatrix) == -4:\n                        result.append(submatrix)\n    \n    return result\n```\n\nThis solution does the following:\n\n1. The function takes a numpy matrix as input.\n2. It uses nested loops to generate all possible submatrices by varying the start and end row and column indices.\n3. For each potential submatrix:\n   - Extract the submatrix using numpy's slicing\n   - Calculate the sum of the submatrix using `np.sum()`\n   - If the sum equals -4, add the submatrix to the result list\n4. Return the list of submatrices with sum -4\n5. If no submatrices are found with sum -4, an empty list is returned\n\nThe time complexity is O(m²n²), where m and n are the number of rows and columns in the matrix respectively.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=140, output_tokens=319))