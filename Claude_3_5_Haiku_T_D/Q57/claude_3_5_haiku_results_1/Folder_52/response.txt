Message(id='msg_014rGTu3tHg4tirNAoLDPirF', content=[TextBlock(text='```python\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix):\n    rows, cols = matrix.shape\n    valid_submatrices = []\n    \n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(cols):\n                for c2 in range(c1, cols):\n                    submatrix = matrix[r1:r2+1, c1:c2+1]\n                    if np.sum(submatrix) == 100:\n                        valid_submatrices.append(submatrix.tolist())\n    \n    return valid_submatrices\n```\n\nThis implementation does the following:\n\n1. It takes a numpy matrix as input.\n2. It uses nested loops to generate all possible submatrices by selecting different start and end rows and columns.\n3. For each generated submatrix, it checks if the sum of its elements is exactly 100.\n4. If a submatrix with a sum of 100 is found, it is converted to a list and added to the `valid_submatrices` list.\n5. Finally, it returns the list of all submatrices with a sum of 100, or an empty list if no such submatrices are found.\n\nThe function will explore all possible rectangular submatrices, including single elements, and return those that satisfy the sum condition.', type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=140, output_tokens=334))