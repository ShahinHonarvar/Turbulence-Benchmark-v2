Message(id='msg_0128BEwceKm21RVcaA5Xq13m', content=[TextBlock(text="Here's the Python implementation:\n\n```python\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix):\n    rows, cols = matrix.shape\n    result = []\n    \n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(cols):\n                for c2 in range(c1, cols):\n                    submatrix = matrix[r1:r2+1, c1:c2+1]\n                    if np.sum(submatrix) == 997:\n                        result.append(submatrix.tolist())\n    \n    return result\n```\n\nThis implementation does the following:\n\n1. It uses nested loops to generate all possible submatrices of the input matrix.\n\n2. The outer two loops `r1` and `r2` define the row range of the submatrix.\n\n3. The inner two loops `c1` and `c2` define the column range of the submatrix.\n\n4. For each submatrix, it calculates the sum using `np.sum()`.\n\n5. If the sum of the submatrix is exactly 997, it converts the submatrix to a list and adds it to the `result` list.\n\n6. After checking all possible submatrices, the function returns the `result` list.\n\n7. If no submatrix with a sum of 997 is found, an empty list is returned.\n\nThe function assumes the input is a NumPy matrix and uses NumPy's slicing and `sum()` method for efficiency.", type='text')], model='claude-3-5-haiku-20241022', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=140, output_tokens=369))