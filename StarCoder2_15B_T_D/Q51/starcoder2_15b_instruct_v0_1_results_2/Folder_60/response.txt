ChatCompletion(id='', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='Here\'s how you can implement the function in Python:\n\n```python\ndef if_contains_anagrams(string_list):\n    def get_signature(string):\n        return "".join(sorted(string.lower()))\n\n    anagram_dict = {}\n    for string in string_list:\n        signature = get_signature(string)\n        if signature in anagram_dict:\n            anagram_dict[signature].append(string)\n        else:\n            anagram_dict[signature] = [string]\n\n    anagram_count = 0\n    for anagrams in anagram_dict.values():\n        if len(anagrams) > 1 and len(anagrams[0]) >= 3:\n            anagram_count += 1\n    return anagram_count <= 77\n```\n\nThe function `if_contains_anagrams` takes a list of strings as an argument and returns `True` if there are at most 77 pairs of anagrams in the list; otherwise, it returns `False`.\n\nThe helper function `get_signature` takes a string and returns a signature of the string by sorting its characters in ascending order and converting it to lowercase.\n\nThe function `if_contains_anagrams` then iterates through the list of strings and groups them based on their signatures using a dictionary. Anagram signatures will have the same key, and the values of the dictionary will be a list of strings that have the same anagram signature.\n\nFinally, the function `if_contains_anagrams` iterates through the values of the dictionary and counts the number of anagram pairs with a length of at least three. If the number of anagram pairs is less than or equal to 77, it returns `True`; otherwise, it returns `False`.', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1730625526, model='/repository', object='chat.completion', service_tier=None, system_fingerprint='2.3.1-sha-a094729', usage=CompletionUsage(completion_tokens=378, prompt_tokens=179, total_tokens=557))