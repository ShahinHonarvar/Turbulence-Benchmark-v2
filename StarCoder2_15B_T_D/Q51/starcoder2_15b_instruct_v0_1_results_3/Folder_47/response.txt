ChatCompletion(id='', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='Here is a Python function that implements this approach:\n\n```python\nfrom typing import List\n\ndef if_contains_anagrams(words: List[str]) -> bool:\n    """\n    Returns True if there are at most 366 pairs of anagrams in the given list;\n    otherwise, returns False.\n    """\n    anagrams = {}\n\n    for word in words:\n        word = word.lower()\n        if len(word) >= 3:\n            canonical = "".join(sorted(word))\n            if canonical in anagrams:\n                anagrams[canonical].append(word)\n            else:\n                anagrams[canonical] = [word]\n\n    return len(anagrams) <= 366\n```\n\nThis implementation uses a dictionary to store the anagrams. For each word in the given list, it first converts the word to lowercase and then sorts the letters of the word in alphabetical order. This sorted string is called the "canonical form" of the word.\n\nIf the canonical form is already in the dictionary, we know that this word is an anagram of one of the previously seen words. We then add the word to the list associated with the canonical form.\n\nIf the canonical form is not in the dictionary, we add it to the dictionary with the current word as the first element of the list.\n\nAfter processing all the words, we check if the number of canonical forms is at most 366. If it is, it means that there are at most 366 pairs of anagrams in the given list.', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1730627325, model='/repository', object='chat.completion', service_tier=None, system_fingerprint='2.3.1-sha-a094729', usage=CompletionUsage(completion_tokens=328, prompt_tokens=180, total_tokens=508))