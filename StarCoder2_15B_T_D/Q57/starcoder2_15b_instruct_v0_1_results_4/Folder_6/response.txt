ChatCompletion(id='', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content='To solve this problem efficiently, we can use a dynamic programming approach. We can precompute the sum of all submatrices of the given matrix and store them in a three-dimensional array. This array will allow us to quickly calculate the sum of any submatrix in constant time.\n\nHere is the implementation of the function using dynamic programming:\n\n```python\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix):\n    m, n = matrix.shape\n    sum_matrix = np.zeros((m + 1, n + 1), dtype=int)\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            sum_matrix[i, j] = sum_matrix[i - 1, j] + sum_matrix[i, j - 1] - sum_matrix[i - 1, j - 1] + matrix[i - 1, j - 1]\n    submatrices = []\n    for i in range(m):\n        for j in range(n):\n            for k in range(i + 1, m + 1):\n                for l in range(j + 1, n + 1):\n                    submatrix_sum = sum_matrix[k, l] - sum_matrix[i, l] - sum_matrix[k, j] + sum_matrix[i, j]\n                    if submatrix_sum == 126:\n                        submatrices.append(matrix[i:k, j:l])\n\n    return submatrices\n```', refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1730673492, model='/repository', object='chat.completion', service_tier=None, system_fingerprint='2.3.1-sha-a094729', usage=CompletionUsage(completion_tokens=340, prompt_tokens=162, total_tokens=502))