ChatCompletion(id='', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content="Here's how you can implement the function in Python:\n```python\ndef all_left_right_truncatable_prime(numbers):\n    truncatable_primes = []\n    for number in numbers:\n        if is_truncatable_prime(number):\n            truncatable_primes.append(number)\n    return sorted(truncatable_primes)\n\ndef is_truncatable_prime(number):\n    number_str = str(number)\n    if not is_prime(number):\n        return False\n    if '0' in number_str:\n        return False\n    for i in range(1, len(number_str)):\n        if not is_prime(int(number_str[i:])) or not is_prime(int(number_str[:len(number_str) - i])):\n            return False\n    return True\n\ndef is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n```\n\nThe function `is_truncatable_prime` checks if a number is a truncatable prime by first checking if it is a prime number and if it does not contain any 0s. Then, it checks if the number remains prime if the leading leftmost and last rightmost digits are successively removed. The function `is_prime` checks if a number is a prime number by iterating over all numbers from 2 to the square root of the number and checking if any of them divides the number evenly.", refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1730693086, model='/repository', object='chat.completion', service_tier=None, system_fingerprint='2.3.1-sha-a094729', usage=CompletionUsage(completion_tokens=346, prompt_tokens=235, total_tokens=581))