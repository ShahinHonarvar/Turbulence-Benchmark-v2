ChatCompletion(id='', choices=[Choice(finish_reason='stop', index=0, logprobs=None, message=ChatCompletionMessage(content="Here's how you could implement the function in Python:\n\n```python\ndef all_left_right_truncatable_prime(numbers):\n    truncatable_primes = []\n\n    for number in numbers:\n        if number > 0:\n            is_truncatable = True\n            for i in range(len(str(number)) - 1):\n                left_truncation = int(str(number)[i + 1:])\n                right_truncation = int(str(number)[:len(str(number)) - i - 1])\n                if left_truncation < 2 or right_truncation < 2:\n                    is_truncatable = False\n                    break\n                if not is_prime(left_truncation) or not is_prime(right_truncation):\n                    is_truncatable = False\n                    break\n            if is_truncatable:\n                truncatable_primes.append(number)\n\n    truncatable_primes.sort()\n    return truncatable_primes\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n```", refusal=None, role='assistant', function_call=None, tool_calls=None))], created=1730690088, model='/repository', object='chat.completion', service_tier=None, system_fingerprint='2.3.1-sha-a094729', usage=CompletionUsage(completion_tokens=292, prompt_tokens=235, total_tokens=527))