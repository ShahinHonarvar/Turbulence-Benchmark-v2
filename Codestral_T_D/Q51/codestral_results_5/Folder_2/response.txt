id='4ce3d99257ec486d9d5576d26feea441' object='chat.completion' model='codestral-latest' usage=UsageInfo(prompt_tokens=161, completion_tokens=439, total_tokens=600) created=1724676293 choices=[ChatCompletionChoice(index=0, message=AssistantMessage(content='Sure, I\'d be happy to help with that. Here\'s a Python function that should meet your requirements:\n\n```python\ndef if_contains_anagrams(word_list):\n    from collections import defaultdict\n    from itertools import combinations\n\n    anagram_map = defaultdict(list)\n\n    for word in word_list:\n        if len(word) < 3:\n            continue\n        sorted_word = "".join(sorted(word.lower()))\n        anagram_map[sorted_word].append(word)\n\n    anagram_pairs = sum(len(list(combinations(words, 2))) for words in anagram_map.values() if len(words) > 1)\n\n    return anagram_pairs <= 81\n```\n\nThis function works by creating a dictionary where the keys are the sorted versions of the words, and the values are lists of the words that sort to the same key. It then counts the number of pairs of anagrams in the list, and returns True if this count is less than or equal to 81.\n\nThe `defaultdict(list)` line creates a dictionary that automatically creates a new list for any key that doesn\'t already exist in the dictionary.\n\nThe `join(sorted(word.lower()))` line sorts the letters in a word, converts them to lower case, and then joins them back together into a string.\n\nThe `combinations(words, 2)` line generates all pairs of words in a list. The `len(list(combinations(words, 2)))` line counts the number of pairs.\n\nThe `sum(len(list(combinations(words, 2))) for words in anagram_map.values() if len(words) > 1)` line sums up the number of pairs of anagrams for all keys in the dictionary that have more than one word in their list.', tool_calls=None, prefix=False, role='assistant'), finish_reason='stop')]