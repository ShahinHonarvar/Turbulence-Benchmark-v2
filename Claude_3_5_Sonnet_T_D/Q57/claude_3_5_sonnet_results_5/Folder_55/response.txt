Message(id='msg_01G7KgNkWCzUfGtUGF9Ge7oE', content=[TextBlock(text="Here's the Python function that meets your requirements:\n\n```python\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix):\n    result = []\n    rows, cols = matrix.shape\n    \n    for r1 in range(rows):\n        for c1 in range(cols):\n            for r2 in range(r1, rows):\n                for c2 in range(c1, cols):\n                    submatrix = matrix[r1:r2+1, c1:c2+1]\n                    if np.sum(submatrix) == 1:\n                        result.append(submatrix)\n    \n    return result\n```\n\nThis function does the following:\n\n1. It imports the numpy library as np.\n2. It defines the function `submatrix_with_particular_sum` that takes a numpy matrix as input.\n3. It initializes an empty list `result` to store the submatrices with sum equal to 1.\n4. It gets the number of rows and columns in the input matrix.\n5. It uses nested loops to iterate through all possible submatrices:\n   - The outer two loops (r1 and c1) determine the starting point of the submatrix.\n   - The inner two loops (r2 and c2) determine the ending point of the submatrix.\n6. For each submatrix, it calculates the sum using np.sum().\n7. If the sum equals 1, it appends the submatrix to the result list.\n8. Finally, it returns the result list containing all submatrices with sum equal to 1.\n\nIf no submatrix with sum equal to 1 is found, the function will return an empty list.", type='text')], model='claude-3-5-sonnet-20240620', role='assistant', stop_reason='end_turn', stop_sequence=None, type='message', usage=Usage(input_tokens=134, output_tokens=403))