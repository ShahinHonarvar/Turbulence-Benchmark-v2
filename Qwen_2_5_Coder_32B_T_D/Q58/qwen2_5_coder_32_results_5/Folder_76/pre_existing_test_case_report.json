{
  "parameter(s)": [
    159
  ],
  "test_matrix_of_one_integer": [
    "passed",
    "",
    0.00018
  ],
  "test_vertical_matrix": [
    "passed",
    "",
    0.00349
  ],
  "test_matrix_of_having_159_integers": [
    "failed",
    "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[  81,   52,   38,  -67,   98,   41,  -51,   71,  -58,  -20,\\n           63,  -47,   75,  -88,    8,   38,   55,    3,  -47,   27,\\n          -59,   42,  -52,  -18,  -73,  -92,   32,  -82,   23,  100,\\n           10,  -30,   72,  -25,    3,    0,  -23,   27,  -12,  -77,\\n          -47,   27,   50,    1,   98,  -17,  -42,  -89,  -73,   27,\\n          -75,   33,  -42,  -79,  -48,   27,   93,  -39,   77,   41,\\n          -17,   68,  -26,  -90,   66,  -53,  -32,   71,  -30,  -61,\\n          -72,  -97,  -95,   37,  -24,   41,   83,  -73,   98,  -92,\\n          -40,  -90,   88,  -98,  -89,  -53,   23,   19,   65,   34,\\n           82,   21,   69,  -54,  -81,   -7,  -89,   60,   85,  -29,\\n           38, -100,  -22,   32,   61,   92,   97,   78,  -48,  -43,\\n          -87,   42,   93,  -79,   11,  -47,  -60,  -95,  -37,  -91,\\n          -77,   46,  -56,  -20,   78,   53,  -35,  -24,  -53,   38,\\n          -44,  -47,  -97,   86,   95,  -96,   46,   12,   -2,  -15,\\n           23,  -77,  -71,  -27,   48,  -99,   54,  -73,    0,  -72,\\n          -73,  -50,   16,  -49,  -15,   65,   65,  -80,   35]]))",
    0.00488
  ],
  "test_horizontal_matrix": [
    "failed",
    "assert 0 == 319",
    0.01059
  ]
}