{
  "parameter(s)": [
    12,
    "ascending"
  ],
  "test_strings_of_size_equal_to_12": [
    "failed",
    "AssertionError: assert (['y', 'u', '...E', 'F', ...]) == ['0', '6', ';...'E', 'F', ...]\n  At index 0 diff: ['y', 'u', 'g', '_', '^', 'R', 'F', 'E', '@', ';', '6', '0'] != '0'\n  Right contains 10 more items, first extra item: ';'\n  Full diff:\n  + (\n  - [\n  -  '0',\n  -  '6',...\n  \n  ...Full output truncated (37 lines hidden), use '-vv' to show",
    0.00082
  ],
  "test_length_of_result": [
    "failed",
    "AssertionError: assert 2 == 12\n +  where 2 = len((['{', 'y', 'w', 't', '^', 'W', ...], [',', '<', '>', '@', 'C', 'M', ...]))\n +    where (['{', 'y', 'w', 't', '^', 'W', ...], [',', '<', '>', '@', 'C', 'M', ...]) = return_n_greatest_chars('CtM,<V{W>yw@^')",
    0.00047
  ],
  "test_if_result_is_sorted": [
    "failed",
    "AssertionError: assert (['s', 'n', '...4', '5', ...]) == [['!', '#', '...W', 'T', ...]]\n  At index 0 diff: ['s', 'n', 'l', 'g', 'W', 'T', 'Q', '5', '4', ')', '$', '#'] != ['!', '#', '$', ')', '4', '5', 'Q', 'T', 'W', 'g', 'l', 'n']\n  Full diff:\n  - [\n  + (\n  +  ['s', 'n', 'l', 'g', 'W', 'T', 'Q', '5', '4', ')', '$', '#'],\n     ['!', '#', '$', ')', '4', '5', 'Q', 'T', 'W', 'g', 'l', 'n'],\n  + )\n  -  ['s', 'n', 'l', 'g', 'W', 'T', 'Q', '5', '4', ')', '$', '#'],\n  - ]",
    0.00078
  ]
}