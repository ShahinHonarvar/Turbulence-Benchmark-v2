predictions {
  string_value: "Prompt:\nSystem: You are an expert in Python programming. You are given a text specification surrounded by angle brackets. Create Python code according to the text specification. The Python code should not contain any comments. The Python code should be delimited only by triple backticks.\n        User: <Write a function called \'submatrix_with_n_numbers\' that takes one argument which is a two-dimensional numpy matrix of integers. The function should return the count of all submatrices of the given matrix that contain 13 integers each. If no such submatrix is found, the function should return 0.>\nOutput:\nSystem:```python\n        from numpy import count_nonzero, argwhere, array_equal\n\n        def submatrix_with_n_numbers(matrix):\n            \"\"\"\n            Count of all submatrices of a matrix that contain\n            the number 13\n            \"\"\"\n            K = 13\n            a = matrix\n            c = column_index_list(a, K)\n            if len(c) == 0:\n                return 0\n            s = 0\n            for i in range(len(c) - K + 1):\n                col = c[i:i + K]\n                compl = complement(col)\n                rows = row_index_list(a, compl)\n                for j in range(len(rows) - K + 1):\n                    count = count_nonzero(a[rows[j:j + K], col], axis=1)\n                    flag = 0\n                    for k in range(K):\n                        flag += count[k]\n                    if flag == K and array_equal(count, [K] * K):\n                        s += 1\n            return s\n\n        def column_index_list(a, K):\n            \"\"\"\n            Indexes of columns in the matrix that have exactly\n            K non-zero elements\n            \"\"\"\n            d = (count_nonzero(a, axis=0) == K)\n            return argwhere(d).flatten().tolist()\n\n        def complement(arr):\n            \"\"\"\n            Complement of the list\n            \"\"\"\n            s = set(range(len(arr))) - set(arr)\n            return list(s)\n\n        def row_index_list(a, col):\n            \"\"\"\n            Indexes of rows that include column indeces\n            from the list col\n            \"\"\"\n            return argwhere(a[:, col], axis=0).flatten().tolist()\n        ```"
}
deployed_model_id: "1558232276930658304"
model: "projects/901665225437/locations/us-east1/models/google_codegemma-7b-it-1725717676032"
model_version_id: "1"
model_display_name: "google_codegemma-7b-it-1725717676032"
