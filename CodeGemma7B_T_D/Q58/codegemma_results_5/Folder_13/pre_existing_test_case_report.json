{
  "parameter(s)": [
    175
  ],
  "test_matrix_of_one_integer": [
    "passed",
    "",
    0.00016
  ],
  "test_matrix_of_having_175_integers": [
    "failed",
    "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[ 24,  63,  33,  16, -42, -40, -39, -18, -74, -98, -34, -77,  86,\\n          21, -74,  69,  79, -91,  79,  89,   4, -95, -63, -83, -44, -48,\\n         -44, -44,  65,   2, -20, -63,  13,  58,  30, -79, -40, -27,  90,\\n         -27, -42,  -8, -20, 100,  99,  18, -69,  35, -82,  50, -29,  16,\\n          88,  47,  69,  34, -41,  -1, -59,   7,   9,  99, -11,  -2, -12,\\n         -49,  71, -94,  93, 100, -77, -66,  28, -18, -20,  54,   2, -57,\\n          41,  40,   1,  -8,  -2, -19,  52, -82, -11, -99,  18,  79,  42,\\n         -60, -21, -38,  14, -70,  11, -60,  64,  -2, -76, -39,  -9,  76,\\n          32, -46, -46, -37, -93,  33, -93,  97, -75,  14, -21, -19,  45,\\n          49,  60, -55, -91,   4, -30,  32,  23,  41, -46,  65, -87,  -4,\\n          -2,  31,  51,  38, -80,  13,  53, -62,  69, -77,  29, -24,  78,\\n          95,  50, -53, -65,  26, -62,   1,  87,  85, -59,  12, -82,  88,\\n          31,  12, -75,  39,  10,  84,  14,   2, -65, -48, -57, -55, -35,\\n          16,  89,  82, -11,  26,  34]]))",
    0.00371
  ],
  "test_vertical_matrix": [
    "failed",
    "assert 0 == 351",
    0.01002
  ],
  "test_horizontal_matrix": [
    "failed",
    "assert 0 == 351",
    0.00042
  ]
}