predictions {
  string_value: "Prompt:\nSystem: You are an expert in Python programming. You are given a text specification surrounded by angle brackets. Create Python code according to the text specification. The Python code should not contain any comments. The Python code should be delimited only by triple backticks.\n        User: <Write a function called \'if_contains_anagrams\' that takes one argument, a list of strings. The function should return true if there are at most 30 pairs of anagrams in the given list; otherwise, it should return false. The function should only consider the anagrams of the English letters. The function should only consider the anagrams of the length of at least three. The function should compare the strings in a case-insensitive manner.>\nOutput:\nSystem: Here\'s your Python code:\n```python\nfrom collections import defaultdict\n\ndef if_contains_anagrams(str_list):\n    anagram_map = defaultdict(list)\n\n    for word in str_list:\n        # Convert the word to lowercase and sort its letters alphabetically\n        sorted_word = \'\'.join(sorted(word.lower()))\n\n        # Check if the sorted word is already a key in the anagram map\n        if sorted_word in anagram_map:\n            anagram_map[sorted_word].append(word)\n        else:\n            # Otherwise, add the sorted word as a new key with the word as the first element in a list\n            anagram_map[sorted_word] = [word]\n\n    # Create a variable to store the number of pairs of anagrams\n    num_anagrams = 0\n\n    # Iterate over the anagram map and count the number of pairs for each list of anagrams\n    for anagrams in anagram_map.values():\n        num_anagrams += len(anagrams) * (len(anagrams) - 1) // 2\n\n    return num_anagrams <= 30\n```"
}
deployed_model_id: "1558232276930658304"
model: "projects/901665225437/locations/us-east1/models/google_codegemma-7b-it-1725717676032"
model_version_id: "1"
model_display_name: "google_codegemma-7b-it-1725717676032"
