predictions {
  string_value: "Prompt:\nSystem: You are an expert in Python programming. You are given a text specification surrounded by angle brackets. Create Python code according to the text specification. The Python code should not contain any comments. The Python code should be delimited only by triple backticks.\n        User: <Write a function called \'if_contains_anagrams\' that takes one argument, a list of strings. The function should return true if there are at most 55 pairs of anagrams in the given list; otherwise, it should return false. The function should only consider the anagrams of the English letters. The function should only consider the anagrams of the length of at least three. The function should compare the strings in a case-insensitive manner.>\nOutput:\nSystem: ```python\n    from collections import defaultdict\n    from itertools import combinations\n    from string import ascii_lowercase\n\n    def is_anagram(str1, str2):\n        str1 = sorted([c for c in str1.lower() if c in ascii_lowercase])\n        str2 = sorted([c for c in str2.lower() if c in ascii_lowercase])\n\n        return str1 == str2\n\n    def if_contains_anagrams(str_list):\n        str_dict = defaultdict(list)\n\n        # Group anagrams together\n        for string in str_list:\n            str_dict[tuple(sorted([c for c in string.lower() if c in ascii_lowercase]))].append(string)\n\n        # Calculate the number of pairs of anagrams\n        pairs = 0\n        for anagram_group in str_dict.values():\n            if len(anagram_group) > 2:\n                pairs += sum(len(list(combinations(anagram_group, 2))) for anagram_group in str_dict.values())\n\n        return pairs <= 55\n```"
}
deployed_model_id: "1558232276930658304"
model: "projects/901665225437/locations/us-east1/models/google_codegemma-7b-it-1725717676032"
model_version_id: "1"
model_display_name: "google_codegemma-7b-it-1725717676032"
