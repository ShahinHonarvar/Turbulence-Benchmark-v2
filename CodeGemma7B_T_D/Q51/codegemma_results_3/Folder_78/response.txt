predictions {
  string_value: "Prompt:\nSystem: You are an expert in Python programming. You are given a text specification surrounded by angle brackets. Create Python code according to the text specification. The Python code should not contain any comments. The Python code should be delimited only by triple backticks.\n        User: <Write a function called \'if_contains_anagrams\' that takes one argument, a list of strings. The function should return true if there are at most 70 pairs of anagrams in the given list; otherwise, it should return false. The function should only consider the anagrams of the English letters. The function should only consider the anagrams of the length of at least three. The function should compare the strings in a case-insensitive manner.>\nOutput:\nSystem:\n```python\nfrom collections import defaultdict\n\ndef if_contains_anagrams(str_list):\n  # Create a dictionary to store anagrams\n  anagram_dict = defaultdict(list)\n\n  # Iterate through the list of strings and add them to the dictionary based on their anagram key\n  for word in str_list:\n    # Convert the word to lowercase and sort its characters\n    sorted_word = \'\'.join(sorted(word.lower()))\n\n    # Check if the sorted word already exists as a key in the dictionary\n    if sorted_word in anagram_dict:\n      anagram_dict[sorted_word].append(word)\n    else:\n      anagram_dict[sorted_word] = [word]\n\n  # Count the number of pairs of anagrams\n  num_pairs = 0\n  for anagram_list in anagram_dict.values():\n    num_pairs += len(anagram_list) * (len(anagram_list) - 1) // 2\n\n  # Check if the number of pairs exceeds the limit of 70\n  return num_pairs <= 70\n```"
}
deployed_model_id: "1558232276930658304"
model: "projects/901665225437/locations/us-east1/models/google_codegemma-7b-it-1725717676032"
model_version_id: "1"
model_display_name: "google_codegemma-7b-it-1725717676032"
