{
  "parameter(s)": [
    34
  ],
  "test_string_of_similar_chars_of_length_34": [
    "passed",
    "",
    0.00018
  ],
  "test_string_of_many_chars": [
    "passed",
    "",
    0.00018
  ],
  "test_string_of_similar_chars_of_length_greater_than_34": [
    "passed",
    "",
    0.00012
  ],
  "test_string_of_spaces_and_letters": [
    "failed",
    "AssertionError: assert not {'  a  a  a  a  a  a  a  a  a  a  a  ', '  a  a  a  a  a  a  a  a  a  a  a  a  ', '  a  a  a  a  a  a  a  a  a  a  a  a  a  ', '  a  a  a  a  a  a  a  a  a  a  a  a  a  a  ', '  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  ', '  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  ', ...}\n +  where {'  a  a  a  a  a  a  a  a  a  a  a  ', '  a  a  a  a  a  a  a  a  a  a  a  a  ', '  a  a  a  a  a  a  a  a  a  a  a  a  a  ', '  a  a  a  a  a  a  a  a  a  a  a  a  a  a  ', '  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  ', '  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  ', ...} = palindrome_of_length_at_least_n(' a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a ')",
    0.00648
  ],
  "test_string_of_punctuations_and_letters": [
    "failed",
    "AssertionError: assert not {'%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%', '%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%', '%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%', '%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%', '%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%', '%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%', ...}\n +  where {'%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%', '%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%', '%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%', '%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%', '%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%', '%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%', ...} = palindrome_of_length_at_least_n('a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%a%')",
    0.00078
  ],
  "test_string_of_spaces": [
    "failed",
    "AssertionError: assert not {'                                  ', '                                   ', '                                    ', '                                     ', '                                      ', '                                       ', ...}\n +  where {'                                  ', '                                   ', '                                    ', '                                     ', '                                      ', '                                       ', ...} = palindrome_of_length_at_least_n('                                                                    ')",
    0.00046
  ]
}