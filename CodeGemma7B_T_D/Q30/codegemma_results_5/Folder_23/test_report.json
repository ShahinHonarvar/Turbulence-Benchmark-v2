{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests30_23_5.py::test_compare_length_of_strings", "location": ["tests30_23_5.py", 27, "test_compare_length_of_strings"], "keywords": {"test_compare_length_of_strings": 1, "tests30_23_5.py": 1, "Folder_23": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00012913902173750103, "start": 1729721587.2688067, "stop": 1729721587.2689362, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "7385c56b5fd54b9bb33e5d50184de400", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_23_5.py::test_string_of_length_one", "location": ["tests30_23_5.py", 5, "test_string_of_length_one"], "keywords": {"test_string_of_length_one": 1, "tests30_23_5.py": 1, "Folder_23": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00017725600628182292, "start": 1729721587.2690113, "stop": 1729721587.2691891, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "7385c56b5fd54b9bb33e5d50184de400", "node": "<WorkerController gw0>"}
{"nodeid": "tests30_23_5.py::test_length_of_large_string_of_only_specified_character", "location": ["tests30_23_5.py", 15, "test_length_of_large_string_of_only_specified_character"], "keywords": {"test_length_of_large_string_of_only_specified_character": 1, "tests30_23_5.py": 1, "Folder_23": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001774529810063541, "start": 1729721587.2690494, "stop": 1729721587.2692273, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "7385c56b5fd54b9bb33e5d50184de400", "node": "<WorkerController gw1>"}
{"nodeid": "tests30_23_5.py::test_compare_length_of_strings", "location": ["tests30_23_5.py", 27, "test_compare_length_of_strings"], "keywords": {"test_compare_length_of_strings": 1, "tests30_23_5.py": 1, "Folder_23": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.00013547801063396037, "start": 1729721587.269141, "stop": 1729721587.2692766, "extras": [], "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "7385c56b5fd54b9bb33e5d50184de400", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_23_5.py::test_compare_length_of_strings", "location": ["tests30_23_5.py", 27, "test_compare_length_of_strings"], "keywords": {"test_compare_length_of_strings": 1, "tests30_23_5.py": 1, "Folder_23": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 9.198498446494341e-05, "start": 1729721587.2695687, "stop": 1729721587.2696614, "$report_type": "TestReport", "item_index": 4, "worker_id": "gw2", "testrun_uid": "7385c56b5fd54b9bb33e5d50184de400", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_23_5.py::test_length_of_result", "location": ["tests30_23_5.py", 34, "test_length_of_result"], "keywords": {"test_length_of_result": 1, "tests30_23_5.py": 1, "Folder_23": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00015110700041987002, "start": 1729721587.2718165, "stop": 1729721587.271968, "$report_type": "TestReport", "item_index": 5, "worker_id": "gw2", "testrun_uid": "7385c56b5fd54b9bb33e5d50184de400", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_23_5.py::test_length_of_result", "location": ["tests30_23_5.py", 34, "test_length_of_result"], "keywords": {"test_length_of_result": 1, "tests30_23_5.py": 1, "Folder_23": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/CodeGemma7B_T_D/Q30/codegemma_results_5/Folder_23/tests30_23_5.py", "lineno": 40, "message": "AssertionError: assert 25 == (21 + 1)\n +  where 25 = len('L4zcX0TQAVKeSm2drPJty + b')\n +  and   21 = len('L4zcX0TQAVKeSm2drPJtb')"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_length_of_result():", "        s = ''.join(random.sample(string.ascii_letters + string.digits, k=20))", "        s = s + 'b'", "        returned_string = insert_before_character(s)", "        count = s.count('b')", ">       assert len(returned_string) == len(s) + count", "E       AssertionError: assert 25 == (21 + 1)", "E        +  where 25 = len('L4zcX0TQAVKeSm2drPJty + b')", "E        +  and   21 = len('L4zcX0TQAVKeSm2drPJtb')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/codegemma_results_5/Folder_23/tests30_23_5.py", "lineno": 40, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_length_of_result():", "        s = ''.join(random.sample(string.ascii_letters + string.digits, k=20))", "        s = s + 'b'", "        returned_string = insert_before_character(s)", "        count = s.count('b')", ">       assert len(returned_string) == len(s) + count", "E       AssertionError: assert 25 == (21 + 1)", "E        +  where 25 = len('L4zcX0TQAVKeSm2drPJty + b')", "E        +  and   21 = len('L4zcX0TQAVKeSm2drPJtb')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/codegemma_results_5/Folder_23/tests30_23_5.py", "lineno": 40, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/CodeGemma7B_T_D/Q30/codegemma_results_5/Folder_23/tests30_23_5.py", "lineno": 40, "message": "AssertionError: assert 25 == (21 + 1)\n +  where 25 = len('L4zcX0TQAVKeSm2drPJty + b')\n +  and   21 = len('L4zcX0TQAVKeSm2drPJtb')"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00038196900277398527, "start": 1729721587.2721756, "stop": 1729721587.272558, "extras": [], "$report_type": "TestReport", "item_index": 5, "worker_id": "gw2", "testrun_uid": "7385c56b5fd54b9bb33e5d50184de400", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_23_5.py::test_length_of_result", "location": ["tests30_23_5.py", 34, "test_length_of_result"], "keywords": {"test_length_of_result": 1, "tests30_23_5.py": 1, "Folder_23": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00014909400488249958, "start": 1729721587.2822292, "stop": 1729721587.2823796, "$report_type": "TestReport", "item_index": 5, "worker_id": "gw2", "testrun_uid": "7385c56b5fd54b9bb33e5d50184de400", "node": "<WorkerController gw2>"}
{"nodeid": "tests30_23_5.py::test_length_of_large_string_of_only_specified_character", "location": ["tests30_23_5.py", 15, "test_length_of_large_string_of_only_specified_character"], "keywords": {"test_length_of_large_string_of_only_specified_character": 1, "tests30_23_5.py": 1, "Folder_23": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/CodeGemma7B_T_D/Q30/codegemma_results_5/Folder_23/tests30_23_5.py", "lineno": 18, "message": "AssertionError: assert 5000 == (2 * 1000)\n +  where 5000 = len('y + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by ...+ by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + b')\n +    where 'y + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by ...+ by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + b' = insert_before_character('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')\n +  and   1000 = len('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_length_of_large_string_of_only_specified_character():", "        s = 'b' * 1000", ">       assert len(insert_before_character(s)) == 2 * len(s)", "E       AssertionError: assert 5000 == (2 * 1000)", "E        +  where 5000 = len('y + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by ...+ by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + b')", "E        +    where 'y + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by ...+ by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + b' = insert_before_character('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')", "E        +  and   1000 = len('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/codegemma_results_5/Folder_23/tests30_23_5.py", "lineno": 18, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_length_of_large_string_of_only_specified_character():", "        s = 'b' * 1000", ">       assert len(insert_before_character(s)) == 2 * len(s)", "E       AssertionError: assert 5000 == (2 * 1000)", "E        +  where 5000 = len('y + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by ...+ by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + b')", "E        +    where 'y + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by ...+ by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + b' = insert_before_character('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')", "E        +  and   1000 = len('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/codegemma_results_5/Folder_23/tests30_23_5.py", "lineno": 18, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/CodeGemma7B_T_D/Q30/codegemma_results_5/Folder_23/tests30_23_5.py", "lineno": 18, "message": "AssertionError: assert 5000 == (2 * 1000)\n +  where 5000 = len('y + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by ...+ by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + b')\n +    where 'y + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by ...+ by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + by + b' = insert_before_character('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')\n +  and   1000 = len('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb')"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00040926699875853956, "start": 1729721587.269517, "stop": 1729721587.269927, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "7385c56b5fd54b9bb33e5d50184de400", "node": "<WorkerController gw1>"}
{"nodeid": "tests30_23_5.py::test_length_of_large_string_of_only_specified_character", "location": ["tests30_23_5.py", 15, "test_length_of_large_string_of_only_specified_character"], "keywords": {"test_length_of_large_string_of_only_specified_character": 1, "tests30_23_5.py": 1, "Folder_23": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.0002119150012731552, "start": 1729721587.2863133, "stop": 1729721587.2865262, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw1", "testrun_uid": "7385c56b5fd54b9bb33e5d50184de400", "node": "<WorkerController gw1>"}
{"nodeid": "tests30_23_5.py::test_string_of_length_one", "location": ["tests30_23_5.py", 5, "test_string_of_length_one"], "keywords": {"test_string_of_length_one": 1, "tests30_23_5.py": 1, "Folder_23": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/CodeGemma7B_T_D/Q30/codegemma_results_5/Folder_23/tests30_23_5.py", "lineno": 8, "message": "AssertionError: assert 'y + b' == 'yb'\n  - yb\n  + y + b"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_length_one():", "        s = 'b'", ">       assert insert_before_character(s) == 'y' + 'b'", "E       AssertionError: assert 'y + b' == 'yb'", "E         - yb", "E         + y + b"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/codegemma_results_5/Folder_23/tests30_23_5.py", "lineno": 8, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_length_one():", "        s = 'b'", ">       assert insert_before_character(s) == 'y' + 'b'", "E       AssertionError: assert 'y + b' == 'yb'", "E         - yb", "E         + y + b"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q30/codegemma_results_5/Folder_23/tests30_23_5.py", "lineno": 8, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/CodeGemma7B_T_D/Q30/codegemma_results_5/Folder_23/tests30_23_5.py", "lineno": 8, "message": "AssertionError: assert 'y + b' == 'yb'\n  - yb\n  + y + b"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0003494789998512715, "start": 1729721587.2694771, "stop": 1729721587.2698271, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "7385c56b5fd54b9bb33e5d50184de400", "node": "<WorkerController gw0>"}
{"nodeid": "tests30_23_5.py::test_string_of_length_one", "location": ["tests30_23_5.py", 5, "test_string_of_length_one"], "keywords": {"test_string_of_length_one": 1, "tests30_23_5.py": 1, "Folder_23": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00011668499791994691, "start": 1729721587.2871842, "stop": 1729721587.2873015, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "7385c56b5fd54b9bb33e5d50184de400", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
