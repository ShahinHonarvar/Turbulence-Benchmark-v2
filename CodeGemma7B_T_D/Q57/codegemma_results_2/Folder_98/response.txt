predictions {
  string_value: "Prompt:\nSystem: You are an expert in Python programming. You are given a text specification surrounded by angle brackets. Create Python code according to the text specification. The Python code should not contain any comments. The Python code should be delimited only by triple backticks.\n        User: <Write a function called \'submatrix_with_particular_sum\' that takes one argument which is a two-dimensional numpy matrix of integers. The function should return the list of all submatrices of the given matrix such that the sum of all integers in each submatrix equals 0. If no such submatrix is found, the function should return an empty list.>\nOutput:\nSystem:\n```python\nfrom typing import List\n\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix: np.ndarray) -> List[np.ndarray]:\n    \"\"\"\n    The function submatrix_with_particular_sum is an algorithm to find all submatrices of a given matrix with the specific condition that the sum of all integers in each submatrix equals 0.\n\n    Args:\n    matrix: The numpy matrix of integers.\n\n    Returns:\n    List of all submatrices of the matrix with the specific condition. If such submatrices are not found, the function returns an empty list.\n    \"\"\"\n\n    answer_list = []\n    list_matrix = []\n\n    for rows in range(len(matrix)):\n        for col in range(len(matrix[0])):\n            list_matrix.append(matrix[rows][col])\n\n    for i in range(0, len(list_matrix)):\n        for j in range(i + 1, len(list_matrix) + 1):\n            submatrix = np.array(list_matrix[i:j])\n            if submatrix.sum() == 0:\n                answer_list.append(submatrix)\n\n        if answer_list:\n            return answer_list\n\n    return answer_list\n\n```"
}
deployed_model_id: "1558232276930658304"
model: "projects/901665225437/locations/us-east1/models/google_codegemma-7b-it-1725717676032"
model_version_id: "1"
model_display_name: "google_codegemma-7b-it-1725717676032"
