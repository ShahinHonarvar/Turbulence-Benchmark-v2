{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1204, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1204, "_consider_importhook"]}
{"pytest_version": "7.4.4", "$report_type": "SessionStart"}
{"nodeid": "tests44_77_5.py::test_list_of_non_prime_nums", "location": ["tests44_77_5.py", 14, "test_list_of_non_prime_nums"], "keywords": {"test_list_of_non_prime_nums": 1, "tests44_77_5.py": 1, "Folder_77": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00027226600013818825, "start": 1729818355.226296, "stop": 1729818355.2265687, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "50b11c4963d445fe835105c9f67c1d79", "node": "<WorkerController gw2>"}
{"nodeid": "tests44_77_5.py::test_list_of_primes", "location": ["tests44_77_5.py", 3, "test_list_of_primes"], "keywords": {"test_list_of_primes": 1, "tests44_77_5.py": 1, "Folder_77": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0001857940005720593, "start": 1729818355.2264402, "stop": 1729818355.2266266, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw1", "testrun_uid": "50b11c4963d445fe835105c9f67c1d79", "node": "<WorkerController gw1>"}
{"nodeid": "tests44_77_5.py::test_list_of_ones", "location": ["tests44_77_5.py", 9, "test_list_of_ones"], "keywords": {"test_list_of_ones": 1, "tests44_77_5.py": 1, "Folder_77": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00026950199935527053, "start": 1729818355.2263474, "stop": 1729818355.2266173, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "50b11c4963d445fe835105c9f67c1d79", "node": "<WorkerController gw0>"}
{"nodeid": "tests44_77_5.py::test_list_of_ones", "location": ["tests44_77_5.py", 9, "test_list_of_ones"], "keywords": {"test_list_of_ones": 1, "tests44_77_5.py": 1, "Folder_77": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/CodeGemma7B_T_D/Q44/codegemma_results_5/Folder_77/generated_answer.py", "lineno": 12, "message": "TypeError: list indices must be integers or slices, not range"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_ones():", "        list_of_ones = [1 if i % 2 == 0 else 1 for i in range(774 + 100)]", ">       assert composite_nums_between_indices(list_of_ones) == set()"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q44/codegemma_results_5/Folder_77/tests44_77_5.py", "lineno": 12, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def composite_nums_between_indices(nums):", "        \"\"\"Returns the set of composite numbers in the given list between index 667 to 774, inclusive.\"\"\"", ">       return {num for num in nums[inclusive_range(667, 774, 1)] if num not in filterfalse(lambda x: x == 1 or (x == num and num % 2 == 0), range(2 + int(num ** 0.5), num, 2))}", "E       TypeError: list indices must be integers or slices, not range"], "reprfuncargs": {"args": [["nums", "[1, 1, 1, 1, 1, 1, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q44/codegemma_results_5/Folder_77/generated_answer.py", "lineno": 12, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_ones():", "        list_of_ones = [1 if i % 2 == 0 else 1 for i in range(774 + 100)]", ">       assert composite_nums_between_indices(list_of_ones) == set()"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q44/codegemma_results_5/Folder_77/tests44_77_5.py", "lineno": 12, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def composite_nums_between_indices(nums):", "        \"\"\"Returns the set of composite numbers in the given list between index 667 to 774, inclusive.\"\"\"", ">       return {num for num in nums[inclusive_range(667, 774, 1)] if num not in filterfalse(lambda x: x == 1 or (x == num and num % 2 == 0), range(2 + int(num ** 0.5), num, 2))}", "E       TypeError: list indices must be integers or slices, not range"], "reprfuncargs": {"args": [["nums", "[1, 1, 1, 1, 1, 1, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q44/codegemma_results_5/Folder_77/generated_answer.py", "lineno": 12, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/CodeGemma7B_T_D/Q44/codegemma_results_5/Folder_77/generated_answer.py", "lineno": 12, "message": "TypeError: list indices must be integers or slices, not range"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.00021126599949639058, "start": 1729818355.2268808, "stop": 1729818355.227093, "extras": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "50b11c4963d445fe835105c9f67c1d79", "node": "<WorkerController gw0>"}
{"nodeid": "tests44_77_5.py::test_list_of_ones", "location": ["tests44_77_5.py", 9, "test_list_of_ones"], "keywords": {"test_list_of_ones": 1, "tests44_77_5.py": 1, "Folder_77": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00016165499982889742, "start": 1729818355.2383647, "stop": 1729818355.2385273, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "50b11c4963d445fe835105c9f67c1d79", "node": "<WorkerController gw0>"}
{"nodeid": "tests44_77_5.py::test_list_of_non_prime_nums", "location": ["tests44_77_5.py", 14, "test_list_of_non_prime_nums"], "keywords": {"test_list_of_non_prime_nums": 1, "tests44_77_5.py": 1, "Folder_77": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/CodeGemma7B_T_D/Q44/codegemma_results_5/Folder_77/generated_answer.py", "lineno": 12, "message": "TypeError: list indices must be integers or slices, not range"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_non_prime_nums():", "        for n in range(2,10):", "            list_of_non_prime_nums = [n*i for i in range(2, (774 + 1) * 10)]", "            expected_result = list_of_non_prime_nums[667:774 + 1]", ">           assert composite_nums_between_indices(list_of_non_prime_nums) == set(expected_result)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q44/codegemma_results_5/Folder_77/tests44_77_5.py", "lineno": 19, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def composite_nums_between_indices(nums):", "        \"\"\"Returns the set of composite numbers in the given list between index 667 to 774, inclusive.\"\"\"", ">       return {num for num in nums[inclusive_range(667, 774, 1)] if num not in filterfalse(lambda x: x == 1 or (x == num and num % 2 == 0), range(2 + int(num ** 0.5), num, 2))}", "E       TypeError: list indices must be integers or slices, not range"], "reprfuncargs": {"args": [["nums", "[4, 6, 8, 10, 12, 14, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q44/codegemma_results_5/Folder_77/generated_answer.py", "lineno": 12, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_non_prime_nums():", "        for n in range(2,10):", "            list_of_non_prime_nums = [n*i for i in range(2, (774 + 1) * 10)]", "            expected_result = list_of_non_prime_nums[667:774 + 1]", ">           assert composite_nums_between_indices(list_of_non_prime_nums) == set(expected_result)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q44/codegemma_results_5/Folder_77/tests44_77_5.py", "lineno": 19, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def composite_nums_between_indices(nums):", "        \"\"\"Returns the set of composite numbers in the given list between index 667 to 774, inclusive.\"\"\"", ">       return {num for num in nums[inclusive_range(667, 774, 1)] if num not in filterfalse(lambda x: x == 1 or (x == num and num % 2 == 0), range(2 + int(num ** 0.5), num, 2))}", "E       TypeError: list indices must be integers or slices, not range"], "reprfuncargs": {"args": [["nums", "[4, 6, 8, 10, 12, 14, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q44/codegemma_results_5/Folder_77/generated_answer.py", "lineno": 12, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/CodeGemma7B_T_D/Q44/codegemma_results_5/Folder_77/generated_answer.py", "lineno": 12, "message": "TypeError: list indices must be integers or slices, not range"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0005293639997034916, "start": 1729818355.2268424, "stop": 1729818355.227372, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "50b11c4963d445fe835105c9f67c1d79", "node": "<WorkerController gw2>"}
{"nodeid": "tests44_77_5.py::test_list_of_non_prime_nums", "location": ["tests44_77_5.py", 14, "test_list_of_non_prime_nums"], "keywords": {"test_list_of_non_prime_nums": 1, "tests44_77_5.py": 1, "Folder_77": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00022632199943473097, "start": 1729818355.2406085, "stop": 1729818355.240836, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw2", "testrun_uid": "50b11c4963d445fe835105c9f67c1d79", "node": "<WorkerController gw2>"}
{"nodeid": "tests44_77_5.py::test_list_of_primes", "location": ["tests44_77_5.py", 3, "test_list_of_primes"], "keywords": {"test_list_of_primes": 1, "tests44_77_5.py": 1, "Folder_77": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/CodeGemma7B_T_D/Q44/codegemma_results_5/Folder_77/generated_answer.py", "lineno": 12, "message": "TypeError: list indices must be integers or slices, not range"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_primes():", "        for n in [2, 3, 5, 7, 11, 13, 17]:", "            list_of_primes = [n for _ in range(774 * 10)]", ">           assert composite_nums_between_indices(list_of_primes) == set()"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q44/codegemma_results_5/Folder_77/tests44_77_5.py", "lineno": 7, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def composite_nums_between_indices(nums):", "        \"\"\"Returns the set of composite numbers in the given list between index 667 to 774, inclusive.\"\"\"", ">       return {num for num in nums[inclusive_range(667, 774, 1)] if num not in filterfalse(lambda x: x == 1 or (x == num and num % 2 == 0), range(2 + int(num ** 0.5), num, 2))}", "E       TypeError: list indices must be integers or slices, not range"], "reprfuncargs": {"args": [["nums", "[2, 2, 2, 2, 2, 2, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q44/codegemma_results_5/Folder_77/generated_answer.py", "lineno": 12, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_list_of_primes():", "        for n in [2, 3, 5, 7, 11, 13, 17]:", "            list_of_primes = [n for _ in range(774 * 10)]", ">           assert composite_nums_between_indices(list_of_primes) == set()"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q44/codegemma_results_5/Folder_77/tests44_77_5.py", "lineno": 7, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    def composite_nums_between_indices(nums):", "        \"\"\"Returns the set of composite numbers in the given list between index 667 to 774, inclusive.\"\"\"", ">       return {num for num in nums[inclusive_range(667, 774, 1)] if num not in filterfalse(lambda x: x == 1 or (x == num and num % 2 == 0), range(2 + int(num ** 0.5), num, 2))}", "E       TypeError: list indices must be integers or slices, not range"], "reprfuncargs": {"args": [["nums", "[2, 2, 2, 2, 2, 2, ...]"]]}, "reprlocals": null, "reprfileloc": {"path": "Q44/codegemma_results_5/Folder_77/generated_answer.py", "lineno": 12, "message": "TypeError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/CodeGemma7B_T_D/Q44/codegemma_results_5/Folder_77/generated_answer.py", "lineno": 12, "message": "TypeError: list indices must be integers or slices, not range"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0003537339998729294, "start": 1729818355.2269197, "stop": 1729818355.2272742, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw1", "testrun_uid": "50b11c4963d445fe835105c9f67c1d79", "node": "<WorkerController gw1>"}
{"nodeid": "tests44_77_5.py::test_list_of_primes", "location": ["tests44_77_5.py", 3, "test_list_of_primes"], "keywords": {"test_list_of_primes": 1, "tests44_77_5.py": 1, "Folder_77": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00017333200048597064, "start": 1729818355.2448401, "stop": 1729818355.2450144, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw1", "testrun_uid": "50b11c4963d445fe835105c9f67c1d79", "node": "<WorkerController gw1>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
