{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1277, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1277, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1277, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1277, "_consider_importhook"]}
{"pytest_version": "8.3.3", "$report_type": "SessionStart"}
{"nodeid": "tests57_54_2.py::test_matrix_of_single_number_equal_to_sum", "location": ["tests57_54_2.py", 17, "test_matrix_of_single_number_equal_to_sum"], "keywords": {"test_matrix_of_single_number_equal_to_sum": 1, "__wrapped__": 1, "tests57_54_2.py": 1, "Folder_54": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.0003588991239666939, "start": 1738460351.6020412, "stop": 1738460351.6024005, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "30fb182c7f1144438ca84650d664f74f", "node": "<WorkerController gw0>"}
{"nodeid": "tests57_54_2.py::test_matrix_of_single_number_equal_to_sum", "location": ["tests57_54_2.py", 17, "test_matrix_of_single_number_equal_to_sum"], "keywords": {"test_matrix_of_single_number_equal_to_sum": 1, "__wrapped__": 1, "tests57_54_2.py": 1, "Folder_54": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.000611540861427784, "start": 1738460351.6025667, "stop": 1738460351.6031787, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "30fb182c7f1144438ca84650d664f74f", "node": "<WorkerController gw0>"}
{"nodeid": "tests57_54_2.py::test_matrix_of_single_number_equal_to_sum", "location": ["tests57_54_2.py", 17, "test_matrix_of_single_number_equal_to_sum"], "keywords": {"test_matrix_of_single_number_equal_to_sum": 1, "__wrapped__": 1, "tests57_54_2.py": 1, "Folder_54": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 9.131059050559998e-05, "start": 1738460351.6038735, "stop": 1738460351.6039655, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "30fb182c7f1144438ca84650d664f74f", "node": "<WorkerController gw0>"}
{"nodeid": "tests57_54_2.py::test_matrix_of_single_number_unequal_to_sum", "location": ["tests57_54_2.py", 23, "test_matrix_of_single_number_unequal_to_sum"], "keywords": {"test_matrix_of_single_number_unequal_to_sum": 1, "__wrapped__": 1, "tests57_54_2.py": 1, "Folder_54": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00029739830642938614, "start": 1738460351.6047225, "stop": 1738460351.6050205, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "30fb182c7f1144438ca84650d664f74f", "node": "<WorkerController gw0>"}
{"nodeid": "tests57_54_2.py::test_matrix_of_single_number_unequal_to_sum", "location": ["tests57_54_2.py", 23, "test_matrix_of_single_number_unequal_to_sum"], "keywords": {"test_matrix_of_single_number_unequal_to_sum": 1, "__wrapped__": 1, "tests57_54_2.py": 1, "Folder_54": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 0.00018938910216093063, "start": 1738460351.6053114, "stop": 1738460351.6055014, "extras": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "30fb182c7f1144438ca84650d664f74f", "node": "<WorkerController gw0>"}
{"nodeid": "tests57_54_2.py::test_matrix_of_single_number_unequal_to_sum", "location": ["tests57_54_2.py", 23, "test_matrix_of_single_number_unequal_to_sum"], "keywords": {"test_matrix_of_single_number_unequal_to_sum": 1, "__wrapped__": 1, "tests57_54_2.py": 1, "Folder_54": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 7.975567132234573e-05, "start": 1738460351.6060853, "stop": 1738460351.6061654, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "30fb182c7f1144438ca84650d664f74f", "node": "<WorkerController gw0>"}
{"nodeid": "tests57_54_2.py::test_matrix_of_several_numbers", "location": ["tests57_54_2.py", 29, "test_matrix_of_several_numbers"], "keywords": {"test_matrix_of_several_numbers": 1, "__wrapped__": 1, "tests57_54_2.py": 1, "Folder_54": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 0.00037990137934684753, "start": 1738460351.6068215, "stop": 1738460351.607202, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw0", "testrun_uid": "30fb182c7f1144438ca84650d664f74f", "node": "<WorkerController gw0>"}
{"nodeid": "tests57_54_2.py::test_matrix_of_several_numbers", "location": ["tests57_54_2.py", 29, "test_matrix_of_several_numbers"], "keywords": {"test_matrix_of_several_numbers": 1, "__wrapped__": 1, "tests57_54_2.py": 1, "Folder_54": 1, "": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/shape_base.py", "lineno": 289, "message": "ValueError: all the input array dimensions except for the concatenation axis must match exactly, but along dimension 1, the array at index 0 has size 8 and the array at index 1 has size 9"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_several_numbers():", "        if -59 <= 0:", "            row = '1 2 3 4 5 6 7 8 9'", "            input_matrix = np.matrix(f'{row}; {row}; {row}')", "        else:", "            row = '-1 -2 -3 -4 -5 -6 -7 -8 -9'", "            input_matrix = np.matrix(f'{row}; {row}; {row}')", ">       assert not submatrix_with_particular_sum(input_matrix)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q57/Phi_3_results_2/Folder_54/tests57_54_2.py", "lineno": 38, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    find_submatrices(i, C - 1, matrix[i])"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/Phi_3_results_2/Folder_54/generated_answer.py", "lineno": 22, "message": "in submatrix_with_particular_sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    find_submatrices(i + 1, j, np.vstack((current, matrix[i])))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/Phi_3_results_2/Folder_54/generated_answer.py", "lineno": 18, "message": "in find_submatrices"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    find_submatrices(i + 1, j, np.vstack((current, matrix[i])))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/Phi_3_results_2/Folder_54/generated_answer.py", "lineno": 18, "message": "in find_submatrices"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    find_submatrices(i, j - 1, current[:, :-1])"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/Phi_3_results_2/Folder_54/generated_answer.py", "lineno": 19, "message": "in find_submatrices"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    find_submatrices(i + 1, j, np.vstack((current, matrix[i])))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/Phi_3_results_2/Folder_54/generated_answer.py", "lineno": 18, "message": "in find_submatrices"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_vhstack_dispatcher)", "    def vstack(tup, *, dtype=None, casting=\"same_kind\"):", "        \"\"\"", "        Stack arrays in sequence vertically (row wise).", "    ", "        This is equivalent to concatenation along the first axis after 1-D arrays", "        of shape `(N,)` have been reshaped to `(1,N)`. Rebuilds arrays divided by", "        `vsplit`.", "    ", "        This function makes most sense for arrays with up to 3 dimensions. For", "        instance, for pixel-data with a height (first axis), width (second axis),", "        and r/g/b channels (third axis). The functions `concatenate`, `stack` and", "        `block` provide more general stacking and concatenation operations.", "    ", "        ``np.row_stack`` is an alias for `vstack`. They are the same function.", "    ", "        Parameters", "        ----------", "        tup : sequence of ndarrays", "            The arrays must have the same shape along all but the first axis.", "            1-D arrays must have the same length.", "    ", "        dtype : str or dtype", "            If provided, the destination array will have this dtype. Cannot be", "            provided together with `out`.", "    ", "        .. versionadded:: 1.24", "    ", "        casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional", "            Controls what kind of data casting may occur. Defaults to 'same_kind'.", "    ", "        .. versionadded:: 1.24", "    ", "        Returns", "        -------", "        stacked : ndarray", "            The array formed by stacking the given arrays, will be at least 2-D.", "    ", "        See Also", "        --------", "        concatenate : Join a sequence of arrays along an existing axis.", "        stack : Join a sequence of arrays along a new axis.", "        block : Assemble an nd-array from nested lists of blocks.", "        hstack : Stack arrays in sequence horizontally (column wise).", "        dstack : Stack arrays in sequence depth wise (along third axis).", "        column_stack : Stack 1-D arrays as columns into a 2-D array.", "        vsplit : Split an array into multiple sub-arrays vertically (row-wise).", "    ", "        Examples", "        --------", "        >>> a = np.array([1, 2, 3])", "        >>> b = np.array([4, 5, 6])", "        >>> np.vstack((a,b))", "        array([[1, 2, 3],", "               [4, 5, 6]])", "    ", "        >>> a = np.array([[1], [2], [3]])", "        >>> b = np.array([[4], [5], [6]])", "        >>> np.vstack((a,b))", "        array([[1],", "               [2],", "               [3],", "               [4],", "               [5],", "               [6]])", "    ", "        \"\"\"", "        arrs = atleast_2d(*tup)", "        if not isinstance(arrs, list):", "            arrs = [arrs]", ">       return _nx.concatenate(arrs, 0, dtype=dtype, casting=casting)", "E       ValueError: all the input array dimensions except for the concatenation axis must match exactly, but along dimension 1, the array at index 0 has size 8 and the array at index 1 has size 9"], "reprfuncargs": {"args": [["tup", "(matrix([[1, 2, 3, 4, 5, 6, 7, 8],\n        [1, 2, 3, 4, 5, 6, 7, 8],\n        [1, 2, 3, 4, 5, 6, 7, 8]]), matrix([[1, 2, 3, 4, 5, 6, 7, 8, 9]]))"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/shape_base.py", "lineno": 289, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    @ignore_warnings", "    def test_matrix_of_several_numbers():", "        if -59 <= 0:", "            row = '1 2 3 4 5 6 7 8 9'", "            input_matrix = np.matrix(f'{row}; {row}; {row}')", "        else:", "            row = '-1 -2 -3 -4 -5 -6 -7 -8 -9'", "            input_matrix = np.matrix(f'{row}; {row}; {row}')", ">       assert not submatrix_with_particular_sum(input_matrix)"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q57/Phi_3_results_2/Folder_54/tests57_54_2.py", "lineno": 38, "message": ""}, "style": "long"}}, {"type": "ReprEntry", "data": {"lines": ["    find_submatrices(i, C - 1, matrix[i])"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/Phi_3_results_2/Folder_54/generated_answer.py", "lineno": 22, "message": "in submatrix_with_particular_sum"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    find_submatrices(i + 1, j, np.vstack((current, matrix[i])))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/Phi_3_results_2/Folder_54/generated_answer.py", "lineno": 18, "message": "in find_submatrices"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    find_submatrices(i + 1, j, np.vstack((current, matrix[i])))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/Phi_3_results_2/Folder_54/generated_answer.py", "lineno": 18, "message": "in find_submatrices"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    find_submatrices(i, j - 1, current[:, :-1])"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/Phi_3_results_2/Folder_54/generated_answer.py", "lineno": 19, "message": "in find_submatrices"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    find_submatrices(i + 1, j, np.vstack((current, matrix[i])))"], "reprfuncargs": null, "reprlocals": null, "reprfileloc": {"path": "Q57/Phi_3_results_2/Folder_54/generated_answer.py", "lineno": 18, "message": "in find_submatrices"}, "style": "short"}}, {"type": "ReprEntry", "data": {"lines": ["    @array_function_dispatch(_vhstack_dispatcher)", "    def vstack(tup, *, dtype=None, casting=\"same_kind\"):", "        \"\"\"", "        Stack arrays in sequence vertically (row wise).", "    ", "        This is equivalent to concatenation along the first axis after 1-D arrays", "        of shape `(N,)` have been reshaped to `(1,N)`. Rebuilds arrays divided by", "        `vsplit`.", "    ", "        This function makes most sense for arrays with up to 3 dimensions. For", "        instance, for pixel-data with a height (first axis), width (second axis),", "        and r/g/b channels (third axis). The functions `concatenate`, `stack` and", "        `block` provide more general stacking and concatenation operations.", "    ", "        ``np.row_stack`` is an alias for `vstack`. They are the same function.", "    ", "        Parameters", "        ----------", "        tup : sequence of ndarrays", "            The arrays must have the same shape along all but the first axis.", "            1-D arrays must have the same length.", "    ", "        dtype : str or dtype", "            If provided, the destination array will have this dtype. Cannot be", "            provided together with `out`.", "    ", "        .. versionadded:: 1.24", "    ", "        casting : {'no', 'equiv', 'safe', 'same_kind', 'unsafe'}, optional", "            Controls what kind of data casting may occur. Defaults to 'same_kind'.", "    ", "        .. versionadded:: 1.24", "    ", "        Returns", "        -------", "        stacked : ndarray", "            The array formed by stacking the given arrays, will be at least 2-D.", "    ", "        See Also", "        --------", "        concatenate : Join a sequence of arrays along an existing axis.", "        stack : Join a sequence of arrays along a new axis.", "        block : Assemble an nd-array from nested lists of blocks.", "        hstack : Stack arrays in sequence horizontally (column wise).", "        dstack : Stack arrays in sequence depth wise (along third axis).", "        column_stack : Stack 1-D arrays as columns into a 2-D array.", "        vsplit : Split an array into multiple sub-arrays vertically (row-wise).", "    ", "        Examples", "        --------", "        >>> a = np.array([1, 2, 3])", "        >>> b = np.array([4, 5, 6])", "        >>> np.vstack((a,b))", "        array([[1, 2, 3],", "               [4, 5, 6]])", "    ", "        >>> a = np.array([[1], [2], [3]])", "        >>> b = np.array([[4], [5], [6]])", "        >>> np.vstack((a,b))", "        array([[1],", "               [2],", "               [3],", "               [4],", "               [5],", "               [6]])", "    ", "        \"\"\"", "        arrs = atleast_2d(*tup)", "        if not isinstance(arrs, list):", "            arrs = [arrs]", ">       return _nx.concatenate(arrs, 0, dtype=dtype, casting=casting)", "E       ValueError: all the input array dimensions except for the concatenation axis must match exactly, but along dimension 1, the array at index 0 has size 8 and the array at index 1 has size 9"], "reprfuncargs": {"args": [["tup", "(matrix([[1, 2, 3, 4, 5, 6, 7, 8],\n        [1, 2, 3, 4, 5, 6, 7, 8],\n        [1, 2, 3, 4, 5, 6, 7, 8]]), matrix([[1, 2, 3, 4, 5, 6, 7, 8, 9]]))"]]}, "reprlocals": null, "reprfileloc": {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/shape_base.py", "lineno": 289, "message": "ValueError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/numpy/core/shape_base.py", "lineno": 289, "message": "ValueError: all the input array dimensions except for the concatenation axis must match exactly, but along dimension 1, the array at index 0 has size 8 and the array at index 1 has size 9"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.0003428477793931961, "start": 1738460351.6074724, "stop": 1738460351.6078157, "extras": [], "$report_type": "TestReport", "item_index": 2, "worker_id": "gw0", "testrun_uid": "30fb182c7f1144438ca84650d664f74f", "node": "<WorkerController gw0>"}
{"nodeid": "tests57_54_2.py::test_matrix_of_several_numbers", "location": ["tests57_54_2.py", 29, "test_matrix_of_several_numbers"], "keywords": {"test_matrix_of_several_numbers": 1, "__wrapped__": 1, "tests57_54_2.py": 1, "Folder_54": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 0.00014918576925992966, "start": 1738460351.6313705, "stop": 1738460351.6315207, "$report_type": "TestReport", "item_index": 2, "worker_id": "gw0", "testrun_uid": "30fb182c7f1144438ca84650d664f74f", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
