{
  "id": "cmpl-3dcc7acf42044cf0b031c50e0e0a3439",
  "object": "chat.completion",
  "created": 1725543549,
  "model": "phi3-medium-4k",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": " ```\nimport numpy as np\n\ndef submatrix_with_particular_sum(matrix):\n    if not isinstance(matrix, np.ndarray) or len(matrix.shape) != 2:\n        raise ValueError(\"Input must be a two-dimensional numpy matrix\")\n\n    rows, cols = matrix.shape\n    submatrices = []\n\n    for top in range(rows):\n        for left in range(cols):\n            for bottom in range(top, rows):\n                for right in range(left, cols):\n                    submatrix = matrix[top:bottom+1, left:right+1]\n                    if submatrix.sum() == -255:\n                        submatrices.append(submatrix)\n\n    return submatrices\n```\n\n```python\nimport numpy as np\nfrom itertools import product\n\ndef submatrix_with_particular_sum(matrix):\n    if not isinstance(matrix, np.ndarray) or len(matrix.shape) != 2:\n        raise ValueError(\"Input must be a two-dimensional numpy matrix\")\n\n    rows, cols = matrix.shape\n    target_sum = -255\n    submatrices = []\n\n    for size in range(1, min(rows, cols) + 1):\n        for left, right in product(range(cols - size + 1), range(size)):\n            for top, bottom in product(range(rows - size + 1), range(size)):\n                if matrix[top:top+size, left:left+size].sum() == target_sum:\n                    submatrices.append(matrix[top:top+size, left:left+size].copy())\n\n    return submatrices\n```",
        "tool_calls": []
      },
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 127,
    "total_tokens": 524,
    "completion_tokens": 397
  }
}