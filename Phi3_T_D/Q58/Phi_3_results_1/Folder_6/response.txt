{
  "id": "cmpl-b83ed2ad5d4d4d6a8ab2e9a5f5dba22f",
  "object": "chat.completion",
  "created": 1725545069,
  "model": "phi3-medium-4k",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": " ```python\nimport numpy as np\n\ndef submatrix_with_n_numbers(matrix):\n    if not isinstance(matrix, np.ndarray):\n        return 0\n\n    rows, cols = matrix.shape\n    if rows < 122 or cols < 122:\n        return 0\n\n    def count_submatrices(row_start, col_start, rows_needed, cols_needed):\n        if rows_needed <= 0 or cols_needed <= 0:\n            return 1\n\n        current_count = 0\n        \n        for row in range(row_start, rows):\n            for col in range(col_start, cols):\n                top = row_start if row == row_start else row\n                bottom = row + rows_needed - 1\n                left = col_start if col == col_start else col\n                right = col + cols_needed - 1\n                \n                total_sum = int(matrix[top:bottom+1, left:right+1].sum())\n                \n                if total_sum == 122:\n                    current_count += 1\n\n        return current_count + count_submatrices(row_start, col_start + 1, rows_needed, cols_needed - 1) \\\n               + count_submatrices(row_start + 1, col_start, rows_needed - 1, cols_needed)\n\n    total_count = 0\n\n    for rows_needed in range(1, rows + 1):\n        for cols_needed in range(1, cols + 1):\n            total_count += count_submatrices(0, 0, rows_needed, cols_needed)\n\n    return total_count\n```",
        "tool_calls": []
      },
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 117,
    "total_tokens": 536,
    "completion_tokens": 419
  }
}