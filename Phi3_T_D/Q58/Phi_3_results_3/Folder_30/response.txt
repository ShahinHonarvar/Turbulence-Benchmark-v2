{
  "id": "cmpl-6bcdcfc3525a41faaa300e47be40e78c",
  "object": "chat.completion",
  "created": 1725545984,
  "model": "phi3-medium-4k",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": " ```python\nimport numpy as np\n\ndef submatrix_with_n_numbers(matrix):\n    if not isinstance(matrix, np.ndarray) or len(matrix.shape) != 2:\n        raise ValueError(\"Input must be a two-dimensional numpy matrix\")\n\n    def count_submatrices(start_row, start_col, size, required_count):\n        count = 0\n        for row in range(start_row, start_row + size):\n            for col in range(start_col, start_col + size):\n                if np.sum(matrix[row, col:col+required_count]) == 94 * required_count:\n                    count += 1\n        return count\n\n    total_count = 0\n    rows, cols = matrix.shape\n    required_count = 94\n    \n    for size in range(1, min(rows, cols) + 1):\n        for i in range(rows - size + 1):\n            for j in range(cols - size + 1):\n                total_count += count_submatrices(i, j, size, required_count)\n    \n    return total_count\n\n# Example usage:\n# matrix = np.array([[1, 2, 91], [1, 6, 93], [1, 92, 90]])\n# print(submatrix_with_n_numbers(matrix))\n```",
        "tool_calls": []
      },
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 116,
    "total_tokens": 450,
    "completion_tokens": 334
  }
}