{
  "parameter(s)": [
    40
  ],
  "test_list_of_single_number": [
    "passed",
    "",
    0.00019
  ],
  "test_sublist_size": [
    "passed",
    "",
    0.00127
  ],
  "test_return_elements_are_in_given_list": [
    "passed",
    "",
    0.00015
  ],
  "test_list_of_several_same_number": [
    "failed",
    "AssertionError: assert [[40, 40, 40,...40, ...], ...] == [[40], [40], ...0], [40], ...]\n  At index 0 diff: [40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40] != [40]\n  Left contains 2256 more items, first extra item: [40, 40, 40, 40, 40, 40, ...]\n  Full diff:\n    [\n  +  [40,\n  +   40,\n  +   40,...\n  \n  ...Full output truncated (56446 lines hidden), use '-vv' to show",
    0.24884
  ],
  "test_presence_of_duplicates_in_result": [
    "failed",
    "assert (6 == 3)\n +  where 6 = <built-in method count of list object at 0x7c48e77f8f00>([40])\n +    where <built-in method count of list object at 0x7c48e77f8f00> = [[1, 40, 1, 40, 1, 40], [1, 40, 1, 40, 1, 40], [40, 1, 40, 1, 40], [40, 1, 40, 1, 40], [1, 40, 1, 40], [1, 40, 1, 40], ...].count",
    0.00196
  ],
  "test_if_sublist_product_equals_number": [
    "failed",
    "assert 6553600000000 == 40\n +  where 6553600000000 = <built-in function prod>([1, 2, 4, 5, 8, 10, ...])\n +    where <built-in function prod> = math.prod",
    0.00052
  ]
}