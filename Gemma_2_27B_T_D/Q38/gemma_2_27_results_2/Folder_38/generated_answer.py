def find_subset_of_length_n(elements):
    return len([subset for i in range(len(elements)) for j in range(i + 1, len(elements)) for k in range(j + 1, len(elements)) for l in range(k + 1, len(elements)) for m in range(l + 1, len(elements)) for n in range(m + 1, len(elements)) for o in range(n + 1, len(elements)) for p in range(o + 1, len(elements)) for q in range(p + 1, len(elements)) for r in range(q + 1, len(elements)) for s in range(r + 1, len(elements)) for t in range(s + 1, len(elements)) for u in range(t + 1, len(elements)) for v in range(u + 1, len(elements)) for w in range(v + 1, len(elements)) for x in range(w + 1, len(elements)) for y in range(x + 1, len(elements)) for z in range(y + 1, len(elements)) for a in range(z + 1, len(elements)) for b in range(a + 1, len(elements)) for c in range(b + 1, len(elements)) for d in range(c + 1, len(elements)) for e in range(d + 1, len(elements)) for f in range(e + 1, len(elements)) for g in range(f + 1, len(elements)) for h in range(g + 1, len(elements)) if set([elements[i], elements[j], elements[k], elements[l], elements[m], elements[n], elements[o], elements[p], elements[q], elements[r], elements[s], elements[t], elements[u], elements[v], elements[w], elements[x], elements[y], elements[z], elements[a], elements[b], elements[c], elements[d], elements[e], elements[f], elements[g], elements[h]]) == {elements[i], elements[j], elements[k], elements[l], elements[m], elements[n], elements[o], elements[p], elements[q], elements[r], elements[s], elements[t], elements[u], elements[v], elements[w], elements[x], elements[y], elements[z], elements[a], elements[b], elements[c], elements[d], elements[e], elements[f], elements[g], elements[h]}])