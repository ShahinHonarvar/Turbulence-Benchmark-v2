{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1277, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1277, "_consider_importhook"]}
{"category": "PytestAssertRewriteWarning", "filename": "/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", "lineno": 1277, "message": "Module already imported so cannot be rewritten: anyio", "$report_type": "WarningMessage", "when": "config", "location": ["/data/miniconda3/envs/benchmark/lib/python3.12/site-packages/_pytest/config/__init__.py", 1277, "_consider_importhook"]}
{"pytest_version": "8.3.3", "$report_type": "SessionStart"}
{"nodeid": "tests52_97_1.py::test_string_of_many_chars", "location": ["tests52_97_1.py", 6, "test_string_of_many_chars"], "keywords": {"test_string_of_many_chars": 1, "tests52_97_1.py": 1, "Folder_97": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 9.63749989750795e-05, "start": 1738555973.9673676, "stop": 1738555973.9674644, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "f7e0da6c5a55416d8c728579128517c0", "node": "<WorkerController gw0>"}
{"nodeid": "tests52_97_1.py::test_string_of_many_chars", "location": ["tests52_97_1.py", 6, "test_string_of_many_chars"], "keywords": {"test_string_of_many_chars": 1, "tests52_97_1.py": 1, "Folder_97": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "call", "user_properties": [], "sections": [], "duration": 8.83149987203069e-05, "start": 1738555973.9675941, "stop": 1738555973.9676828, "extras": [], "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "f7e0da6c5a55416d8c728579128517c0", "node": "<WorkerController gw0>"}
{"nodeid": "tests52_97_1.py::test_string_of_many_chars", "location": ["tests52_97_1.py", 6, "test_string_of_many_chars"], "keywords": {"test_string_of_many_chars": 1, "tests52_97_1.py": 1, "Folder_97": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 5.569199856836349e-05, "start": 1738555973.9679148, "stop": 1738555973.9679708, "$report_type": "TestReport", "item_index": 0, "worker_id": "gw0", "testrun_uid": "f7e0da6c5a55416d8c728579128517c0", "node": "<WorkerController gw0>"}
{"nodeid": "tests52_97_1.py::test_string_of_spaces", "location": ["tests52_97_1.py", 11, "test_string_of_spaces"], "keywords": {"test_string_of_spaces": 1, "tests52_97_1.py": 1, "Folder_97": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "setup", "user_properties": [], "sections": [], "duration": 5.682799746864475e-05, "start": 1738555973.968248, "stop": 1738555973.968305, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "f7e0da6c5a55416d8c728579128517c0", "node": "<WorkerController gw0>"}
{"nodeid": "tests52_97_1.py::test_string_of_spaces", "location": ["tests52_97_1.py", 11, "test_string_of_spaces"], "keywords": {"test_string_of_spaces": 1, "tests52_97_1.py": 1, "Folder_97": 1, "": 1}, "outcome": "failed", "longrepr": {"reprcrash": {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Dolphin_T_D/Q52/dolphin2_9_2_results_1/Folder_97/tests52_97_1.py", "lineno": 14, "message": "AssertionError: assert not {}\n +  where {} = palindrome_of_length_n('                                                                                                                                                                                                                                                                                                                                                                                                                                    ')"}, "reprtraceback": {"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces():", "        s = ' ' * (210 * 2)", ">       assert not palindrome_of_length_n(s)", "E       AssertionError: assert not {}", "E        +  where {} = palindrome_of_length_n('                                                                                                                                                                                                                                                                                                                                                                                                                                    ')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q52/dolphin2_9_2_results_1/Folder_97/tests52_97_1.py", "lineno": 14, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, "sections": [], "chain": [[{"reprentries": [{"type": "ReprEntry", "data": {"lines": ["    def test_string_of_spaces():", "        s = ' ' * (210 * 2)", ">       assert not palindrome_of_length_n(s)", "E       AssertionError: assert not {}", "E        +  where {'                                                                                                                                                                                                                  ', '                                                                                                                                                                                                                   ', '                                                                                                                                                                                                                    ', '                                                                                                                                                                                                                     ', '                                                                                                                                                                                                                      ', '                                                                                                                                                                                                                       ', ...} = palindrome_of_length_n('                                                                                                                                                                                                                                                                                                                                                                                                                                    ')"], "reprfuncargs": {"args": []}, "reprlocals": null, "reprfileloc": {"path": "Q52/dolphin2_9_2_results_1/Folder_97/tests52_97_1.py", "lineno": 14, "message": "AssertionError"}, "style": "long"}}], "extraline": null, "style": "long"}, {"path": "/data/ASE2024_GitHub/Turbulence-Benchmark-main/Dolphin_T_D/Q52/dolphin2_9_2_results_1/Folder_97/tests52_97_1.py", "lineno": 14, "message": "AssertionError: assert not {}\n +  where {} = palindrome_of_length_n('                                                                                                                                                                                                                                                                                                                                                                                                                                    ')"}, null]]}, "when": "call", "user_properties": [], "sections": [], "duration": 0.009943525001290254, "start": 1738555973.9683707, "stop": 1738555973.9783146, "extras": [], "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "f7e0da6c5a55416d8c728579128517c0", "node": "<WorkerController gw0>"}
{"nodeid": "tests52_97_1.py::test_string_of_spaces", "location": ["tests52_97_1.py", 11, "test_string_of_spaces"], "keywords": {"test_string_of_spaces": 1, "tests52_97_1.py": 1, "Folder_97": 1, "": 1}, "outcome": "passed", "longrepr": null, "when": "teardown", "user_properties": [], "sections": [], "duration": 9.574799696565606e-05, "start": 1738555973.9867592, "stop": 1738555973.9868555, "$report_type": "TestReport", "item_index": 1, "worker_id": "gw0", "testrun_uid": "f7e0da6c5a55416d8c728579128517c0", "node": "<WorkerController gw0>"}
{"exitstatus": 2, "$report_type": "SessionFinish"}
