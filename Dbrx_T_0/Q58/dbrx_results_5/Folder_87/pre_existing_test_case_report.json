{
  "parameter(s)": [
    96
  ],
  "test_matrix_of_one_integer": [
    "passed",
    "",
    0.00062
  ],
  "test_horizontal_matrix": [
    "failed",
    "assert 0 == 193",
    0.00029
  ],
  "test_matrix_of_having_96_integers": [
    "failed",
    "assert 0 == 1\n +  where 0 = submatrix_with_n_numbers(matrix([[  65, -100],\\n        [  82,  -52],\\n        [  58,  100],\\n        [ -57,    3],\\n        [  31,   75],\\n        [ -66,   44],\\n        [ -72,   29],\\n        [  95,   63],\\n        [  43,  -64],\\n        [ -95,  -94],\\n        [  59,    4],\\n        [  15,  -90],\\n        [ -33,   38],\\n        [ -67,   88],\\n        [  76,  -67],\\n        [  14,   60],\\n        [   2,   -3],\\n        [ -16,  -58],\\n        [  52,   55],\\n        [  27,  -69],\\n        [ -84,   69],\\n        [  12,   12],\\n        [  11,   16],\\n        [ -53,  -34],\\n        [ -92,   37],\\n        [  54,   87],\\n        [  47,   12],\\n        [  -9,   53],\\n        [ -60,   97],\\n        [ -71,   34],\\n        [ -10,   30],\\n        [ -71,  -10],\\n        [  21,  -62],\\n        [ -97,  -69],\\n        [  67,   -1],\\n        [  63,  -73],\\n        [  54,   85],\\n        [  25,   76],\\n        [  25,  -93],\\n        [  82,  -44],\\n        [ -87,    7],\\n        [  20,   -5],\\n        [ -35,  -53],\\n        [  57,   68],\\n        [  20,  -66],\\n        [ -13,   -1],\\n        [  -6,   43],\\n        [  95,  -82]]))",
    0.00063
  ],
  "test_vertical_matrix": [
    "failed",
    "assert 0 == 193",
    0.00074
  ]
}